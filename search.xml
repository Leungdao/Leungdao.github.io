<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>algorithm plus</title>
    <url>/2023/08/15/algorithm-plus/</url>
    <content><![CDATA[<p>rt</p>
<span id="more"></span>
<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="数字三角形模型"><a href="#数字三角形模型" class="headerlink" title="数字三角形模型"></a>数字三角形模型</h2><h3 id="摘花生"><a href="#摘花生" class="headerlink" title="摘花生"></a>摘花生</h3><p><img src="/2023/08/15/algorithm-plus/image-20230816214435544.png" alt="image-20230816214435544" style="zoom:50%;"></p>
<p>因为只能从上面和左边过来，所以有状态转移方程：<code>dp[i][j]=(dp[i-1][j],dp[i][j-1])+a[i][j]</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">105</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> a[N][N],dp[N][N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> r,c;<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        cin&gt;&gt;r&gt;&gt;c;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=r;i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=c;j++)<br>            &#123;<br>                cin&gt;&gt;a[i][j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=r;i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=c;j++)<br>            &#123;<br>                dp[i][j]=<span class="hljs-built_in">max</span>(dp[i<span class="hljs-number">-1</span>][j],dp[i][j<span class="hljs-number">-1</span>])+a[i][j];<br>            &#125;<br>        &#125;<br>        cout&lt;&lt;dp[r][c]&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="最低通信费"><a href="#最低通信费" class="headerlink" title="最低通信费"></a>最低通信费</h3><p>N*N的正方形方格，左上角进右下角出，题目条件总路径长度为2*N+1，即只能向下或者向右走，递推方程为<code>dp[i][j]=min(dp[i-1][j],dp[i][j-1])+a[i][j]</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">105</span>;<br><span class="hljs-type">int</span> a[N][N];<br><span class="hljs-type">int</span> dp[N][N];<br><span class="hljs-type">int</span> n;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>        &#123;<br>            cin&gt;&gt;a[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(dp,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span> dp);<span class="hljs-comment">//边界处理</span><br>    <span class="hljs-comment">//处理dp[1][1]</span><br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>        &#123;<br>            dp[i][j]=<span class="hljs-built_in">min</span>(dp[i<span class="hljs-number">-1</span>][j],dp[i][j<span class="hljs-number">-1</span>])+a[i][j];<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;dp[n][n];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>NLP入门</title>
    <url>/2024/04/05/NLP%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>NL2SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>dive into deep learning</title>
    <url>/2023/07/22/dive-into-deep-learning/</url>
    <content><![CDATA[<p>深度学习</p>
<span id="more"></span>
<h3 id="pytorch"><a href="#pytorch" class="headerlink" title="pytorch"></a>pytorch</h3><blockquote>
<p>【PyTorch深度学习快速入门教程（绝对通俗易懂！）【小土堆】】 </p>
<p><a href="https://www.bilibili.com/video/BV1hE411t7RN/?share_source=copy_web&amp;vd_source=f21aab4ae7e1148acd5e06c0dddddfd9">https://www.bilibili.com/video/BV1hE411t7RN/?share_source=copy_web&amp;vd_source=f21aab4ae7e1148acd5e06c0dddddfd9</a></p>
</blockquote>
<h3 id="1-环境管理"><a href="#1-环境管理" class="headerlink" title="1.环境管理"></a>1.环境管理</h3><p>建立不同的python版本环境（anaconda prompt）</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">conda</span> create -n pytorch python=<span class="hljs-number">3</span>.<span class="hljs-number">6</span> #创建一个名为pytorch的环境<br></code></pre></td></tr></table></figure>
<p>激活/进入特定环境</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">conda <span class="hljs-built_in">activate</span> pytorch<br></code></pre></td></tr></table></figure>
<p>环境下的工具包</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">pip list</span><br></code></pre></td></tr></table></figure>
<p>安装pytorch工具包</p>
<p>在pytorch官网按照环境复制命令在特定环境进行下载</p>
<p>安装完之后检查pytorch安装情况</p>
<figure class="highlight ceylon"><table><tr><td class="code"><pre><code class="hljs ceylon">python<br><span class="hljs-keyword">import</span> torch<br>torch.cuda.<span class="hljs-keyword">is</span><span class="hljs-number">_</span>available()<br></code></pre></td></tr></table></figure>
<p>两个工具：pycharm和jupyter</p>
<p>pycharm创建项目记得勾选对应的interpreter(如：D:\Users\lzh\anaconda3\envs\pytorch)</p>
<p>jupyter选择环境：在prompt下命令行开启jupyter：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm">conda <span class="hljs-keyword">install </span>nb_conda<br><span class="hljs-keyword">jupyter </span>notebook<br></code></pre></td></tr></table></figure>
<p>jupyter shift+enter执行并编辑下一行</p>
<h3 id="2-两个函数"><a href="#2-两个函数" class="headerlink" title="2.两个函数"></a>2.两个函数</h3><p><img src="/2023/07/22/dive-into-deep-learning/image-20240129230520456.png" alt="image-20240129230520456"></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">dir</span><span class="hljs-params">(torch)</span></span> <span class="hljs-selector-id">#dir</span>(package)<br><span class="hljs-function"><span class="hljs-title">dir</span><span class="hljs-params">(torch.cuda)</span></span><br><span class="hljs-function"><span class="hljs-title">dir</span><span class="hljs-params">(torch.cuda.is_available)</span></span> #输出是双下划线，双下划线表示不可修改，此时不能进一步打开了，就是函数了<br><span class="hljs-function"><span class="hljs-title">help</span><span class="hljs-params">(torch.cuda.is_available)</span></span><br></code></pre></td></tr></table></figure>
<h3 id="3-数据的加载"><a href="#3-数据的加载" class="headerlink" title="3.数据的加载"></a>3.数据的加载</h3><p>两个类：</p>
<ul>
<li><p>Dataset：提供一种方式去获取数据及其label。提取数据，进行编号，数据对应label</p>
<ul>
<li>如何获取每一个数据及其label</li>
<li>告诉我们总共有多少的数据</li>
</ul>
</li>
<li><p>Dataloader：为网络提供不同的数据形式。送进网络之前进行打包和压缩</p>
</li>
</ul>
<p>如果文件夹名称就是label：</p>
<p><img src="/2023/07/22/dive-into-deep-learning/image-20240130124045068.png" alt="image-20240130124045068"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyData</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,root_dir,label_dir</span>):<br>        self.root_dir = root_dir<br>        self.label_dir = label_dir<br>        self.path = os.path.join(self.root_dir,self.label_dir)<br>        self.img_path = os.listdir(self.path)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, idx</span>):<br>        img_name = self.img_path[idx]<br>        img_item_path = os.path.join(self.root_dir,self.label_dir,img_name)<br>        img = Image.<span class="hljs-built_in">open</span>(img_item_path)<br>        label = self.label_dir<br>        <span class="hljs-keyword">return</span> img, label<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.img_path)<br><br>root_dir = <span class="hljs-string">&quot;hymenoptera_data/train&quot;</span><br>ants_label_dir = <span class="hljs-string">&quot;ants&quot;</span><br>bees_label_dir = <span class="hljs-string">&quot;bees&quot;</span><br>ants_dataset = MyData(root_dir, ants_label_dir)<br>bees_dataset = MyData(root_dir, bees_label_dir)<br><br>train_dataset = ants_dataset + bees_dataset<br></code></pre></td></tr></table></figure>
<p>如果分开了img和label：</p>
<p><img src="/2023/07/22/dive-into-deep-learning/image-20240130130301999.png" alt="image-20240130130301999"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyData</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,root_dir,image_dir,label_dir</span>):<br>        self.root_dir = root_dir<br>        self.image_dir = image_dir<br>        self.label_dir = label_dir<br>        self.img_path = os.path.join(self.root_dir, self.image_dir)<br>        self.label_path = os.path.join(self.root_dir, self.label_dir)<br>        self.img_name = os.listdir(self.img_path)<br>        self.label_name = os.listdir(self.label_path)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, idx</span>):<br>        img_path = os.path.join(self.img_path,self.img_name[idx])<br>        label_path = os.path.join(self.label_path, self.label_name[idx])<br>        img = Image.<span class="hljs-built_in">open</span>(img_path)<br>        f = <span class="hljs-built_in">open</span>(label_path)<br>        label = f.readline()<br>        f.close()<br>        <span class="hljs-keyword">return</span> img,label<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.img_name)<br><br>root_dir = <span class="hljs-string">&quot;new_data/train&quot;</span><br>ants_image_dir = <span class="hljs-string">&quot;ants_image&quot;</span><br>ants_label_dir = <span class="hljs-string">&quot;ants_label&quot;</span><br>bees_image_dir = <span class="hljs-string">&quot;bees_image&quot;</span><br>bees_label_dir = <span class="hljs-string">&quot;bees_label&quot;</span><br><br>ants_dataset = MyData(root_dir,ants_image_dir,ants_label_dir)<br>bees_dataset = MyData(root_dir,bees_image_dir,bees_label_dir)<br><br>train_dataset = ants_dataset + bees_dataset<br></code></pre></td></tr></table></figure>
<h3 id="4-tensorboard的使用"><a href="#4-tensorboard的使用" class="headerlink" title="4.tensorboard的使用"></a>4.tensorboard的使用</h3><h4 id="1）SummaryWriter的使用"><a href="#1）SummaryWriter的使用" class="headerlink" title="1）SummaryWriter的使用"></a>1）SummaryWriter的使用</h4><p>文件名不能是tensorboard.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>) <span class="hljs-comment">#存储tensorboard日志地方</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    writer.add_scalar(<span class="hljs-string">&quot;y=x&quot;</span>, i, i) <span class="hljs-comment"># name y x</span><br><br>writer.close()<br></code></pre></td></tr></table></figure>
<p>运行后代码相同文件夹下生成logs文件夹</p>
<p>控制台：</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">tensorboad</span> <span class="hljs-built_in">--logdir=logs</span> <span class="hljs-comment">#logs可替换为其他存储日志文件的文件夹名称</span><br></code></pre></td></tr></table></figure>
<p><img src="/2023/07/22/dive-into-deep-learning/image-20240130162157354.png" alt="image-20240130162157354"></p>
<p>如果改变图片的名称，会重新画一幅图，如果不改变图片的名称，会在上一幅图上画</p>
<p>解决方法：删掉原有log文件</p>
<h4 id="2）add-image的使用"><a href="#2）add-image的使用" class="headerlink" title="2）add_image的使用"></a>2）add_image的使用</h4><p>add_image将图片在tensorboard中展示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>) <span class="hljs-comment">#存储tensorboard日志地方</span><br>image_path = <span class="hljs-string">&quot;hymenoptera_data/train/ants/0013035.jpg&quot;</span><br>img_PIL = Image.<span class="hljs-built_in">open</span>(image_path)<br>img_array = np.array(img_PIL)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(img_array))<br><span class="hljs-built_in">print</span>(img_array.shape)<br><br>writer.add_image(<span class="hljs-string">&quot;test&quot;</span>,img_array,<span class="hljs-number">2</span>,dataformats=<span class="hljs-string">&#x27;HWC&#x27;</span>) <span class="hljs-comment"># 标题 内容(限定格式) 第几幅 格式</span><br><br>writer.close()<br></code></pre></td></tr></table></figure>
<p><img src="/2023/07/22/dive-into-deep-learning/image-20240130164118358.png" alt="image-20240130164118358"></p>
<h3 id="5-transform的使用"><a href="#5-transform的使用" class="headerlink" title="5.transform的使用"></a>5.transform的使用</h3><h4 id="1）流程"><a href="#1）流程" class="headerlink" title="1）流程"></a>1）流程</h4><p><img src="/2023/07/22/dive-into-deep-learning/image-20240131114410103.png" alt="image-20240131114410103"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><span class="hljs-comment"># 获取图片</span><br>img_path = <span class="hljs-string">&quot;hymenoptera_data/train/ants/0013035.jpg&quot;</span><br>img = Image.<span class="hljs-built_in">open</span>(img_path)<br><span class="hljs-comment"># tensorboard</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br><span class="hljs-comment"># transform</span><br>tensor_trans = transforms.ToTensor()<br>tensor_img = tensor_trans(img)<br><span class="hljs-comment"># add_image</span><br>writer.add_image(<span class="hljs-string">&quot;img&quot;</span>,tensor_img)<br><br>writer.close()<br></code></pre></td></tr></table></figure>
<h4 id="2）常见的Transforms"><a href="#2）常见的Transforms" class="headerlink" title="2）常见的Transforms"></a>2）常见的Transforms</h4><p><img src="/2023/07/22/dive-into-deep-learning/image-20240131115743345.png" alt="image-20240131115743345"></p>
<blockquote>
<p>内置call （ctrl+p 提示参数）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__call__ &quot;</span>+name)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello &quot;</span>+name)<br><br>person = Person()<br>person(<span class="hljs-string">&quot;zhangsan&quot;</span>)<br>person.hello(<span class="hljs-string">&quot;zhangsan&quot;</span>)<br><br></code></pre></td></tr></table></figure>
<p><img src="/2023/07/22/dive-into-deep-learning/image-20240131120421868.png" alt="image-20240131120421868"></p>
</blockquote>
<ol>
<li><p>transforms.Normalize</p>
</li>
<li><p>transforms.Resize</p>
</li>
<li><p>transforms.compose:组合多个操作</p>
</li>
<li>transforms.RandomCrop</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-comment"># 打开图片</span><br>img_path = <span class="hljs-string">&quot;hymenoptera_data/train/ants/0013035.jpg&quot;</span><br>img = Image.<span class="hljs-built_in">open</span>(img_path)<br><span class="hljs-built_in">print</span>(img)<br><span class="hljs-comment"># 建立tensorboard</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br><span class="hljs-comment"># 1. totensor</span><br>trans_totensor = transforms.ToTensor()<br>img_tensor = trans_totensor(img)<br><span class="hljs-comment"># 添加原始图片</span><br>writer.add_image(<span class="hljs-string">&quot;img&quot;</span>, img_tensor, <span class="hljs-number">0</span>)<br><span class="hljs-comment"># 获取normalize后的图片</span><br><span class="hljs-comment"># 2. normalize</span><br>trans_nore = transforms.Normalize([<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>], [<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>])<br>img_nore = trans_nore(img_tensor)<br><span class="hljs-comment"># 添加转换后的图片</span><br>writer.add_image(<span class="hljs-string">&quot;img&quot;</span>, img_nore, <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 3. Resize</span><br><span class="hljs-built_in">print</span>(img.size)<br>trans_resize = transforms.Resize((<span class="hljs-number">512</span>,<span class="hljs-number">512</span>))<br><br>img_resize = trans_resize(img)<br>img_resize = trans_totensor(img_resize)<br>writer.add_image(<span class="hljs-string">&quot;Resize&quot;</span>, img_resize, <span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(img_resize)<br><br><span class="hljs-comment"># 4. compose</span><br>trans_resize_2 = transforms.Resize(<span class="hljs-number">512</span>)<br>trans_compose = transforms.Compose([trans_totensor, trans_resize_2])<br>img_resize_2 = trans_compose(img)<br>writer.add_image(<span class="hljs-string">&quot;Resize&quot;</span>, img_resize_2, <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 5. RandomCrop</span><br>trans_random = transforms.RandomCrop((<span class="hljs-number">500</span>, <span class="hljs-number">500</span>))<br>trans_compose_2 = transforms.Compose([trans_random, trans_totensor])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    img_crop = trans_compose_2(img)<br>    writer.add_image(<span class="hljs-string">&quot;RandomCrop&quot;</span>, img_crop, i)<br><br>writer.close()<br></code></pre></td></tr></table></figure>
<ul>
<li>关注输入输出</li>
<li>查阅官方文档</li>
<li>关注方法参数</li>
</ul>
<h3 id="6-数据集的使用"><a href="#6-数据集的使用" class="headerlink" title="6.数据集的使用"></a>6.数据集的使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-comment"># 数据集的变换</span><br>dataset_transform = transforms.Compose([<br>    transforms.ToTensor()<br>])<br><span class="hljs-comment"># 下载数据集</span><br>train_set = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">True</span>, transform=dataset_transform, download=<span class="hljs-literal">True</span>)<br>test_set = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=dataset_transform, download=<span class="hljs-literal">False</span>)<br><br><span class="hljs-comment"># 在tensorboard上展示</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;p10&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    img, target = test_set[i]<br>    writer.add_image(<span class="hljs-string">&quot;test_set&quot;</span>,img,i)<br><br>writer.close()<br></code></pre></td></tr></table></figure>
<p>如果下载不成功，通过迅雷等其他方式下载，建立dataset文件夹并将压缩文件直接放到dataset文件夹下，运行代码会自动解压</p>
<h3 id="7-Dataloader的使用"><a href="#7-Dataloader的使用" class="headerlink" title="7.Dataloader的使用"></a>7.Dataloader的使用</h3><p>dataloader从dataset中取数据打包，以便送入神经网络</p>
<p>torch.utils.data.DataLoader()</p>
<ul>
<li>batch_size 表示每次多少个batch_size打成一包</li>
<li>shuffle 表示是否打乱顺序（每次for data in loader时是否打乱顺序，而不是说打包是否随机取，默认就是随机取的）</li>
<li>drop_last 当data/batch_size除不尽要不要舍去剩下的data</li>
<li>numofworks 设置为0表示用主进程加载，Windows下设置为其他值可能出错</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br>test_data = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor())<br><br>test_loader = DataLoader(dataset=test_data, batch_size=<span class="hljs-number">64</span>, shuffle=<span class="hljs-literal">True</span>, num_workers=<span class="hljs-number">0</span>, drop_last=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 第一张图片和target</span><br>img, target =test_data[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(img.shape) <span class="hljs-comment">#torch.Size([3, 32, 32])</span><br><span class="hljs-built_in">print</span>(target) <span class="hljs-comment">#3</span><br><br><span class="hljs-comment"># 测试batchsize、drop_last、shuffle</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;dataloader&quot;</span>)<br><span class="hljs-comment"># 可以发现两轮结果不一样，因为shuffle的原因</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    step = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_loader:<br>        imgs , targets = data<br>        writer.add_images(<span class="hljs-string">&quot;epoch: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(epoch), imgs, step)<br>        step = step + <span class="hljs-number">1</span><br><br>writer.close()<br></code></pre></td></tr></table></figure>
<p><img src="/2023/07/22/dive-into-deep-learning/image-20240201171225665.png" alt="image-20240201171225665"></p>
<h3 id="8-torch-nn"><a href="#8-torch-nn" class="headerlink" title="8. torch.nn"></a>8. torch.nn</h3><p>nn.module：Base class for all neural network modules.</p>
<p>所有神经网络模型都要继承nn.module</p>
<p>神经网络运行于forward函数之中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = <span class="hljs-built_in">input</span> + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> output<br><br>tudui =Tudui()<br>x = torch.tensor(<span class="hljs-number">1.0</span>)<br>output = tudui(x)<br><span class="hljs-built_in">print</span>(output)<br></code></pre></td></tr></table></figure>
<blockquote>
<p>pycharm的断点调试</p>
<p><img src="/2023/07/22/dive-into-deep-learning/image-20240201173022707.png" alt="image-20240201173022707"></p>
</blockquote>
<h3 id="9-卷积操作"><a href="#9-卷积操作" class="headerlink" title="9.卷积操作"></a>9.卷积操作</h3><p><img src="/2023/07/22/dive-into-deep-learning/image-20240202104746409.png" alt="image-20240202104746409"></p>
<blockquote>
<p>torch.nn.functional.conv2d(<em>input</em>, <em>weight</em>, <em>bias=None</em>, <em>stride=1</em>, <em>padding=0</em>, <em>dilation=1</em>, <em>groups=1</em>)</p>
</blockquote>
<ul>
<li>stride：卷积核移动的步长</li>
<li>padding：输入图像是否填充</li>
<li>weight：卷积核</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><span class="hljs-comment"># 输入图像</span><br><span class="hljs-built_in">input</span> = torch.tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>                      [<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]])<br><span class="hljs-comment"># 卷积核</span><br>kernel = torch.tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>],<br>                       [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>],<br>                       [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]])<br><br><span class="hljs-built_in">input</span> = torch.reshape(<span class="hljs-built_in">input</span>, (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>))<br>kernel = torch.reshape(kernel, (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">input</span>.shape)<br><span class="hljs-built_in">print</span>(kernel.shape)<br><span class="hljs-comment"># 卷积操作</span><br>output = F.conv2d(<span class="hljs-built_in">input</span>, kernel, stride=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(output)<br><br>output2 = F.conv2d(<span class="hljs-built_in">input</span>, kernel, stride=<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(output2)<br><br>output3 = F.conv2d(<span class="hljs-built_in">input</span>, kernel, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(output3)<br></code></pre></td></tr></table></figure>
<h3 id="10-神经网络"><a href="#10-神经网络" class="headerlink" title="10.神经网络"></a>10.神经网络</h3><h4 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a>卷积层</h4><blockquote>
<p>torch.nn.Conv2d(<em>in_channels</em>, <em>out_channels</em>, <em>kernel_size</em>, <em>stride=1</em>, <em>padding=0</em>, <em>dilation=1</em>, <em>groups=1</em>, <em>bias=True</em>, <em>padding_mode=’zeros’</em>, <em>device=None</em>, <em>dtype=None</em>)</p>
</blockquote>
<ul>
<li>in_channels：输入通道数</li>
<li>out_channels：卷积层内部可通过增加卷积核数量来增加通道数</li>
<li>kernel_size：只需要设置kernel_size，参数训练中调整</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Conv2d<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./dataset&quot;</span>,train=<span class="hljs-literal">False</span>,transform=torchvision.transforms.ToTensor(),download=<span class="hljs-literal">True</span>)<br><br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br><span class="hljs-comment"># 建立神经网络模型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__() <span class="hljs-comment"># 初始化nn.module</span><br>        self.conv1 = Conv2d(in_channels=<span class="hljs-number">3</span>, out_channels=<span class="hljs-number">6</span>, kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self,x</span>):<br>        x = self.conv1(x)<br>        <span class="hljs-keyword">return</span> x<br><br>tudui = Tudui()<br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br>step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 检测模型</span><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    output = tudui(imgs)<br>    <span class="hljs-comment"># print(imgs.shape)</span><br>    <span class="hljs-comment"># print(output.shape)</span><br><br>    writer.add_images(<span class="hljs-string">&quot;input&quot;</span>, imgs, step)<br>	<span class="hljs-comment"># 为了能够用tensorboard展示进行reshape,但仅此而已</span><br>    output = torch.reshape(output, (-<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>))<br>    writer.add_images(<span class="hljs-string">&quot;output&quot;</span>, output, step)<br>    step = step + <span class="hljs-number">1</span><br>writer.close()<br></code></pre></td></tr></table></figure>
<h4 id="池化层"><a href="#池化层" class="headerlink" title="池化层"></a>池化层</h4><blockquote>
<p>池化的作用是减少参数量，下采样</p>
</blockquote>
<p>池化层的stride默认是池化核的size</p>
<p>ceil_model为true表示当输入图片不足池化核时仍然进行池化，false表示不进行</p>
<p><img src="/2023/07/22/dive-into-deep-learning/image-20240202171432750.png" alt="image-20240202171432750"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br><span class="hljs-comment"># 构建神经网络</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.maxpool1 = nn.MaxPool2d(kernel_size=<span class="hljs-number">3</span>,ceil_mode=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.maxpool1(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><span class="hljs-comment"># 数据集</span><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)<br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br><span class="hljs-comment"># 运行并展示</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;maxpool&quot;</span>)<br>tudui = Tudui()<br>step = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    writer.add_images(<span class="hljs-string">&quot;imgs&quot;</span>, imgs, step)<br>    output = tudui(imgs)<br>    writer.add_images(<span class="hljs-string">&quot;output&quot;</span>, output, step)<br>    step = step + <span class="hljs-number">1</span><br>writer.close()<br></code></pre></td></tr></table></figure>
<h4 id="非线性激活"><a href="#非线性激活" class="headerlink" title="非线性激活"></a>非线性激活</h4><p>引入非线性特征。relu、sigmoid</p>
<p>参数 inplace：一般inplace为false不覆盖</p>
<p><img src="/2023/07/22/dive-into-deep-learning/image-20240203110744742.png" alt="image-20240203110744742"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.relu = nn.ReLU(inplace=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self,<span class="hljs-built_in">input</span></span>):<br>        output = self.relu(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./dataset&quot;</span>,train=<span class="hljs-literal">False</span>,transform=torchvision.transforms.ToTensor(),download=<span class="hljs-literal">True</span>)<br><br>dataloader = DataLoader(dataset,batch_size=<span class="hljs-number">64</span>)<br><br>tudui = Tudui()<br>writer = SummaryWriter(<span class="hljs-string">&quot;relu&quot;</span>)<br>step = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    writer.add_images(<span class="hljs-string">&quot;input&quot;</span>, imgs, step)<br>    output = tudui(imgs)<br>    writer.add_images(<span class="hljs-string">&quot;output&quot;</span>, output, step)<br>    step = step + <span class="hljs-number">1</span><br>writer.close()<br></code></pre></td></tr></table></figure>
<h4 id="线性层和其他层"><a href="#线性层和其他层" class="headerlink" title="线性层和其他层"></a>线性层和其他层</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.linear = nn.Linear(<span class="hljs-number">196608</span>,<span class="hljs-number">10</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.linear(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./dataset&quot;</span>,train=<span class="hljs-literal">False</span>,transform=torchvision.transforms.ToTensor(),download=<span class="hljs-literal">True</span>)<br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>, drop_last=<span class="hljs-literal">True</span>)<br>tudui = Tudui()<br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    output = torch.flatten(imgs)<br>    output = tudui(output)<br>    <span class="hljs-built_in">print</span>(output.shape)<br></code></pre></td></tr></table></figure>
<h4 id="sequential的使用"><a href="#sequential的使用" class="headerlink" title="sequential的使用"></a>sequential的使用</h4><p><img src="/2023/07/22/dive-into-deep-learning/image-20240203114533994.png" alt="image-20240203114533994"></p>
<p><img src="/2023/07/22/dive-into-deep-learning/image-20240203120850526.png" alt="image-20240203120850526"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model1 = Sequential(<br>            Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Flatten(),<br>            Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>),<br>            Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model1(x)<br>        <span class="hljs-keyword">return</span> x<br><br>tudui = Tudui()<br><span class="hljs-built_in">print</span>(tudui)<br><span class="hljs-built_in">input</span> = torch.ones((<span class="hljs-number">64</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>))<br>output = tudui(<span class="hljs-built_in">input</span>)<br><span class="hljs-built_in">print</span>(output.shape)<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;seq&quot;</span>)<br>writer.add_graph(tudui, <span class="hljs-built_in">input</span>)<br>writer.close()<br></code></pre></td></tr></table></figure>
<h4 id="损失函数与反向传播"><a href="#损失函数与反向传播" class="headerlink" title="损失函数与反向传播"></a>损失函数与反向传播</h4><p>loss计算output和target之间的差距，loss越小越好，loss作为反向传播的依据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model1 = Sequential(<br>            Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Flatten(),<br>            Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>),<br>            Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model1(x)<br>        <span class="hljs-keyword">return</span> x<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./dataset&quot;</span>,train=<span class="hljs-literal">False</span>,transform=torchvision.transforms.ToTensor(),download=<span class="hljs-literal">True</span>)<br><br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-comment"># 损失函数</span><br>loss = nn.CrossEntropyLoss()<br>tudui = Tudui()<br><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    output = tudui(imgs)<br>    result_loss = loss(output, targets)<br>    <span class="hljs-built_in">print</span>(result_loss)<br>    <span class="hljs-built_in">input</span>()<br></code></pre></td></tr></table></figure>
<h4 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h4><p>lr：学习速率</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model1 = Sequential(<br>            Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Flatten(),<br>            Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>),<br>            Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model1(x)<br>        <span class="hljs-keyword">return</span> x<br><br><span class="hljs-comment"># 数据集</span><br>dataset= torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./dataset&quot;</span>,train=<span class="hljs-literal">False</span>,transform=torchvision.transforms.ToTensor(),<br>                                      download=<span class="hljs-literal">True</span>)<br><br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-comment"># loss、模型、优化器</span><br>loss = nn.CrossEntropyLoss()<br>tudui = Tudui()<br>optim = torch.optim.SGD(tudui.parameters(), lr=<span class="hljs-number">0.01</span>)<br><br><span class="hljs-comment"># 模型训练</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>    running_loss = <span class="hljs-number">0.0</span><br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>        imgs, targets = data<br>        output = tudui(imgs)<br>        result_loss = loss(output, targets)<br>        optim.zero_grad() <span class="hljs-comment"># 将梯度清零</span><br>        result_loss.backward() <span class="hljs-comment"># 计算新的梯度</span><br>        optim.step() <span class="hljs-comment"># 根据梯度更新参数</span><br>        running_loss = running_loss + result_loss<br>    <span class="hljs-built_in">print</span>(running_loss)<br></code></pre></td></tr></table></figure>
<h4 id="现有模型的修改与使用"><a href="#现有模型的修改与使用" class="headerlink" title="现有模型的修改与使用"></a>现有模型的修改与使用</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><br><span class="hljs-comment"># train_data = torchvision.datasets.ImageNet(&quot;../data_image_net&quot;, split=&#x27;train&#x27;, download=True,</span><br><span class="hljs-comment">#                                            transform=torchvision.transforms.ToTensor())</span><br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br>vgg16_false = torchvision.models.vgg16(pretrained=<span class="hljs-literal">False</span>)<br>vgg16_true = torchvision.models.vgg16(pretrained=<span class="hljs-literal">True</span>)<br><br><span class="hljs-built_in">print</span>(vgg16_true)<br><br>train_data = torchvision.datasets.CIFAR10(<span class="hljs-string">&#x27;../data&#x27;</span>, train=<span class="hljs-literal">True</span>, transform=torchvision.transforms.ToTensor(),<br>                                          download=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># 在现有模型后添加一层网络</span><br>vgg16_true.classifier.add_module(<span class="hljs-string">&#x27;add_linear&#x27;</span>, nn.Linear(<span class="hljs-number">1000</span>, <span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(vgg16_true)<br><br><span class="hljs-built_in">print</span>(vgg16_false)<br><span class="hljs-comment"># 修改现有模型某一层的参数值</span><br>vgg16_false.classifier[<span class="hljs-number">6</span>] = nn.Linear(<span class="hljs-number">4096</span>, <span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(vgg16_false)<br></code></pre></td></tr></table></figure>
<h3 id="11-完整训练套路"><a href="#11-完整训练套路" class="headerlink" title="11.完整训练套路"></a>11.完整训练套路</h3><p>CPU：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">from</span> model <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br><span class="hljs-comment"># 准备数据集</span><br>train_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">True</span>, transform=torchvision.transforms.ToTensor(),<br>                                          download=<span class="hljs-literal">True</span>)<br>test_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                        download=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 数据集长度</span><br>train_data_size = <span class="hljs-built_in">len</span>(train_data)<br>test_data_size = <span class="hljs-built_in">len</span>(test_data)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练数据集的长度为:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(train_data_size))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;测试数据集的长度为:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(test_data_size))<br><br><span class="hljs-comment"># 利用DataLoader来加载数据集</span><br>train_dataloader = DataLoader(train_data, batch_size=<span class="hljs-number">64</span>)<br>test_dataloader = DataLoader(test_data, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-comment"># 创建网络模型</span><br>tudui = Tudui()<br><br><span class="hljs-comment"># 损失函数</span><br>loss_fn = nn.CrossEntropyLoss()<br><br><span class="hljs-comment"># 优化器</span><br>learning_rate = <span class="hljs-number">0.01</span><br>optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)<br><br><span class="hljs-comment"># 训练网络的一些参数</span><br><span class="hljs-comment"># 记录训练次数</span><br>total_train_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 记录测试次数</span><br>total_test_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 训练的轮数</span><br>epoch = <span class="hljs-number">10</span><br><br><span class="hljs-comment"># 添加tensorboard</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs_train&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epoch):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--------第&#123;&#125;轮训练开始--------&quot;</span>.<span class="hljs-built_in">format</span>(i))<br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> train_dataloader:<br>        imgs, targets = data<br>        output = tudui(imgs)<br>        loss = loss_fn(output, targets) <span class="hljs-comment"># 计算loss</span><br>        optimizer.zero_grad() <span class="hljs-comment"># 梯度清零</span><br>        loss.backward() <span class="hljs-comment"># 计算梯度</span><br>        optimizer.step() <span class="hljs-comment"># 调整参数</span><br><br>        total_train_step = total_train_step + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> total_train_step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练次数: &#123;&#125;, Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_train_step,loss.item()))<br>            writer.add_scalar(<span class="hljs-string">&quot;train_loss&quot;</span>,loss.item(),total_train_step)<br><br>    <span class="hljs-comment"># 测试步骤</span><br>    tudui.<span class="hljs-built_in">eval</span>()<br>    total_test_loss = <span class="hljs-number">0</span><br>    total_accuracy = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_dataloader:<br>            imgs, targets = data<br>            outputs = tudui(imgs)<br>            loss = loss_fn(outputs, targets)<br>            total_test_loss = total_test_loss + loss.item()<br>            accuracy = (outputs.argmax(<span class="hljs-number">1</span>) == targets).<span class="hljs-built_in">sum</span>()<br>            total_accuracy = total_accuracy + accuracy<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_test_loss))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的正确率: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_accuracy / test_data_size))<br>    writer.add_scalar(<span class="hljs-string">&quot;test_loss&quot;</span>, total_test_loss, total_test_step)<br>    writer.add_scalar(<span class="hljs-string">&quot;test_accuracy&quot;</span>, total_accuracy / test_data_size, total_test_step)<br>    total_test_step = total_test_step + <span class="hljs-number">1</span><br><br>    torch.save(tudui, <span class="hljs-string">&quot;tudui_&#123;&#125;.pth&quot;</span>.<span class="hljs-built_in">format</span>(i))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;模型已保存&quot;</span>)<br><br>writer.close()<br></code></pre></td></tr></table></figure>
<h3 id="12-利用GPU训练"><a href="#12-利用GPU训练" class="headerlink" title="12. 利用GPU训练"></a>12. 利用GPU训练</h3><p>方法一：调用 网络模型、数据（输入、标注）、损失函数的 cuda方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> torch.cuda.is_available(): <span class="hljs-comment"># 判断cuda是否可用</span><br>	xxx<br></code></pre></td></tr></table></figure>
<p>GPU版：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">from</span> model <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br><span class="hljs-comment"># 准备数据集</span><br>train_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">True</span>, transform=torchvision.transforms.ToTensor(),<br>                                          download=<span class="hljs-literal">True</span>)<br>test_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                        download=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 数据集长度</span><br>train_data_size = <span class="hljs-built_in">len</span>(train_data)<br>test_data_size = <span class="hljs-built_in">len</span>(test_data)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练数据集的长度为:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(train_data_size))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;测试数据集的长度为:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(test_data_size))<br><br><span class="hljs-comment"># 利用DataLoader来加载数据集</span><br>train_dataloader = DataLoader(train_data, batch_size=<span class="hljs-number">64</span>)<br>test_dataloader = DataLoader(test_data, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-comment"># 创建网络模型</span><br>tudui = Tudui()<br><span class="hljs-keyword">if</span> torch.cuda.is_available():<br>    tudui = tudui.cuda()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;yes&quot;</span>)<br><span class="hljs-comment"># 损失函数</span><br>loss_fn = nn.CrossEntropyLoss()<br><span class="hljs-keyword">if</span> torch.cuda.is_available():<br>    loss_fn = loss_fn.cuda()<br><span class="hljs-comment"># 优化器</span><br>learning_rate = <span class="hljs-number">0.01</span><br>optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)<br><br><span class="hljs-comment"># 训练网络的一些参数</span><br><span class="hljs-comment"># 记录训练次数</span><br>total_train_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 记录测试次数</span><br>total_test_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 训练的轮数</span><br>epoch = <span class="hljs-number">10</span><br><br><span class="hljs-comment"># 添加tensorboard</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs_train&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epoch):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--------第&#123;&#125;轮训练开始--------&quot;</span>.<span class="hljs-built_in">format</span>(i))<br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> train_dataloader:<br>        imgs, targets = data<br>        <span class="hljs-keyword">if</span> torch.cuda.is_available():<br>            targets = targets.cuda()<br>            imgs = imgs.cuda()<br>        output = tudui(imgs)<br>        loss = loss_fn(output, targets) <span class="hljs-comment"># 计算loss</span><br>        optimizer.zero_grad() <span class="hljs-comment"># 梯度清零</span><br>        loss.backward() <span class="hljs-comment"># 计算梯度</span><br>        optimizer.step() <span class="hljs-comment"># 调整参数</span><br><br>        total_train_step = total_train_step + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> total_train_step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练次数: &#123;&#125;, Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_train_step,loss.item()))<br>            writer.add_scalar(<span class="hljs-string">&quot;train_loss&quot;</span>,loss.item(),total_train_step)<br><br>    <span class="hljs-comment"># 测试步骤</span><br>    tudui.<span class="hljs-built_in">eval</span>()<br>    total_test_loss = <span class="hljs-number">0</span><br>    total_accuracy = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_dataloader:<br>            imgs, targets = data<br>            <span class="hljs-keyword">if</span> torch.cuda.is_available():<br>                targets = targets.cuda()<br>                imgs = imgs.cuda()<br>            outputs = tudui(imgs)<br>            loss = loss_fn(outputs, targets)<br>            total_test_loss = total_test_loss + loss.item()<br>            accuracy = (outputs.argmax(<span class="hljs-number">1</span>) == targets).<span class="hljs-built_in">sum</span>()<br>            total_accuracy = total_accuracy + accuracy<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_test_loss))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的正确率: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_accuracy / test_data_size))<br>    writer.add_scalar(<span class="hljs-string">&quot;test_loss&quot;</span>, total_test_loss, total_test_step)<br>    writer.add_scalar(<span class="hljs-string">&quot;test_accuracy&quot;</span>, total_accuracy / test_data_size, total_test_step)<br>    total_test_step = total_test_step + <span class="hljs-number">1</span><br><br>    torch.save(tudui, <span class="hljs-string">&quot;tudui_&#123;&#125;.pth&quot;</span>.<span class="hljs-built_in">format</span>(i))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;模型已保存&quot;</span>)<br><br>writer.close()<br></code></pre></td></tr></table></figure>
<p>方法二：</p>
<p>首先创建device，然后调用 网络模型、数据（输入、标注）、损失函数 的to方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">torch.device(<span class="hljs-string">&quot;cuda&quot;</span>)<br>torch.device(<span class="hljs-string">&quot;cpu&quot;</span>)<br>device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span>)<br></code></pre></td></tr></table></figure>
<p>GPU版：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">from</span> model <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span>)<br><br><span class="hljs-comment"># 准备数据集</span><br>train_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">True</span>, transform=torchvision.transforms.ToTensor(),<br>                                          download=<span class="hljs-literal">True</span>)<br>test_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                        download=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 数据集长度</span><br>train_data_size = <span class="hljs-built_in">len</span>(train_data)<br>test_data_size = <span class="hljs-built_in">len</span>(test_data)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练数据集的长度为:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(train_data_size))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;测试数据集的长度为:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(test_data_size))<br><br><span class="hljs-comment"># 利用DataLoader来加载数据集</span><br>train_dataloader = DataLoader(train_data, batch_size=<span class="hljs-number">64</span>)<br>test_dataloader = DataLoader(test_data, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-comment"># 创建网络模型</span><br>tudui = Tudui()<br>tudui = tudui.to(device)<br><span class="hljs-comment"># 损失函数</span><br>loss_fn = nn.CrossEntropyLoss()<br>loss_fn = loss_fn.to(device)<br><span class="hljs-comment"># 优化器</span><br>learning_rate = <span class="hljs-number">0.01</span><br>optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)<br><br><span class="hljs-comment"># 训练网络的一些参数</span><br><span class="hljs-comment"># 记录训练次数</span><br>total_train_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 记录测试次数</span><br>total_test_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 训练的轮数</span><br>epoch = <span class="hljs-number">10</span><br><br><span class="hljs-comment"># 添加tensorboard</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs_train&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epoch):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--------第&#123;&#125;轮训练开始--------&quot;</span>.<span class="hljs-built_in">format</span>(i))<br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> train_dataloader:<br>        imgs, targets = data<br>        targets = targets.to(device)<br>        imgs = imgs.to(device)<br>        output = tudui(imgs)<br>        loss = loss_fn(output, targets) <span class="hljs-comment"># 计算loss</span><br>        optimizer.zero_grad() <span class="hljs-comment"># 梯度清零</span><br>        loss.backward() <span class="hljs-comment"># 计算梯度</span><br>        optimizer.step() <span class="hljs-comment"># 调整参数</span><br><br>        total_train_step = total_train_step + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> total_train_step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练次数: &#123;&#125;, Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_train_step,loss.item()))<br>            writer.add_scalar(<span class="hljs-string">&quot;train_loss&quot;</span>,loss.item(),total_train_step)<br><br>    <span class="hljs-comment"># 测试步骤</span><br>    tudui.<span class="hljs-built_in">eval</span>()<br>    total_test_loss = <span class="hljs-number">0</span><br>    total_accuracy = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_dataloader:<br>            imgs, targets = data<br>            targets = targets.to(device)<br>            imgs = imgs.to(device)<br>            outputs = tudui(imgs)<br>            loss = loss_fn(outputs, targets)<br>            total_test_loss = total_test_loss + loss.item()<br>            accuracy = (outputs.argmax(<span class="hljs-number">1</span>) == targets).<span class="hljs-built_in">sum</span>()<br>            total_accuracy = total_accuracy + accuracy<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_test_loss))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的正确率: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_accuracy / test_data_size))<br>    writer.add_scalar(<span class="hljs-string">&quot;test_loss&quot;</span>, total_test_loss, total_test_step)<br>    writer.add_scalar(<span class="hljs-string">&quot;test_accuracy&quot;</span>, total_accuracy / test_data_size, total_test_step)<br>    total_test_step = total_test_step + <span class="hljs-number">1</span><br><br>    torch.save(tudui, <span class="hljs-string">&quot;tudui_&#123;&#125;.pth&quot;</span>.<span class="hljs-built_in">format</span>(i))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;模型已保存&quot;</span>)<br><br>writer.close()<br></code></pre></td></tr></table></figure>
<h3 id="13-模型验证"><a href="#13-模型验证" class="headerlink" title="13.模型验证"></a>13.模型验证</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">tudui = torch.load(<span class="hljs-string">&quot;tudui_9.pth&quot;</span>, map_location=torch.device(<span class="hljs-string">&#x27;cpu&#x27;</span>)) <br><span class="hljs-comment"># 如果使用GPU训练的模型，使用map_location映射到cpu上</span><br>...<br><span class="hljs-comment"># 测试之前：</span><br>tudui.<span class="hljs-built_in">eval</span>()<br><span class="hljs-keyword">with</span> torch.no_grad():<br></code></pre></td></tr></table></figure>
<p>test.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> model <span class="hljs-keyword">import</span> *<br><br><br>image_path = <span class="hljs-string">&quot;dataset/dog.jpg&quot;</span><br>image = Image.<span class="hljs-built_in">open</span>(image_path)<br><span class="hljs-built_in">print</span>(image)<br>image = image.convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)<br>transform = torchvision.transforms.Compose([torchvision.transforms.Resize((<span class="hljs-number">32</span>,<span class="hljs-number">32</span>)),<br>                                            torchvision.transforms.ToTensor()])<br><br>image = transform(image)<br><span class="hljs-built_in">print</span>(image)<br><br>tudui = torch.load(<span class="hljs-string">&quot;tudui_9.pth&quot;</span>, map_location=torch.device(<span class="hljs-string">&#x27;cpu&#x27;</span>))<br><span class="hljs-built_in">print</span>(tudui)<br><br>image = torch.reshape(image, (<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>))<br>tudui.<span class="hljs-built_in">eval</span>()<br><span class="hljs-keyword">with</span> torch.no_grad():<br>    output = tudui(image)<br><span class="hljs-built_in">print</span>(output)<br><span class="hljs-built_in">print</span>(output.argmax(<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure>
<p>pytorch入门部分 完结撒花😊</p>
]]></content>
      <tags>
        <tag>DL</tag>
      </tags>
  </entry>
  <entry>
    <title>回溯法题解</title>
    <url>/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>《算法设计与分析》一书中回溯法习题求解</p>
<span id="more"></span>
<p>书写结构：解空间和解结构，剪枝策略，示例，代码，时间复杂度分析</p>
<h1 id="5-1子集和问题"><a href="#5-1子集和问题" class="headerlink" title="5-1子集和问题"></a>5-1子集和问题</h1><p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230102174153224.png" alt="image-20230102174153224" style="zoom: 67%;"></p>
<h3 id="1-解空间和解结构"><a href="#1-解空间和解结构" class="headerlink" title="1. 解空间和解结构"></a>1. 解空间和解结构</h3><p>类似于0-1背包问题，对于S大小为n的子集和问题，解空间是由长度为n的0-1向量组成，解的结构为子集树，如对于上述示例的解，解空间即为(1,1,1,0,0,0)</p>
<h3 id="2-剪枝策略"><a href="#2-剪枝策略" class="headerlink" title="2. 剪枝策略"></a>2. 剪枝策略</h3><p>注意到题目说S是正整数的集合，c是正整数，故深搜的过程一定使得子集和增加或不变。</p>
<p>考虑在某节点处向下搜索的过程，设当前层数为k（即当前考虑是否加入数S[k]到子集中）</p>
<p>约束函数：维护变量cw表示当前子集和，若<code>cw+S[k]&gt;c</code>，则剪去左子树</p>
<p>限界函数：计算变量rw表示剩余的整数之和(S[k+1:n-1]之和)，若<code>cw+rw&lt;c</code>，即将之后所有整数加入子集也无法得到解，故减去右子树</p>
<p>对于本题而言，如果只要一个可行解的话，可以在搜索每个节点的时候，在考虑完是否加入数S[k]之后，判断S[k]是否等于c，若等于，则无需再搜索了</p>
<h3 id="3-示例"><a href="#3-示例" class="headerlink" title="3. 示例"></a>3. 示例</h3><p>太多了不太好画，减少点数据量：</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">10</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure>
<p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230102221034796.png" alt="image-20230102221034796" style="zoom: 50%;"></p>
<h3 id="4-代码"><a href="#4-代码" class="headerlink" title="4. 代码"></a>4. 代码</h3><p>这里就没弄文件读写了（可以直接粘贴下面的输入测试啦）</p>
<p>输入1：</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">10</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure>
<p>输入2：</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">10</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure>
<p>得到一个解：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> S[N],res[N];<br><span class="hljs-type">int</span> n,c;<br><span class="hljs-type">int</span> num=<span class="hljs-number">0</span>;<span class="hljs-comment">//解的数量</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dispsolution</span><span class="hljs-params">(<span class="hljs-type">int</span> res[])</span></span><br><span class="hljs-function"></span>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;第&quot;</span>&lt;&lt;num++&lt;&lt;<span class="hljs-string">&quot;个解&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>     <span class="hljs-keyword">if</span>(res[i]) cout&lt;&lt;S[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> cw,<span class="hljs-type">int</span> rw,<span class="hljs-type">int</span> res[],<span class="hljs-type">int</span> level)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(level&gt;n)<span class="hljs-comment">//到达叶节点了</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(cw==c)<span class="hljs-comment">//找到可行解</span><br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>            &#123;<br>             <span class="hljs-keyword">if</span>(res[i]) cout&lt;&lt;S[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>            &#125;<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">//直接结束程序(会不会有点暴力)</span><br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(cw+S[level]&lt;=c)<span class="hljs-comment">//考虑是否进入左子树</span><br>        &#123;<br>            res[level]=<span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">dfs</span>(cw+S[level],rw-S[level],res,level+<span class="hljs-number">1</span>);<br>        &#125;<br>        rw=rw-S[level];<span class="hljs-comment">//计算剩余整数之和(剩余整数不包括当前整数)</span><br>        <span class="hljs-comment">//这里和博客不太一样(他rw算的是包括当前的整数的)</span><br>        <span class="hljs-keyword">if</span>(cw+rw&gt;=c)<span class="hljs-comment">//考虑是否进入右子树</span><br>        &#123;<br>            res[level]=<span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">dfs</span>(cw,rw,res,level+<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;c;<br>    <span class="hljs-type">int</span> rw=<span class="hljs-number">0</span>;<span class="hljs-comment">//为了方便计算rw,首先计算所有整数的和</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-comment">//为了方便,从下标1开始</span><br>    &#123;<br>        cin&gt;&gt;S[i];<br>        rw=rw+S[i];<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,rw,res,<span class="hljs-number">1</span>);<span class="hljs-comment">//cw=1,res存储解,从第一层开始</span><br>    <span class="hljs-keyword">if</span>(num==<span class="hljs-number">0</span>) cout&lt;&lt;<span class="hljs-string">&quot;No Solution!&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230102214448956.png" alt="image-20230102214448956"></p>
<p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230102214508262.png" alt="image-20230102214508262"></p>
<p>得到所有解：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> S[N],res[N];<br><span class="hljs-type">int</span> n,c;<br><span class="hljs-type">int</span> num=<span class="hljs-number">0</span>;<span class="hljs-comment">//解的数量</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dispsolution</span><span class="hljs-params">(<span class="hljs-type">int</span> res[])</span></span><br><span class="hljs-function"></span>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;第&quot;</span>&lt;&lt;num++&lt;&lt;<span class="hljs-string">&quot;个解&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>     <span class="hljs-keyword">if</span>(res[i]) cout&lt;&lt;S[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> cw,<span class="hljs-type">int</span> rw,<span class="hljs-type">int</span> res[],<span class="hljs-type">int</span> level)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(level&gt;n)<span class="hljs-comment">//到达叶节点了</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(cw==c)  <span class="hljs-built_in">dispsolution</span>(res);<span class="hljs-comment">//找到可行解</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(cw+S[level]&lt;=c)<span class="hljs-comment">//考虑是否进入左子树</span><br>        &#123;<br>            res[level]=<span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">dfs</span>(cw+S[level],rw-S[level],res,level+<span class="hljs-number">1</span>);<br>        &#125;<br>        rw=rw-S[level];<span class="hljs-comment">//计算剩余整数之和(剩余整数不包括当前整数)</span><br>        <span class="hljs-comment">//这里和博客不太一样(他rw算的是包括当前的整数的)</span><br>        <span class="hljs-keyword">if</span>(cw+rw&gt;=c)<span class="hljs-comment">//考虑是否进入右子树</span><br>        &#123;<br>            res[level]=<span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">dfs</span>(cw,rw,res,level+<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;c;<br>    <span class="hljs-type">int</span> rw=<span class="hljs-number">0</span>;<span class="hljs-comment">//为了方便计算rw,首先计算所有整数的和</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-comment">//为了方便,从下标1开始</span><br>    &#123;<br>        cin&gt;&gt;S[i];<br>        rw=rw+S[i];<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,rw,res,<span class="hljs-number">1</span>);<span class="hljs-comment">//cw=1,res存储解,从第一层开始</span><br>    <span class="hljs-keyword">if</span>(num==<span class="hljs-number">0</span>) cout&lt;&lt;<span class="hljs-string">&quot;No Solution!&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230102214546946.png" alt="image-20230102214546946"></p>
<p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230102214609533.png" alt="image-20230102214609533"></p>
<h3 id="5-时间复杂度分析"><a href="#5-时间复杂度分析" class="headerlink" title="5. 时间复杂度分析"></a>5. 时间复杂度分析</h3><p>考虑最坏情况下时间复杂度，每个节点都进行搜索，处理每个节点所需的时间均为$O(1)$，一共有1+2+4+8+…+2^n^</p>
<p>=$O(2^{n+1})$个节点，故时间复杂度为$O(2^{n+1})$</p>
<p>参考：<a href="https://blog.csdn.net/gl620321/article/details/108801724">https://blog.csdn.net/gl620321/article/details/108801724</a></p>
<h1 id="5-2-最小长度电路板排列问题"><a href="#5-2-最小长度电路板排列问题" class="headerlink" title="5-2 最小长度电路板排列问题"></a>5-2 最小长度电路板排列问题</h1><p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230102223036593.png" alt="image-20230102223036593" style="zoom:67%;"></p>
<p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230102223107634.png" alt="image-20230102223107634" style="zoom:67%;"></p>
<h3 id="1-解空间和解结构-1"><a href="#1-解空间和解结构-1" class="headerlink" title="1. 解空间和解结构"></a>1. 解空间和解结构</h3><p>类似于旅行商问题，对于n个电路板的最小电路板排列问题，其解空间为n个数的全排列，解结构为排列树</p>
<h3 id="2-剪枝策略-1"><a href="#2-剪枝策略-1" class="headerlink" title="2. 剪枝策略"></a>2. 剪枝策略</h3><p>维护变量bestd表示当前的最小长度，假设此时选择第i个位置上的电路板，考虑选择第j个电路板(j&gt;=i，因为i前面的已经选择好了)作为该位置上的排列，此时利用已经选择好的第1~第i个位置上的电路板（第i个位置刚刚选择好的）来计算连接块的最大长度，若该长度小于当前最优解，则继续进行下面位置的选择，否则第i个位置上不能选择第j个电路板，剪去该子树</p>
<h3 id="3-示例-1"><a href="#3-示例-1" class="headerlink" title="3. 示例"></a>3. 示例</h3><p>示例数据量太大，减少点</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>
<p>4个电路板，L1={1,2},L2={1,2,4},L3={1,4},L4={1,2,3}</p>
<p>类似于下面的画法（排列树太多了，只画了一个子树）：</p>
<p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230103104730475.png" alt="image-20230103104730475"></p>
<p>最后的结果：</p>
<p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230103102814230.png" alt="image-20230103102814230"></p>
<h3 id="4-代码-1"><a href="#4-代码-1" class="headerlink" title="4. 代码"></a>4. 代码</h3><p>输入文件 input.txt:</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">8 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>
<p>输入含义</p>
<p>L1={1,4,5,6},L2={1,2,3,6,8},L3={1,3,4,5},L4={1,2,3,4,6},L5={1,7,8}</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> bestx[<span class="hljs-number">10</span>];<span class="hljs-comment">// 这是最终的最优解排列顺序</span><br><span class="hljs-type">int</span> B[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>];<span class="hljs-comment">//电路板在连接块中的排列，是一个二维数组</span><br><span class="hljs-type">int</span> x[<span class="hljs-number">10</span>], low[<span class="hljs-number">10</span>], high[<span class="hljs-number">10</span>];<span class="hljs-comment">// 分别是当前的排列、最左边电路板、最右边电路板</span><br><span class="hljs-type">int</span> bestd=<span class="hljs-number">0</span>;<span class="hljs-comment">// 最优解</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">len</span><span class="hljs-params">(<span class="hljs-type">int</span> ii)</span> </span>&#123;<span class="hljs-comment">// 计算当前ii排列最小长度</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>		high[i] = <span class="hljs-number">0</span>;<br>		low[i] = n + <span class="hljs-number">1</span>;<span class="hljs-comment">// 先初始化最左边和最右边的值，</span><br>	&#125;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= ii; i++)<span class="hljs-comment">// 对于第i行</span><br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= m; k++)<span class="hljs-comment">// k列</span><br>			<span class="hljs-keyword">if</span> (B[x[i]][k] &gt; <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">// 如果第i个电路板在第k个连接块中，</span><br>				<span class="hljs-keyword">if</span> (i &lt; low[k])<span class="hljs-comment">//low[k]代表第K个连接块的最左边的值，如果i比它小，则更新左值</span><br>					low[k] = i;<br>				<span class="hljs-keyword">if</span> (i &gt; high[k])<br>					high[k] = i;<span class="hljs-comment">//如果比初始的右值大，则更新右值</span><br>			&#125;<br>	<span class="hljs-type">int</span> tmp = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= m; k++)<br>		<span class="hljs-keyword">if</span> (low[k] &lt;= n &amp;&amp; high[k] &gt; <span class="hljs-number">0</span> &amp;&amp; tmp &lt; high[k] - low[k])<br>            <span class="hljs-comment">//若连接块的长度无法得到（前面两个bool表达式不满足，不计算该连接块的长度）</span><br>			tmp = high[k] - low[k];<span class="hljs-comment">//计算每个连接块的举例</span><br>	<span class="hljs-keyword">return</span> tmp;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>* x, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> </span>&#123;<span class="hljs-comment">// 交换i和j位置的值</span><br>	<span class="hljs-type">int</span> tmp;<br>	tmp = x[i];<br>	x[i] = x[j];<br>	x[j] = tmp;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>&#123;<br>	<span class="hljs-keyword">if</span> (i == n) &#123;<span class="hljs-comment">// 如果到达末尾</span><br>		<span class="hljs-type">int</span> tmp = <span class="hljs-built_in">len</span>(i);<span class="hljs-comment">// 计算当前排列最小长度</span><br>		<span class="hljs-keyword">if</span> (tmp &lt; bestd) &#123;<br>			bestd = tmp;<br>			<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>				bestx[j] = x[j];<br>		&#125; <span class="hljs-comment">// 如果比最优解还要好，则更新bestx[]排列；</span><br>	&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 若不是末尾；</span><br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= n; j++) &#123;<br>			<span class="hljs-built_in">swap</span>(x, i, j);<br>			<span class="hljs-type">int</span> ld = <span class="hljs-built_in">len</span>(i);<br>			<span class="hljs-keyword">if</span> (ld &lt; bestd)<br>				<span class="hljs-built_in">backtrack</span>(i + <span class="hljs-number">1</span>);<span class="hljs-comment">// 则继续进入下一个数，</span><br>			<span class="hljs-built_in">swap</span>(x, i, j);<br>		&#125;<br>	&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">arrangeBoards</span><span class="hljs-params">()</span> </span>&#123;<br>	bestd = n + <span class="hljs-number">1</span>;<span class="hljs-comment">// 先假设一个很大的值</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>		x[i] = i;<span class="hljs-comment">// 这里是最开始的排序；</span><br>	<span class="hljs-built_in">backtrack</span>(<span class="hljs-number">1</span>);<br>	<span class="hljs-keyword">return</span> bestd;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>	<span class="hljs-function">ifstream <span class="hljs-title">ifs</span><span class="hljs-params">(<span class="hljs-string">&quot;input.txt&quot;</span>)</span></span>;<span class="hljs-comment">//文件输入流</span><br>	ifs&gt;&gt;n;<br>	ifs&gt;&gt;m;<br><br>	<span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">temp</span><span class="hljs-params">(m)</span></span>;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;<br>			ifs&gt;&gt;B[i][j] ;<span class="hljs-comment">// 输入的电路板的二维数组排列</span><br>		&#125;<br>	&#125;<br>	<span class="hljs-type">int</span> minLen = <span class="hljs-built_in">arrangeBoards</span>();<br>	cout&lt;&lt;minLen&lt;&lt;endl;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>		cout&lt;&lt;bestx[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>	ifs.<span class="hljs-built_in">close</span>();<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230103102521881.png" alt="image-20230103102521881"></p>
<h3 id="5-时间复杂度分析-1"><a href="#5-时间复杂度分析-1" class="headerlink" title="5. 时间复杂度分析"></a>5. 时间复杂度分析</h3><p>对于最坏情况，每个节点都需要计算一次len，即序号运行len函数，而第i层节点运行len函数时间复杂度为$O(im)$，故最坏情况下所需时间为$T=O(m)<em>(n-1)+O(2m)</em>(n-1)<em>(n-2)+…+O(n</em>m)<em>(n-1)!$，故最坏情况下时间复杂度为$O(m</em>n!)$</p>
<h1 id="5-3-最小重量机器设计问题"><a href="#5-3-最小重量机器设计问题" class="headerlink" title="5-3 最小重量机器设计问题"></a>5-3 最小重量机器设计问题</h1><p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230103110515293.png" alt="image-20230103110515293" style="zoom:67%;"></p>
<p>题目两个要求，总价格不超过d，并且部件重量之和要最小</p>
<h3 id="1-解空间和解结构-2"><a href="#1-解空间和解结构-2" class="headerlink" title="1. 解空间和解结构"></a>1. 解空间和解结构</h3><p>对于n个部件，m个供应商的最小重量机器设计问题，其解空间为长度为n的向量，向量的每一项为1~m的整数，对应的解结构为排列树（也不是那种TSP的排列树，不过也是排列啦，姑且称之为排列树）</p>
<h3 id="2-剪枝策略-2"><a href="#2-剪枝策略-2" class="headerlink" title="2. 剪枝策略"></a>2. 剪枝策略</h3><p>考虑第i个部件供应商的选择</p>
<p>约束函数：维护变量cp表示当前已经购得的部件的价格之和，假设考虑选择第j个供应商，若<code>cp+c[i][j]&gt;d</code>，则剪去以该节点为根节点的子树，无需再进行搜索</p>
<p>限界函数：维护变量cw表示当前已经购得的部件的重量之和，变量bestw表示当前最优解的重量之和，假设考虑选择第j个供应商，若<code>cw+w[i][j]&gt;=bestw</code>，则剪去该节点为根节点的子树，无需进行搜索</p>
<h3 id="3-示例-2"><a href="#3-示例-2" class="headerlink" title="3. 示例"></a>3. 示例</h3><p>对于题中示例画树：</p>
<p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230103210648180.png" alt="image-20230103210648180"></p>
<h3 id="4-代码-2"><a href="#4-代码-2" class="headerlink" title="4. 代码"></a>4. 代码</h3><p>输入：</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>
<p>没实现文件读写了~</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m,d;<span class="hljs-comment">//n个部件，m个供应商，总价格不超过d</span><br><span class="hljs-type">int</span> c[<span class="hljs-number">999</span>][<span class="hljs-number">999</span>];<span class="hljs-comment">//c[i][j]为从供应商j购买部件i所花费的价格；</span><br><span class="hljs-type">int</span> w[<span class="hljs-number">999</span>][<span class="hljs-number">999</span>];<span class="hljs-comment">//w[i][j]为......重量</span><br><span class="hljs-type">int</span> cw=<span class="hljs-number">0</span>,cp=<span class="hljs-number">0</span>;<span class="hljs-comment">//当前部件的重量 价格</span><br><span class="hljs-type">int</span> bestw=<span class="hljs-number">999</span>,bestp=<span class="hljs-number">999</span>;<span class="hljs-comment">//最优方案的重量，价格</span><br><span class="hljs-type">int</span> x[<span class="hljs-number">999</span>];<span class="hljs-comment">//当前部件i从供应商j购买</span><br><span class="hljs-type">int</span> bestx[<span class="hljs-number">999</span>];<span class="hljs-comment">//最优方案部件i从哪个供应商买</span><br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>&#123;<br>	<span class="hljs-keyword">if</span>(i&gt;=n)&#123;<span class="hljs-comment">//到达最后一层 </span><br>		<span class="hljs-keyword">if</span>(cp&lt;=d&amp;&amp;cw&lt;bestw)&#123;<span class="hljs-comment">//如果价格没超过d，并且重量小于之前方案的bestw </span><br>			bestw=cw;<span class="hljs-comment">//重量更新 </span><br>			bestp=cp;<span class="hljs-comment">//价格更新</span><br>			<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;n;k++)&#123;<br>				bestx[k]=x[k];<span class="hljs-comment">//部件的供应商进行更新 </span><br>			&#125;<br>		&#125;<br>	&#125;<br>	<span class="hljs-keyword">else</span>&#123;<br>	<span class="hljs-comment">//所有的方式都尝试了一遍，比较找到最优的重量</span><br>		<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>			x[i]=j;<span class="hljs-comment">//当前部件i的供应商为j</span><br>			cw=cw+w[i][j];<br>			cp=cp+c[i][j];<br>			<span class="hljs-keyword">if</span>(cw&lt;bestw&amp;&amp;cp&lt;=d)<span class="hljs-comment">//如果这次的选择要比之前方案的更优 </span><br>			<span class="hljs-built_in">backtrack</span>(i+<span class="hljs-number">1</span>); <br>		<span class="hljs-comment">//回溯</span><br>			cw-=w[i][j];<br>			cp-=c[i][j]; <br>		&#125;<br>	&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>	cin&gt;&gt;n&gt;&gt;m&gt;&gt;d;<span class="hljs-comment">//n个部件，m个供应商，总价格不超过d</span><br>	<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>		<span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>			cin&gt;&gt;c[i][j];<span class="hljs-comment">//c[i][j]为从供应商j购买部件i所花费的价格；</span><br>		&#125;<br>	&#125;<br>	<span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>		<span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>			cin&gt;&gt;w[i][j];<span class="hljs-comment">//w[i][j]为......重量</span><br>		&#125;<br>	&#125;<br>	<span class="hljs-built_in">backtrack</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">//第i个部件</span><br>	cout&lt;&lt;bestw&lt;&lt;endl;<span class="hljs-comment">//最优方案的重量</span><br>	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;n;k++)<br>	cout&lt;&lt;bestx[k]+<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-string">&quot; &quot;</span>; <span class="hljs-comment">//因为j从0开始，所以输出的时候加一个1；</span><br><br>&#125; <br></code></pre></td></tr></table></figure>
<p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230103200657123.png" alt="image-20230103200657123"></p>
<h3 id="5-时间复杂度分析-2"><a href="#5-时间复杂度分析-2" class="headerlink" title="5. 时间复杂度分析"></a>5. 时间复杂度分析</h3><p>考虑最坏情况，对于每个非叶子节点，搜索所需时间为$O(m)$，对于每个叶子节点，搜索所需的时间为$O(1)$，故最坏情况下所需时间为$T=m*(m+m^2+…+m^{n-1})+m^n=O(m^n)$</p>
<h1 id="5-4-运动员最佳配对问题"><a href="#5-4-运动员最佳配对问题" class="headerlink" title="5-4 运动员最佳配对问题"></a>5-4 运动员最佳配对问题</h1><p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230103211224034.png" alt="image-20230103211224034" style="zoom:67%;"></p>
<p>输入：</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">5</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">52<br></code></pre></td></tr></table></figure>
<h3 id="1-解空间和解结构-3"><a href="#1-解空间和解结构-3" class="headerlink" title="1. 解空间和解结构"></a>1. 解空间和解结构</h3><p>将问题转换为男运动员选女运动员的问题，故n个男、女运动员的运动员最佳匹配问题的解空间为n个数的全排列，对应的解结构为排列树</p>
<h3 id="2-剪枝策略-3"><a href="#2-剪枝策略-3" class="headerlink" title="2. 剪枝策略"></a>2. 剪枝策略</h3><p>考虑对第i个男运动员匹配女运动员的情况，其中变量Max存储当前最优解的竞赛优势，变量sum存储第1~i-1个已经匹配完成的男运动员的竞赛优势，计算第i~n个男运动员的最大可能的竞赛优势ctn，若<code>cnt+sum&lt;Max</code>，则剪去该节点及其子树</p>
<p>其中第j个男运动员的最大可能的竞赛优势为该男运动员与所有女运动员进行匹配所得竞赛优势中最大者，存储到maxsum数组中</p>
<h3 id="3-示例-3"><a href="#3-示例-3" class="headerlink" title="3.示例"></a>3.示例</h3><p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230103214009258.png" alt="image-20230103214009258"></p>
<h3 id="4-代码-3"><a href="#4-代码-3" class="headerlink" title="4.代码"></a>4.代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> boy[<span class="hljs-number">21</span>][<span class="hljs-number">21</span>],girl[<span class="hljs-number">21</span>][<span class="hljs-number">21</span>];   <span class="hljs-comment">//分别用于存放男、女运动员的竞赛优势</span><br><span class="hljs-type">int</span> Max=INT_MIN;   <span class="hljs-comment">//Max代表男女双方竞赛优势的总和的最大值</span><br><span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;   <span class="hljs-comment">//sum为临时求和</span><br><span class="hljs-type">int</span> data[<span class="hljs-number">21</span>][<span class="hljs-number">21</span>];   <span class="hljs-comment">//data[i][]用于存放男运动员 i 配对后的双方竞赛优势</span><br><span class="hljs-type">int</span> maxSum[<span class="hljs-number">21</span>];   <span class="hljs-comment">//记录每个男生匹配后可达到的最大双方竞赛优势</span><br><span class="hljs-type">int</span> book[<span class="hljs-number">21</span>];   <span class="hljs-comment">//用于标记女运动员是否已匹配：book[0]未匹配；book[1]匹配</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t&gt;=n)   <span class="hljs-comment">//t到达n之后，代表全部标记访问了,得到了最大值</span><br>    &#123;<br>        Max=<span class="hljs-built_in">max</span>(Max,sum);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-type">int</span> ctn=<span class="hljs-number">0</span>;   <br><span class="hljs-comment">//剪枝函数:之前t个已匹配好的男女运动员的sum与之后的 t-&gt;n-1 个男匹配女的最大值加起来与已经得到的Max比较，若前者&lt;=Max，剪枝</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=t;i&lt;n;i++)   <span class="hljs-comment">//求t及t之后男生匹配女生的最大值的和</span><br>        ctn+=maxSum[i];<br><span class="hljs-comment">//若从第t组-&gt;第n组，当前搜索sum加上假设匹配后的最大值cxn，仍然小于Max ，就需要剪枝了，则Max为已经求得的最大值</span><br>    <span class="hljs-keyword">if</span>(sum+ctn&lt;Max)   <br>        <span class="hljs-keyword">return</span> ;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)   <span class="hljs-comment">//若cxn&gt;=Max，要探索子树。从第t个男生开始匹配，找未匹配的女生</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(!book[i])   <span class="hljs-comment">//第 i 个女生未匹配</span><br>        &#123;<br>            book[i]=<span class="hljs-number">1</span>;   <span class="hljs-comment">//第 t 个男生匹配女生i</span><br>            sum+=data[t][i];   <span class="hljs-comment">//加上男生t与女生i的男女双方竞赛优势</span><br>            <span class="hljs-built_in">dfs</span>(t+<span class="hljs-number">1</span>);   <span class="hljs-comment">//为第i+1个男生匹配</span><br>            book[i]=<span class="hljs-number">0</span>;   <span class="hljs-comment">//若第 t 个男生匹配女生i得到的sum不大于Max，则回溯</span><br>            sum-=data[t][i];<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)   <span class="hljs-comment">//输入男运动员的竞赛优势</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>            cin&gt;&gt;boy[i][j];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)   <span class="hljs-comment">//输入女运动员的竞赛优势</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>            cin&gt;&gt;girl[i][j];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>        &#123;<br>        <span class="hljs-comment">//对每个男生都求男女双方竞赛优势，则能得到i*j种结果（涵盖了P[i][j]*Q[j][i]与Q[i][j]*P[j][i]）</span><br>            data[i][j]=boy[i][j]*girl[j][i];   <br>            maxSum[i]=<span class="hljs-built_in">max</span>(maxSum[i],data[i][j]);   <span class="hljs-comment">//记录每个男生匹配后可达到的最大双方竞赛优势，用于后面的剪枝</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>    cout&lt;&lt;Max&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230104104042126.png" alt="image-20230104104042126"></p>
<h3 id="5-时间复杂度分析-3"><a href="#5-时间复杂度分析-3" class="headerlink" title="5.时间复杂度分析"></a>5.时间复杂度分析</h3><p>考虑最坏情况，每个节点都需要搜索，对于非叶子节点，其需要时间为$O(n)$，对于叶子节点，其所需时间为$O(1)$，故所需时间为$T=n<em>(n+n</em>(n-1)+…+n!)+n!=O(n*n!)$</p>
<h1 id="5-5-无分隔符字典问题"><a href="#5-5-无分隔符字典问题" class="headerlink" title="5-5 无分隔符字典问题"></a>5-5 无分隔符字典问题</h1><p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230103214343137.png" alt="image-20230103214343137" style="zoom:67%;"></p>
<h3 id="1-解空间和解结构-4"><a href="#1-解空间和解结构-4" class="headerlink" title="1. 解空间和解结构"></a>1. 解空间和解结构</h3><p>由S为$L_k$子集可知n个符号，长度为k的无分隔符字典问题的解空间为长度为$n^k$的向量，其中向量每一项为0或1，表示$L_k$中某一项是否在S中，解结构为子集树</p>
<h3 id="2-剪枝策略-4"><a href="#2-剪枝策略-4" class="headerlink" title="2. 剪枝策略"></a>2. 剪枝策略</h3><p>首先将$L_k$中所有字字符串放入数组L中，考虑是否放入下标为i的字符串：</p>
<p>约束函数：若该字符串与当前S集合中的任意字符串按照题目所给方式进行拼接，结果均不在S集合中，且不为该字符串本身，则考虑将其放入，搜索其左子树，否则剪去该节点的左子树</p>
<p>限界函数：考虑不放入该字符串，若将i+1~$n^k$的字符串均放入，若n^k^-i+S.size&lt;best，则无需搜索其右子树，剪去该节点的右子树</p>
<h3 id="3-示例-4"><a href="#3-示例-4" class="headerlink" title="3. 示例"></a>3. 示例</h3><p>假设$\sum=(a,b),L_k=\{aa,ab,ba,bb\}$,则$L_k$的一个最大无分隔符字典为$\{aa,bb\}$</p>
<p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230104102358652.png" alt="image-20230104102358652"></p>
<h3 id="4-代码-4"><a href="#4-代码-4" class="headerlink" title="4. 代码"></a>4. 代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> *ak;<br><span class="hljs-type">int</span> lk;<br><span class="hljs-type">int</span> n, k;<br><span class="hljs-type">int</span> best = <span class="hljs-number">0</span>; <span class="hljs-comment">//最大无分隔符字典元素个数</span><br><br>vector&lt;<span class="hljs-type">int</span>&gt; L;  <span class="hljs-comment">//将所有的长度为k的数字字符串存到集合L中</span><br>set&lt;<span class="hljs-type">int</span>&gt; S;  <span class="hljs-comment">//当前字典中的字符串存储在集合s中</span><br><br><br><span class="hljs-comment">//将下标为L[]中下标为i的字符串存入集合s</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>    S.<span class="hljs-built_in">insert</span>(L[i]);<br>&#125;<br><br><span class="hljs-comment">//将下标为L[]中下标为i的字符串存入集合s</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">erase</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>    S.<span class="hljs-built_in">erase</span>(L[i]);<br>&#125;<br><br><span class="hljs-comment">//将ak[]中起点为i，长度为k数字串转换为十进制数字</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">digi</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;k; j++)<br>    &#123;<br>        x *= <span class="hljs-number">10</span>;<br>        x += ak[j];<br>    &#125;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><br><span class="hljs-comment">//判断字符串a和第b个字符串是否互不为前缀</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">pref</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> bb =b;<span class="hljs-comment">//这里用bb只是因为原代码不太对,我直接改了</span><br>    <span class="hljs-type">int</span> x = a;<br>    <span class="hljs-type">int</span> y = bb/<span class="hljs-number">10</span>;<span class="hljs-comment">//去掉最后一位，得到高k-1位(因为验证的时候这位是肯定要剔除的</span><br>    <span class="hljs-comment">//按理说x也要剔除最高位，但是后面的循环不会碰到最高位，所以这里没剔除了</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;k<span class="hljs-number">-1</span>; i++) <span class="hljs-comment">//ak[0, k-2]存放x的低k-1位，ak[k-1, k-1 + (k-2)]存放y</span><br>    &#123;<br>        ak[k-i<span class="hljs-number">-2</span>] = x % <span class="hljs-number">10</span>;<br>        x /= <span class="hljs-number">10</span>;<br>        ak[<span class="hljs-number">2</span>*k-i<span class="hljs-number">-3</span>] = y % <span class="hljs-number">10</span>;<br>        y /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;k<span class="hljs-number">-1</span>; i++) <span class="hljs-comment">//相当于依次判断a2a3..akb1, a3a4..b1b2, akb1..bk-1是否已存在于S中，本程序中下标从0开始</span><br>        <span class="hljs-keyword">if</span>(S.<span class="hljs-built_in">count</span>(<span class="hljs-built_in">digi</span>(i)) &gt; <span class="hljs-number">0</span>||<span class="hljs-built_in">digi</span>(i)==bb)  <span class="hljs-comment">//如果已存在于S中</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    x = bb;<br>    y = a/<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;k<span class="hljs-number">-1</span>; i++)<span class="hljs-comment">//先放b再放a</span><br>    &#123;<br>        ak[k-i<span class="hljs-number">-2</span>] = x % <span class="hljs-number">10</span>;<br>        x /= <span class="hljs-number">10</span>;<br>        ak[<span class="hljs-number">2</span>*k-i<span class="hljs-number">-3</span>] = y % <span class="hljs-number">10</span>;<br>        y /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;k<span class="hljs-number">-1</span>; i++)<br>        <span class="hljs-keyword">if</span>(S.<span class="hljs-built_in">count</span>(<span class="hljs-built_in">digi</span>(i)) &gt; <span class="hljs-number">0</span>||<span class="hljs-built_in">digi</span>(i)==bb)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">//判断当前下标为b的字符串是否可以加入字典</span><br><span class="hljs-comment">//将字符串a1a2..ak看作k位十进制数</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">oka</span><span class="hljs-params">(<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> bb = L[b];<br>    set&lt;<span class="hljs-type">int</span>&gt;::iterator it;  <span class="hljs-comment">//定义迭代器</span><br>    it = S.<span class="hljs-built_in">begin</span>();<br>    <span class="hljs-keyword">while</span>(it != S.<span class="hljs-built_in">end</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> a = *it;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">pref</span>(a, bb)) <span class="hljs-comment">//如果a,b其中一个是另一个的前缀</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        it++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//得到总元素个数为n，长度为m的全排列</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Perm</span><span class="hljs-params">(<span class="hljs-type">int</span> list[], <span class="hljs-type">int</span> dep, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(dep&gt;m)<br>    &#123;<br>        <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=m; i++)<br>            x = x*<span class="hljs-number">10</span> + list[i];   <span class="hljs-comment">//转换为十进制数字</span><br>        L.<span class="hljs-built_in">push_back</span>(x);  <span class="hljs-comment">//将所有的数字字符串存到集合L中</span><br><br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>        &#123;<br>            <span class="hljs-built_in">swap</span>(list[dep], list[j]);<br>            <span class="hljs-built_in">Perm</span>(list, dep+<span class="hljs-number">1</span>, m,  n);<br>            <span class="hljs-built_in">swap</span>(list[dep], list[j]);<br>        &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-type">int</span> dep)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(dep &gt;= lk)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(S.<span class="hljs-built_in">size</span>() &gt; best)<br>            best = S.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">oka</span>(dep))<br>    &#123;<br>        <span class="hljs-built_in">insert</span>(dep);<br>        <span class="hljs-built_in">backtrack</span>(dep+<span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">erase</span>(dep);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(lk-dep+S.<span class="hljs-built_in">size</span>()&gt;best)<br>    <span class="hljs-built_in">backtrack</span>(dep+<span class="hljs-number">1</span>);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">ifstream <span class="hljs-title">fin</span><span class="hljs-params">(<span class="hljs-string">&quot;input.txt&quot;</span>)</span></span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;输入正整数n：&quot;</span>;<br>    fin &gt;&gt; n; cout &lt;&lt; n;<br>    cout &lt;&lt; <span class="hljs-string">&quot;\n输入正整数k：&quot;</span>;<br>    fin &gt;&gt; k; cout &lt;&lt; k;<br>    ak = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">2</span>*k];<br>    lk = n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;k; i++) <span class="hljs-comment">//k个字符中，每一个字符都有n种选择，n^k表示所有由k个字符组成的字符串种数</span><br>        lk *= n;<br>    lk--;<br>    <span class="hljs-type">int</span> *x = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n+<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)<br>        x[i] = i;<br>    <span class="hljs-built_in">Perm</span>(x, <span class="hljs-number">1</span>, k, n); <span class="hljs-comment">//将长度为k的全排列存入集合L中</span><br>    <span class="hljs-built_in">backtrack</span>(<span class="hljs-number">0</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;\n最大无分隔符字典元素个数为：&quot;</span> &lt;&lt; best;<br><br>    cout &lt;&lt; endl;<br>    cout &lt;&lt; endl;<br>    fin.<span class="hljs-built_in">close</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230104103946623.png" alt="image-20230104103946623"></p>
<h3 id="5-时间复杂度"><a href="#5-时间复杂度" class="headerlink" title="5. 时间复杂度"></a>5. 时间复杂度</h3><p>考虑最坏情况，对于n个字符，长度为k的问题，对于每个非叶子节点的左子节点，搜索需要耗费时间为$O(n^k<em>k)$，对于右子节点搜索需要的时间为$O(1)$，对于叶节点需要时间$O(1)$，故耗费的时间$T=O(2^{n^k-1}</em>n^k*k)$</p>
<h1 id="5-6-无合集问题"><a href="#5-6-无合集问题" class="headerlink" title="5-6 无合集问题"></a>5-6 无合集问题</h1><p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230104103710037.png" alt="image-20230104103710037" style="zoom:67%;"></p>
<p>大概的思路是从1开始每个数都尝试放入n个子集的每个子集，然后用题目给的条件x+y不属于S进行剪枝</p>
<h3 id="1-解空间和解结构-5"><a href="#1-解空间和解结构-5" class="headerlink" title="1. 解空间和解结构"></a>1. 解空间和解结构</h3><p>从1开始尝试放入每个子集中，对于子集为n的无合集问题，其解空间为长度为k的向量，向量的每一项为1~n，表示对应下标的数分配到的子集，其中k为本题所求，以n=3为例，解结构如下：</p>
<p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230104111844462.png" alt="image-20230104111844462" style="zoom:50%;"></p>
<h3 id="2-剪枝策略-5"><a href="#2-剪枝策略-5" class="headerlink" title="2. 剪枝策略"></a>2. 剪枝策略</h3><p>据题意，若数i无法分配到集合j(不满足和不在集合的条件)，则该节点的第j个分支无需遍历，剪去该分支</p>
<h3 id="3-示例-5"><a href="#3-示例-5" class="headerlink" title="3. 示例"></a>3. 示例</h3><p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230104112758039.png" alt="image-20230104112758039" style="zoom:67%;"></p>
<h3 id="4-代码-5"><a href="#4-代码-5" class="headerlink" title="4. 代码"></a>4. 代码</h3><p>定义存储当前解的数组a[N][N],其中a[n][0]表示第n个子集的元素个数a[n][1]到a[n][a[n][0]]为这个子集的所有元素。定义n。设置初始的结果ans为1(最后要减1，所以初始值其实是0)，定义最优值为best，定义最优解为e[N][N]，其中的结构和a[N][N]一样,以及定义判定数组h[N][N]，h[i][j]表示第i个子集中是否有j这个元素。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>;<br><br><span class="hljs-type">int</span> a[N][N], n, ans = <span class="hljs-number">1</span>, best, e[N][N];<br><span class="hljs-type">bool</span> h[N][N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> level)</span></span>&#123;                        <span class="hljs-comment">//判断当前ans中的数是否能插入第level个子集</span><br>    <span class="hljs-keyword">if</span>(level == n)&#123;                         <span class="hljs-comment">//n个子集的下标是0到n-1,所以当level等于n时表示当前ans不能插入所有子集</span><br>        <span class="hljs-keyword">if</span>(ans &lt;= best) <span class="hljs-keyword">return</span>;             <span class="hljs-comment">//如果当前ans不如当前最优值best，就返回</span><br>        best = ans;                         <span class="hljs-comment">//如果比最优值好，更新最优值和最优解</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= a[i][<span class="hljs-number">0</span>]; j ++)<br>                e[i][j] = a[i][j];<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;                                   <span class="hljs-comment">//判断ans能否插入第level个子集</span><br>        <span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;           <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= a[level][<span class="hljs-number">0</span>]; i ++)&#123;<span class="hljs-comment">//遍历子集</span><br>            <span class="hljs-comment">//如果ans减当前元素在子集中且这个元素不是它本身,flag就为false,表示ans不能插入这个子集</span><br>            <span class="hljs-keyword">if</span>(h[level][ans - a[level][i]] &amp;&amp; ans - a[level][i] != a[level][i]) flag = <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!flag) <span class="hljs-built_in">dfs</span>(level + <span class="hljs-number">1</span>);           <span class="hljs-comment">//不能插入，判断ans能不能插入第level+1个子集  </span><br>        <span class="hljs-keyword">else</span>&#123;                               <span class="hljs-comment">//可以插入，分两种情况，一种是插入，一种是不插入此子集</span><br>            <span class="hljs-comment">//插入的情况</span><br>            a[level][++ a[level][<span class="hljs-number">0</span>]] = ans; <span class="hljs-comment">//第i个子集个数加一，把元素记入子集</span><br>            h[level][ans ++] = <span class="hljs-literal">true</span>;        <span class="hljs-comment">//把此元素标记为在此子集中</span><br>            <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);                         <span class="hljs-comment">//判断下一个数是否能插入第0个子集</span><br>            <span class="hljs-comment">//回溯到不插入的情况，把子集个数减1，再把当前元素标记为不在此子集中</span><br>            -- a[level][<span class="hljs-number">0</span>];                 <br>            h[level][-- ans] = <span class="hljs-literal">false</span>;<br>            <span class="hljs-built_in">dfs</span>(level + <span class="hljs-number">1</span>);                 <span class="hljs-comment">//判断这个数是否能插入下一个子集</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>    cout &lt;&lt; --best &lt;&lt; endl;                 <span class="hljs-comment">//记录的是最优值加一，这里减去一并输出</span><br>     <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= e[i][<span class="hljs-number">0</span>]; j ++)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, e[i][j]);     <span class="hljs-comment">//输出最优解</span><br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>参考：<a href="https://www.acwing.com/blog/content/4777/">无和集问题 - AcWing</a></p>
<h3 id="5-时间复杂度-1"><a href="#5-时间复杂度-1" class="headerlink" title="5. 时间复杂度"></a>5. 时间复杂度</h3><p>考虑最坏情况，对于非叶子节点，假设其位于第i层，则时间消耗为$O(i)$，对于非叶子节点，其时间消耗为$O(1)$,本题时间消耗还与树的层数有关，而层数又是要求的。。。，需要一些推导来得到一个上界吧~</p>
<h1 id="5-7-n色方柱问题"><a href="#5-7-n色方柱问题" class="headerlink" title="5-7 n色方柱问题"></a>5-7 n色方柱问题</h1><p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230104113608782.png" alt="image-20230104113608782" style="zoom:67%;"></p>
<p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230104113717884.png" alt="image-20230104113717884" style="zoom:67%;"></p>
<p>为了提高效率，用图论的知识简化了题目（我没怎么看懂为啥这样简化的），谢谢有被恶心到</p>
<p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230108094031142.png" alt="image-20230108094031142"></p>
<p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230108094127364.png" alt="image-20230108094127364"></p>
<p>有点难懂，我觉得不会考。。。，理解一下代码吧</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>input.txt:</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">4</span><br><span class="hljs-attribute">RGBY</span><br><span class="hljs-attribute">0</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">3</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">2</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">1</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX = <span class="hljs-number">50</span>;<br><span class="hljs-type">int</span> board[MAX][<span class="hljs-number">6</span>];  <span class="hljs-comment">//存储n个立方体各面的颜色</span><br><span class="hljs-type">int</span> solu[MAX][<span class="hljs-number">6</span>];   <span class="hljs-comment">//存储解</span><br><span class="hljs-type">int</span> n;  <span class="hljs-comment">//立方体个数、颜色种数</span><br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;  <span class="hljs-comment">//解的个数</span><br><span class="hljs-type">int</span> used[MAX];<br><span class="hljs-type">char</span> color[MAX];<br><br><span class="hljs-comment">//找到一个解后，输出</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">out</span><span class="hljs-params">(<span class="hljs-type">int</span> edge[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i, j, k, a, b, c, d;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">2</span>; i++) <span class="hljs-comment">//2个子图</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;n; j++)<br>            used[j] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">do</span>&#123;<br>            j = <span class="hljs-number">0</span>;<br>            d = c = <span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">while</span>(j&lt;n &amp;&amp; used[j]&gt;<span class="hljs-number">0</span>) <span class="hljs-comment">//找下一条未用的边</span><br>                j++;<br>            <span class="hljs-keyword">if</span>(j &lt; n)<br>                <span class="hljs-keyword">do</span>&#123;<br>                    a = board[j][edge[i*n+j]*<span class="hljs-number">2</span>];<br>                    b = board[j][edge[i*n+j]*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>];<br>                    <span class="hljs-keyword">if</span>(b == d)  <span class="hljs-comment">//如果上一条边的终点与b相同，说明b为始点，交换，保证a为始点</span><br>                        <span class="hljs-built_in">swap</span>(a, b);  <span class="hljs-comment">//保证有向边的始点对应于前面和左面，终点对应于背面和右面</span><br>                    solu[j][i*<span class="hljs-number">2</span>] = a;<br>                    solu[j][i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] = b;<br>                    used[j] = <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">if</span>(c&lt;<span class="hljs-number">0</span>)  <span class="hljs-comment">//开始顶点</span><br>                        c = a;<br>                    d = b;<br>                    <span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>; k&lt;n; k++)  <span class="hljs-comment">//找下一个立方体</span><br>                        <span class="hljs-keyword">if</span>(used[k]==<span class="hljs-number">0</span> &amp;&amp; (board[k][edge[i*n+k]*<span class="hljs-number">2</span>]==b || board[k][edge[i*n+k]*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>]==b))<br>                            j = k;<br>                &#125;<span class="hljs-keyword">while</span>(b != c);  <span class="hljs-comment">//找了一圈，回到起点</span><br>        &#125;<span class="hljs-keyword">while</span>(j&lt;n);  <span class="hljs-comment">//所有立方体都找遍</span><br>    &#125;<br>    <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;n; j++) <span class="hljs-comment">//立方体的顶面和底面的颜色</span><br>    &#123;<br>        k = <span class="hljs-number">3</span> - edge[j] - edge[j+n];<br>        a = board[j][k*<span class="hljs-number">2</span>];<br>        b = board[j][k*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>];<br>        solu[j][<span class="hljs-number">4</span>] = a;<br>        solu[j][<span class="hljs-number">5</span>] = b;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">6</span>; j++)<br>            cout &lt;&lt; color[solu[i][j]] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        cout &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">search</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i, t, cube;<br>    <span class="hljs-type">bool</span> ok, newg, over;<br>    <span class="hljs-type">int</span> *vert = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];  <span class="hljs-comment">//记录子图中每个顶点的度，应均为2</span><br>    <span class="hljs-type">int</span> *edge = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n*<span class="hljs-number">2</span>];  <span class="hljs-comment">//记录每个立方体中边被选用的条数，每个立方体只有3条边，有两个子图要选用</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;n; i++)<br>        vert[i] = <span class="hljs-number">0</span>;<br>    t = <span class="hljs-number">-1</span>;<br>    newg = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">while</span>(t &gt; <span class="hljs-number">-2</span>)<br>    &#123;<br>        t++;<br>        cube = t % n;  <span class="hljs-comment">//每个立方体找2次，得到真实的立方体编号，也是子图中边的编号</span><br>        <span class="hljs-keyword">if</span>(newg)  <span class="hljs-comment">//如果没有边被选入子图</span><br>            edge[t] = <span class="hljs-number">-1</span>;<br>        over = <span class="hljs-literal">false</span>;  <span class="hljs-comment">//是否结束，即两个子图构建完成</span><br>        ok = <span class="hljs-literal">false</span>;    <span class="hljs-comment">//标记边是否已用过，两个子图不应有公共边</span><br>        <span class="hljs-keyword">while</span>(!ok &amp;&amp; !over)<br>        &#123;<br>            edge[t]++;  <span class="hljs-comment">//边被选用加入子图，使用次数增加</span><br>            <span class="hljs-keyword">if</span>(edge[t]&gt;<span class="hljs-number">2</span>)  <span class="hljs-comment">//在立方体每对相对面的顶点连一条边，每个立方体只有3条边</span><br>                over = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">else</span><br>                ok = (t&lt;n || edge[t]!=edge[cube]);  <span class="hljs-comment">//是否已用过</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(!over)<br>        &#123;          <span class="hljs-comment">//检测边的两个顶点的度</span><br>            <span class="hljs-keyword">if</span>(++vert[board[cube][edge[t]*<span class="hljs-number">2</span>]] &gt; <span class="hljs-number">2</span>+t/<span class="hljs-number">2</span>*<span class="hljs-number">2</span>) <span class="hljs-comment">//如果是第一个子图，顶点度不能超过2</span><br>                ok = <span class="hljs-literal">false</span>;              <span class="hljs-comment">//如果是第二个子图，加上第一个子图，顶点度不能超过4</span><br>            <span class="hljs-keyword">if</span>(++vert[board[cube][edge[t]*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>]] &gt; <span class="hljs-number">2</span>+t/<span class="hljs-number">2</span>*<span class="hljs-number">2</span>)<br>                ok = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span>(t%n == n<span class="hljs-number">-1</span> &amp;&amp; ok)  <span class="hljs-comment">//如果一个或两个子图已构建完成</span><br>                <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;n; i++)<br>                    <span class="hljs-keyword">if</span>(vert[i] &gt; <span class="hljs-number">2</span>+t/n*<span class="hljs-number">2</span>)<br>                        ok = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span>(ok)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(t == n*<span class="hljs-number">2</span><span class="hljs-number">-1</span>) <span class="hljs-comment">//找到解</span><br>                &#123;<br>                    ans++;<br>                    <span class="hljs-built_in">out</span>(edge);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                    newg = <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-comment">//取下一条边</span><br>            &#123;<br>                --vert[board[cube][edge[t]*<span class="hljs-number">2</span>]];  <span class="hljs-comment">//边的两个顶点</span><br>                --vert[board[cube][edge[t]*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>]];<br>                t--;<br>                newg = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-comment">//回溯</span><br>        &#123;<br>            t--;<br>            <span class="hljs-keyword">if</span>(t &gt; <span class="hljs-number">-1</span>)<br>            &#123;<br>                cube = t % n;<br>                --vert[board[cube][edge[t]*<span class="hljs-number">2</span>]];<br>                --vert[board[cube][edge[t]*<span class="hljs-number">2</span>]];<br>            &#125;<br>            t--;<br>            newg = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">ifstream <span class="hljs-title">fin</span><span class="hljs-params">(<span class="hljs-string">&quot;input.txt&quot;</span>)</span></span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;输入立方体个数：&quot;</span>;<br>    fin &gt;&gt; n;  cout &lt;&lt; n;<br>    cout &lt;&lt; <span class="hljs-string">&quot;\n输入颜色：&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)<br>    &#123;<br>        fin &gt;&gt; color[i];<br>        cout &lt;&lt; color[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;\n输入立方体各面颜色：\n&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">6</span>; j++)<br>        &#123;<br>            fin &gt;&gt; board[i][j];<br>            cout &lt;&lt; board[i][j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;\n立方体叠置方案为：\n&quot;</span>;<br>    <span class="hljs-built_in">search</span>();<br>    <span class="hljs-keyword">if</span>(ans == <span class="hljs-number">0</span>)<br>        cout &lt;&lt; <span class="hljs-string">&quot;No Solution！\n&quot;</span>;<br>    cout &lt;&lt; end;<br>    fin.<span class="hljs-built_in">close</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230104115831309.png" alt="image-20230104115831309"></p>
<h1 id="5-8-整数变换问题"><a href="#5-8-整数变换问题" class="headerlink" title="5-8 整数变换问题"></a>5-8 整数变换问题</h1><p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230105102915399.png" alt="image-20230105102915399" style="zoom:67%;"></p>
<p>这道题是一定能找到的，有点类似于3n+1?，要不然会要求输出<code>no solution</code>的，而且我们也不能简单地通过n和m的大小关系来得到此时需要做的操作。题目的思路大概就是DFS暴力搜索，左子树f变换，右子树g变换，主要问题在于需要限制搜索的层数，因为有些分支是得不到解的</p>
<h3 id="1-解空间和解结构-6"><a href="#1-解空间和解结构-6" class="headerlink" title="1. 解空间和解结构"></a>1. 解空间和解结构</h3><p>解空间是一个长度为k的向量，向量的每一项是f或者g，k的大小与输入有关，解结构如下：左子树是进行f变换，右子树是进行g变换。</p>
<p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230105111327567.png" alt="image-20230105111327567" style="zoom:67%;"></p>
<h3 id="2-剪枝策略-6"><a href="#2-剪枝策略-6" class="headerlink" title="2. 剪枝策略"></a>2. 剪枝策略</h3><p>虽然看到一些博客根据n和m的大小剪枝，但是实际上在代码中他们没有这样做，而且这种做法应该是不对的。。。</p>
<p>我觉得这里更加类似于DFS，代码也没体现出什么剪枝的策略，这里的搜索过程有点像是一层一层往下搜索，k控制着层数</p>
<h3 id="3-示例-6"><a href="#3-示例-6" class="headerlink" title="3. 示例"></a>3. 示例</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-number">7</span> <span class="hljs-number">4</span><br><span class="hljs-number">3</span><br>gfg<br></code></pre></td></tr></table></figure>
<p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230105113429567.png" alt="image-20230105113429567" style="zoom:50%;"></p>
<h3 id="4-代码-6"><a href="#4-代码-6" class="headerlink" title="4. 代码"></a>4. 代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 25</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 0x3f3f3f3f</span><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-comment">//定义k来表示搜索树的深度</span><br><span class="hljs-type">int</span> k = <span class="hljs-number">1</span>;<br><span class="hljs-comment">//定义一个队列来存放各类操作</span><br>queue&lt;<span class="hljs-type">char</span>&gt; q;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//防止死循环，保证最多只能访问到下一层</span><br>    <span class="hljs-keyword">if</span>(x &gt; k)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">//找到返回true</span><br>    <span class="hljs-keyword">if</span>(n == m)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">//这里必须用一个temp做临时变量</span><br>    <span class="hljs-comment">//若不用temp做临时变量，回溯的时候n的值发生变化</span><br>    <span class="hljs-comment">//导致结果异常</span><br>    <span class="hljs-type">int</span> temp = n;<br>    <span class="hljs-comment">//左右都做一遍，看看能否到达目的</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>)<br>            temp = n * <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">else</span><br>            temp = n / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">DFS</span>(x+<span class="hljs-number">1</span>, temp))<br>        &#123;<br>            <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>)<br>                q.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;f&#x27;</span>);<br>            <span class="hljs-keyword">else</span><br>                q.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;g&#x27;</span>);<br>            <span class="hljs-comment">//这里必须要return true </span><br>            <span class="hljs-comment">//因为只需要找到第一个满足条件的那条路径</span><br>            <span class="hljs-comment">//回溯返回的时候把路径上的运算加入队列即可。</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//如果没找到返回false,k++</span><br>    <span class="hljs-comment">//可往更深一层探索</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-comment">//找不到，往更深一层探索！</span><br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">DFS</span>(<span class="hljs-number">0</span>, n))<br>        k++;<br>    cout &lt;&lt; k &lt;&lt; endl;<br>    <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        cout &lt;&lt; q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="5-时间复杂度-2"><a href="#5-时间复杂度-2" class="headerlink" title="5. 时间复杂度"></a>5. 时间复杂度</h3><p>树的层数和输入的数关系比较大，不太好分析。。。，如果树的层数可以得到一个上界的话，可以推导一下最坏情况</p>
<p>参考：<a href="https://blog.csdn.net/Small___ming/article/details/103218990">https://blog.csdn.net/Small___ming/article/details/103218990</a></p>
<h1 id="5-9-拉丁矩阵问题"><a href="#5-9-拉丁矩阵问题" class="headerlink" title="5-9 拉丁矩阵问题"></a>5-9 拉丁矩阵问题</h1><p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230105113714306.png" alt="image-20230105113714306" style="zoom:67%;"></p>
<p>可以从左到右从上到下来填充矩阵的每个“格子”，即树的每一层就是考虑每个格子里放什么，这将得到一棵比较大的树，剪枝的策略就是题目所要求的，每行每列都没有相同的形状，若在该格子里放入第i种宝石能满足要求，则将其放入，否则剪去该条分支，对于检查每行每列是否有相同形状，可以采用两个矩阵来记录，这样时间效率会高点</p>
<h3 id="1-解空间和解结构-7"><a href="#1-解空间和解结构-7" class="headerlink" title="1. 解空间和解结构"></a>1. 解空间和解结构</h3><p>本题是求可行解的个数，解空间是一个n行m列的矩阵，也可以理解为n*m长度的向量，其中向量的每个元素为1~n，对应的解结构为排列树</p>
<h3 id="2-剪枝策略-7"><a href="#2-剪枝策略-7" class="headerlink" title="2. 剪枝策略"></a>2. 剪枝策略</h3><p>维护矩阵row[N][N]，其中row[i][j]=1表示第i行已经使用了形状j，矩阵col[N][N]，其中col[j][i]=1表示第i列使用了形状j，考虑在为矩阵(x,y)位置上元素选择宝石时，若选择宝石i，则需要保证<code>row[x][i]==0&amp;&amp;col[i][y]==0</code>，即不与x行和y列上已有的形状冲突，若不满足该条件，则可剪去该子树</p>
<h3 id="3-示例-7"><a href="#3-示例-7" class="headerlink" title="3. 示例"></a>3. 示例</h3><p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230105194002403.png" alt="image-20230105194002403"></p>
<p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230105194603562.png" alt="image-20230105194603562" style="zoom:67%;"></p>
<h3 id="4-代码-7"><a href="#4-代码-7" class="headerlink" title="4. 代码"></a>4. 代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 10</span><br><span class="hljs-type">int</span> m,n;    <span class="hljs-comment">//分别为行、列</span><br><span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> a[N][N]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> row[N][N]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-comment">//row[i][j]=1表示第i行已经使用了形状j</span><br><span class="hljs-type">int</span> col[N][N]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-comment">//col[j][i]=1表示第i列已经使用了形状j</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-type">int</span> t)</span></span><br><span class="hljs-function"><span class="hljs-comment">//t表示正在填充的矩阵的一个小格子,格子范围为0~m*n-1</span></span><br><span class="hljs-function"><span class="hljs-comment">//如第一行就是0 1 2 3 4...</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i,j;<br>    <span class="hljs-type">int</span> x,y;    <span class="hljs-comment">//分别为行、列（坐标）</span><br>    <span class="hljs-keyword">if</span>(t==m*n)<span class="hljs-comment">//如果排完了,说明得到了一种可行解</span><br>    &#123;<br>        count++;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//否则继续排列</span><br>    x=t/n;      <span class="hljs-comment">//行坐标</span><br>    y=t%n;      <span class="hljs-comment">//列坐标</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-comment">//对每种形状都进行尝试</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(row[x][i]==<span class="hljs-number">0</span>&amp;&amp;col[i][y]==<span class="hljs-number">0</span>)<br>        &#123;<br>           row[x][i]=<span class="hljs-number">1</span>;<br>           col[i][y]=<span class="hljs-number">1</span>;<br>           a[x][y]=i;<br>           <span class="hljs-built_in">backtrack</span>(t+<span class="hljs-number">1</span>);<br>           row[x][i]=<span class="hljs-number">0</span>;<span class="hljs-comment">//回溯</span><br>           col[i][y]=<span class="hljs-number">0</span>;<br>           a[x][y]=<span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;m,&amp;n);<br>    <span class="hljs-built_in">backtrack</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;count=%d\n&quot;</span>,count);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="5-时间复杂度-3"><a href="#5-时间复杂度-3" class="headerlink" title="5. 时间复杂度"></a>5. 时间复杂度</h3><p>考虑最坏情况，对于叶子节点，其时间消耗为$O(1)$，对于非叶子节点其时间消耗为$O(n)$，对于n种宝石，排成n行m列的拉丁矩阵问题，时间消耗为$T=O(n^{mn})$</p>
<h1 id="5-10-排列宝石问题"><a href="#5-10-排列宝石问题" class="headerlink" title="5-10 排列宝石问题"></a>5-10 排列宝石问题</h1><p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230105114234838.png" alt="image-20230105114234838" style="zoom:67%;"></p>
<p>这道题是类似于5-9的(直接在5-9上面改的几行)，说一下思路吧：类似于对待不同宝石类型要求每行每列都不重复，引入数组<code>color_row</code>和数组<code>color_col</code>，其大致结构和含义与<code>row</code>和<code>col</code>类似，用于记录该行或者该列是否已经使用过该种颜色的宝石，还引入<code>used</code>数组用于满足题中的每种宝石n颗且不同色（避免一种宝石的一种颜色使用了多次），其中<code>used[i][j]=1</code>表示类型i的宝石的第j种颜色已用。</p>
<p>与5-9对比，排列树可选的分支大大增加了，不过剪去的分支也比较多，时间复杂度往上蹭</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 10</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n;    <span class="hljs-comment">//分别为行、列</span><br><span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> row[N][N]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-comment">//row[i][j]=1表示第i行已经使用了形状j</span><br><span class="hljs-type">int</span> col[N][N]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-comment">//col[j][i]=1表示第i列已经使用了形状j</span><br><span class="hljs-type">int</span> color_row[N][N]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> color_col[N][N]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> used[N][N]=&#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//used[i][j]=1表示类型i的第j种颜色已用</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-type">int</span> t)</span></span><br><span class="hljs-function"><span class="hljs-comment">//t表示正在填充的矩阵的一个小格子,格子范围为0~m*n-1</span></span><br><span class="hljs-function"><span class="hljs-comment">//如第一行就是0 1 2 3 4...</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i,j;<br>    <span class="hljs-type">int</span> x,y;    <span class="hljs-comment">//分别为行、列（坐标）</span><br>    <span class="hljs-keyword">if</span>(t==n*n)<span class="hljs-comment">//如果排完了,说明得到了一种可行解</span><br>    &#123;<br>        res++;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//否则继续排列</span><br>    x=t/n;      <span class="hljs-comment">//行坐标</span><br>    y=t%n;      <span class="hljs-comment">//列坐标</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-comment">//对每种形状都进行尝试</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<span class="hljs-comment">//j为颜色</span><br>        <span class="hljs-keyword">if</span>(!row[x][i]&amp;&amp;!col[i][y]&amp;&amp;!color_row[x][j]&amp;&amp;!color_col[j][y]&amp;&amp;!used[i][j])<br>        &#123;<br>           row[x][i]=<span class="hljs-number">1</span>;<br>           col[i][y]=<span class="hljs-number">1</span>;<br>           color_row[x][j]=<span class="hljs-number">1</span>;<br>           color_col[j][y]=<span class="hljs-number">1</span>;<br>           used[i][j]=<span class="hljs-number">1</span>;<br>           <span class="hljs-built_in">backtrack</span>(t+<span class="hljs-number">1</span>);<br>           row[x][i]=<span class="hljs-number">0</span>;<br>           col[i][y]=<span class="hljs-number">0</span>;<br>           color_row[x][j]=<span class="hljs-number">0</span>;<br>           color_col[j][y]=<span class="hljs-number">0</span>;<br>           used[i][j]=<span class="hljs-number">0</span>;<br>        &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-built_in">backtrack</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;res=%d\n&quot;</span>,res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="5-11-重复拉丁矩阵问题"><a href="#5-11-重复拉丁矩阵问题" class="headerlink" title="5-11 重复拉丁矩阵问题"></a>5-11 重复拉丁矩阵问题</h1><p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230105114335314.png" alt="image-20230105114335314" style="zoom: 80%;"></p>
<p>这题是类似于5-9的，我的代码一直没AC，参考了下答案的，思路是：第一行按照题意，由于对每行每种宝石数量的限制，且要求第一行最小字典序，所以是固定的，无需回溯，故从第二行开始进行搜索。答案遵照教材的排列树的写法，先初始化矩阵，然后再做swap操作，矩阵初始化情况如虚线上矩阵(示例为例)，在搜索的时候，只需要考虑每列宝石要求即可（因为初始化的原因，不需要考虑每行了），但是很奇怪的是，代码没有考虑第一列的情况了，即认为第一列也是固定的，但是我觉得不太对，比如虚线下面的一种也是可以的。</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><code class="hljs tap">省略第0行、第0列<br>1<span class="hljs-number"> 1 </span>2<span class="hljs-number"> 2 </span>3<span class="hljs-number"> 3 </span>3<br>1 &lt;1&gt;<span class="hljs-number"> 2 </span>2<span class="hljs-number"> 3 </span>3 3<br>2<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 2 </span>3<span class="hljs-number"> 3 </span>3<br>2<span class="hljs-number"> 1 </span>2<span class="hljs-number"> 1 </span>3<span class="hljs-number"> 3 </span>3<br>----------<span class="language-yaml"><span class="hljs-meta">---</span></span><br><span class="language-yaml"><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> </span><br><span class="language-yaml"><span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> </span><br><span class="language-yaml"><span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> </span><br><span class="language-yaml"><span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> </span><br></code></pre></td></tr></table></figure>
<p>input:</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">7</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX = <span class="hljs-number">50</span>;<br><span class="hljs-type">int</span> n, m, k;<br><span class="hljs-type">int</span> times[MAX];  <span class="hljs-comment">//每种宝石的重复次数</span><br><span class="hljs-type">int</span> id[MAX];  <span class="hljs-comment">//每个宝石的价值序号</span><br><span class="hljs-type">int</span> board[MAX][MAX];  <span class="hljs-comment">//宝石矩阵</span><br><br><span class="hljs-comment">//考察当前列宝石数是否多于应出现的次数</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ok</span><span class="hljs-params">(<span class="hljs-type">int</span> r, <span class="hljs-type">int</span> c, <span class="hljs-type">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> k = board[r][s];<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">if</span>(s &gt; c)<br>        <span class="hljs-keyword">for</span>(i=c; i&lt;s; i++)<br>            <span class="hljs-keyword">if</span>(board[r][i] == k) <span class="hljs-comment">//如果已经试过相同类型的宝石，这次就不再试了</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;r; i++)  <span class="hljs-comment">//考察当前列宝石数是否多于应出现的次数</span><br>        <span class="hljs-keyword">if</span>(board[i][c] == k)<br>            count++;<br>    <span class="hljs-keyword">if</span>(count &gt;= times[k]) <span class="hljs-comment">//times[k]表示种类为k的宝石应出现的次数</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-type">double</span> num = <span class="hljs-number">0</span>;  <span class="hljs-comment">//不同的宝石排列方案数</span><br><span class="hljs-comment">//从上到下，从左到右递归搜索，即先行后列</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-type">int</span> r, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=c; i&lt;=n; i++)  <span class="hljs-comment">//列</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">ok</span>(r, c, i))<br>        &#123;<br>            <span class="hljs-built_in">swap</span>(board[r][c], board[r][i]);<br>            <span class="hljs-keyword">if</span>(c == n)  <span class="hljs-comment">//如果列考察完毕</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(r == m) <span class="hljs-comment">//如果行考察完毕</span><br>                &#123;<br>                    num += <span class="hljs-number">1</span>;<br>                    <span class="hljs-comment">//cout &lt;&lt; num &lt;&lt; &quot; &quot;;</span><br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                    <span class="hljs-built_in">backtrack</span>(r+<span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">//考察下一行</span><br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-built_in">backtrack</span>(r, c+<span class="hljs-number">1</span>); <span class="hljs-comment">//考察下一列</span><br>            <span class="hljs-built_in">swap</span>(board[r][c], board[r][i]);<br>        &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">ifstream <span class="hljs-title">fin</span><span class="hljs-params">(<span class="hljs-string">&quot;input.txt&quot;</span>)</span></span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;\n输入行数m：&quot;</span>;<br>    fin &gt;&gt; m;  cout &lt;&lt; m;<br>    cout &lt;&lt; <span class="hljs-string">&quot;\n输入列数n：&quot;</span>;<br>    fin &gt;&gt; n;  cout &lt;&lt; n;<br>    cout &lt;&lt; <span class="hljs-string">&quot;\n输入宝石价值种数：&quot;</span>;<br>    fin &gt;&gt; k;  cout &lt;&lt; k &lt;&lt; endl;<br>    <span class="hljs-type">int</span> i, temp;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=k; i++)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;输入第&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;种宝石在每行每列出现的最多次数：&quot;</span>;<br>        fin &gt;&gt; times[i];<br>        cout &lt;&lt; times[i] &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br><br>        temp = times[i];<br>        <span class="hljs-keyword">while</span>(temp&gt;<span class="hljs-number">0</span>)<br>        &#123;<br>            id[t++] = i;<br>            temp--;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> j;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=m; i++)  <span class="hljs-comment">//初始化为单位矩阵</span><br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>; j&lt;=n; j++)<br>            board[i][j] = id[j];<br>    <span class="hljs-comment">//第一行已经排列好了,无需再改变了</span><br>    <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    由于初始化后的单位矩阵的第一列都是1，为使矩阵的第一列同时满足一下两个条件： </span><br><span class="hljs-comment">    同一种宝石数都不超过规定的数量，第1列从上到下的宝石按宝石的价值最小字典序从小到大排列 </span><br><span class="hljs-comment">    将第i行的第一个宝石与它同行的第i个宝石交换位置</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>; i&lt;=n; i++)<br>        <span class="hljs-built_in">swap</span>(board[i][<span class="hljs-number">1</span>],board[i][i]);<br>    <span class="hljs-built_in">backtrack</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;\n不同的宝石排列方案数为：&quot;</span> &lt;&lt; num;<br>    cout &lt;&lt; endl &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>下面是我的代码，在5-9基础上改的，输出的文件out.txt是所有的情况</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 10</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> m,n,k;    <span class="hljs-comment">//分别为行、列</span><br><span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> a[N][N]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> row[N][N]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-comment">//row[i][j]=1表示第i行已经使用了形状j</span><br><span class="hljs-type">int</span> col[N][N]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-comment">//col[j][i]=1表示第i列已经使用了形状j</span><br><span class="hljs-type">int</span> maxtime[N]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-type">int</span> t,ofstream&amp;out)</span></span><br><span class="hljs-function"><span class="hljs-comment">//t表示正在填充的矩阵的一个小格子,格子范围为0~m*n-1</span></span><br><span class="hljs-function"><span class="hljs-comment">//如第一行就是0 1 2 3 4...</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x,y;    <span class="hljs-comment">//分别为行、列（坐标）</span><br>    <span class="hljs-keyword">if</span>(t==m*n)<span class="hljs-comment">//如果排完了,说明得到了一种可行解</span><br>    &#123;<br>        res++;<br>        out&lt;&lt;<span class="hljs-string">&quot;---&quot;</span>&lt;&lt;res&lt;&lt;endl;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>            &#123;<br>                out&lt;&lt;a[i][j]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>            &#125;<br>            out&lt;&lt;endl;<br>        &#125;<br>        out&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//否则继续排列</span><br>    x=t/n;      <span class="hljs-comment">//行坐标</span><br>    y=t%n;      <span class="hljs-comment">//列坐标</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=k;i++)<span class="hljs-comment">//对每种形状都进行尝试</span><br>    &#123;<br>        <span class="hljs-type">bool</span> flag=<span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>&amp;&amp;y&gt;<span class="hljs-number">0</span>&amp;&amp;i&lt;a[x][y<span class="hljs-number">-1</span>]) flag=<span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span>(y==<span class="hljs-number">0</span>&amp;&amp;x&gt;<span class="hljs-number">0</span>&amp;&amp;i&lt;a[x<span class="hljs-number">-1</span>][y]) flag=<span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span>(flag&amp;&amp;row[x][i]&lt;maxtime[i]&amp;&amp;col[i][y]&lt;maxtime[i])<br>        &#123;<br>           <span class="hljs-comment">//cout&lt;&lt;maxtime[i]&lt;&lt;&quot;: &quot;&lt;&lt;row[x][i]&lt;&lt;&quot;,&quot;&lt;&lt;col[i][y]&lt;&lt;&quot;| &quot;&lt;&lt;res&lt;&lt;endl;</span><br>           row[x][i]++;<br>           col[i][y]++;<br>           a[x][y]=i;<br>           <span class="hljs-built_in">backtrack</span>(t+<span class="hljs-number">1</span>,out);<br>           row[x][i]--;<span class="hljs-comment">//回溯</span><br>           col[i][y]--;<br>           a[x][y]=<span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ofstream out;<br>    out.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;out.txt&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;m,&amp;n,&amp;k);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=k;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;maxtime[i]);<br>    <span class="hljs-built_in">backtrack</span>(<span class="hljs-number">0</span>,out);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;res=%d\n&quot;</span>,res);<br>    out.<span class="hljs-built_in">close</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="5-12-罗密欧与朱丽叶的迷宫问题"><a href="#5-12-罗密欧与朱丽叶的迷宫问题" class="headerlink" title="5-12 罗密欧与朱丽叶的迷宫问题"></a>5-12 罗密欧与朱丽叶的迷宫问题</h1><p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230105115004711.png" alt="image-20230105115004711"></p>
<p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230105114937912.png" alt="image-20230105114937912" style="zoom:67%;"></p>
<p>从罗密欧的位置开始，每次都可以走八个方向，用数字记录方向，若下一次走的方向与直接的不同则记转向次数加一，在考虑进入八个方向的下一位置前，需要考虑该位置是否越界，是否是封闭位置，是否已经走过，且是否走入后当前转向次数大于当前最优解此时，以此作为剪枝策略，当遍历完所有的位置后，若到达了朱丽叶的位置，则考虑更新当前最优解或者是增加最优解的次数</p>
<h3 id="1-解空间和解结构-8"><a href="#1-解空间和解结构-8" class="headerlink" title="1. 解空间和解结构"></a>1. 解空间和解结构</h3><p>对于n行m列，封闭房间数为k的迷宫，迷宫问题的解空间为1~n*m-k的全排列，表示某个房间第几次到达，解结构为排列树</p>
<h3 id="2-剪枝策略-8"><a href="#2-剪枝策略-8" class="headerlink" title="2. 剪枝策略"></a>2. 剪枝策略</h3><p>约束函数：在尝试走入下一位置前，检查该位置是否合法，即是否数组越界，是否为封闭房间，是否已经走过，若不合法，则剪去该子树</p>
<p>限界函数：维护变量curr_rotation表示当前转向次数，min_rotation表示当前最优解的转向次数，若在考虑下一位置时，到达该位置后的转向次数大于最优解的转向次数，则剪去该子树</p>
<h3 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h3><p>input:</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">4</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span><br>&#123;<br>	<span class="hljs-type">int</span> x, y;<br>&#125;;<br>Point luo;<br>Point ye;<br>Point pos;<br><br><span class="hljs-comment">//	定义八个方向:右,</span><br><span class="hljs-type">int</span> dx[<span class="hljs-number">8</span>] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span> &#125;; <span class="hljs-comment">//八个方向</span><br><span class="hljs-type">int</span> dy[<span class="hljs-number">8</span>] = &#123; <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span> &#125;;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, m, k;<br><span class="hljs-type">int</span> board[MAX][MAX];<br><span class="hljs-type">int</span> best[MAX][MAX];<br><span class="hljs-type">int</span> curr_rotation = <span class="hljs-number">0</span>;  <span class="hljs-comment">//转弯次数</span><br><span class="hljs-type">int</span> min_rotation = <span class="hljs-number">100000</span>;   <span class="hljs-comment">//最少转弯次数</span><br><span class="hljs-type">int</span> min_count = <span class="hljs-number">0</span>;  <span class="hljs-comment">//不同的最少转弯道路数</span><br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;<br><br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Point_check</span><span class="hljs-params">(Point pos)</span> </span>&#123;<br>	<span class="hljs-keyword">if</span> (pos.x &gt; <span class="hljs-number">0</span> &amp;&amp; pos.x &lt;= n &amp;&amp; pos.y &gt; <span class="hljs-number">0</span> &amp;&amp; pos.y &lt;= m &amp;&amp; board[pos.x][pos.y] == <span class="hljs-number">0</span>)<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>	<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">//	更新当前最少转弯情况下的路线</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">upgrade</span><span class="hljs-params">()</span> </span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>			best[i][j] = board[i][j];<br>	flag = <span class="hljs-literal">true</span>;<br>&#125;<br><br><br><br><span class="hljs-comment">//	回溯算法---&gt;形式参数表示的是traceBack的层数</span><br><span class="hljs-function"><span class="hljs-type">void</span>  <span class="hljs-title">traceBack</span><span class="hljs-params">(<span class="hljs-type">int</span> depth, Point pos, <span class="hljs-type">int</span> di)</span> </span>&#123;<br>	<span class="hljs-comment">/*</span><br><span class="hljs-comment">		回溯法的终止条件，</span><br><span class="hljs-comment">		当把所有的空房间都遍历一遍</span><br><span class="hljs-comment">		且当前到达的位置是朱丽叶的位置</span><br><span class="hljs-comment">		且当前转弯的次数少于等于历史的次数</span><br><span class="hljs-comment">	*/</span><br>	<span class="hljs-keyword">if</span> (depth == m * n - k &amp;&amp; pos.x == ye.x &amp;&amp; pos.y == ye.y &amp;&amp; curr_rotation &lt;= min_rotation) &#123;<br>		<span class="hljs-comment">/*</span><br><span class="hljs-comment">			如果当前的curr_count小于min_rotation更新min_rotation、min_count以及路径图</span><br><span class="hljs-comment">		*/</span><br>		<span class="hljs-keyword">if</span> (curr_rotation &lt; min_rotation) &#123;<span class="hljs-comment">//有更少的转向</span><br>			min_rotation = curr_rotation;<br>			min_count = <span class="hljs-number">1</span>;<span class="hljs-comment">//重新计数</span><br><br><br>			<span class="hljs-comment">//	更新路径图</span><br>			<span class="hljs-built_in">upgrade</span>();<br>		&#125;<br>		<span class="hljs-keyword">else</span> &#123;<br>			min_count++;<br>		&#125;<br>		<span class="hljs-keyword">return</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span> &#123;<br>		<span class="hljs-comment">//	剪枝策略-----当到达这个位置的时候curr_rotation已经大于min_rotation那么进行剪枝</span><br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br><br>			<span class="hljs-comment">//	通过走的方向，计算下一个位置</span><br>			Point next_pos;<br>			next_pos.x = pos.x + dx[i];<br>			next_pos.y = pos.y + dy[i];<br><br>			<span class="hljs-comment">//	每次走一步需要判断你下一个地点的位置是否合法</span><br>			<span class="hljs-keyword">if</span> (<span class="hljs-built_in">Point_check</span>(next_pos)) &#123;<br>				board[next_pos.x][next_pos.y] = depth + <span class="hljs-number">1</span>;<br><br>				<span class="hljs-keyword">if</span> (depth &gt; <span class="hljs-number">1</span> &amp;&amp; di != i)<br>					curr_rotation++;<br><br>				<span class="hljs-keyword">if</span> (curr_rotation &lt;= min_rotation)<br>					<span class="hljs-built_in">traceBack</span>(depth + <span class="hljs-number">1</span>, next_pos, i);<br><br>				<span class="hljs-comment">//	进行回溯</span><br>				board[next_pos.x][next_pos.y] = <span class="hljs-number">0</span>;<br>				<span class="hljs-keyword">if</span> (depth &gt; <span class="hljs-number">1</span> &amp;&amp; di != i)<br>					curr_rotation--;<br>			&#125;<br>		&#125;<br>	&#125;<br>&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>	<span class="hljs-comment">//	迷宫的初始化</span><br>	<span class="hljs-built_in">memset</span>(board, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(board));<br><br>	<span class="hljs-built_in">memset</span>(best,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(board));<br><br><br>	<span class="hljs-comment">//	文件的输入</span><br>	<span class="hljs-function">ifstream <span class="hljs-title">datain</span><span class="hljs-params">(<span class="hljs-string">&quot;input.txt&quot;</span>)</span></span>;<br><br>	cout &lt;&lt; <span class="hljs-string">&quot;输入迷宫的宽度：&quot;</span>; datain &gt;&gt; n; cout &lt;&lt; n&lt;&lt;endl;<br><br>	cout &lt;&lt; <span class="hljs-string">&quot;\n输入迷宫的长度：&quot;</span>; datain &gt;&gt; m; cout &lt;&lt; m &lt;&lt; endl;<br><br>	cout &lt;&lt; <span class="hljs-string">&quot;\n输入封闭房间个数：&quot;</span>; datain &gt;&gt; k; cout &lt;&lt; k &lt;&lt; endl;<br><br>	<span class="hljs-comment">//	封闭房间数据的输入</span><br>	Point forbidden_rooms;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>		datain &gt;&gt; forbidden_rooms.x &gt;&gt; forbidden_rooms.y;<br>		board[forbidden_rooms.x][forbidden_rooms.y] = <span class="hljs-number">-1</span>;<br>	&#125;<br><br>	<span class="hljs-comment">//	输入罗密欧和朱丽叶的位置信息</span><br>	datain &gt;&gt; luo.x &gt;&gt; luo.y;<br>	cout &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;罗密欧位置坐标：[&quot;</span> &lt;&lt; luo.x &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; luo.y &lt;&lt; <span class="hljs-string">&quot;]&quot;</span> &lt;&lt; endl;<br><br>	board[luo.x][luo.y] = <span class="hljs-number">1</span>;<span class="hljs-comment">//起始位置</span><br><br>	datain &gt;&gt; ye.x &gt;&gt; ye.y;<br>	cout &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;朱丽叶位置坐标：[&quot;</span> &lt;&lt; ye.x &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; ye.y &lt;&lt; <span class="hljs-string">&quot;]&quot;</span> &lt;&lt; endl;<br><br>	<span class="hljs-comment">//	回溯算法开始</span><br>	<span class="hljs-built_in">traceBack</span>(<span class="hljs-number">1</span>, luo, <span class="hljs-number">0</span>);<br><br><br>	<span class="hljs-comment">//	把结果输出到txt文件中</span><br>	<span class="hljs-function">ofstream <span class="hljs-title">dataout</span><span class="hljs-params">(<span class="hljs-string">&quot;output_data1.txt&quot;</span>, ios::trunc)</span></span>;<br><br>	<span class="hljs-keyword">if</span> (flag) &#123;<br>		cout &lt;&lt; <span class="hljs-string">&quot;\n最小转弯次数：&quot;</span> &lt;&lt; min_rotation &lt;&lt; endl;<br>		cout &lt;&lt; <span class="hljs-string">&quot;\n最小转弯次数的转弯道路数：&quot;</span> &lt;&lt; min_count &lt;&lt; endl;<br>		cout &lt;&lt; <span class="hljs-string">&quot;行走的路线图：&quot;</span> &lt;&lt; endl;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>			<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;<br>				cout &lt;&lt; best[i][j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>			&#125;<br>			cout &lt;&lt; endl;<br>		&#125;<br>	&#125;<br>	<span class="hljs-keyword">else</span> &#123;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>			<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;<br>				cout &lt;&lt; board[i][j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>			&#125;<br>			cout &lt;&lt; endl;<br>		&#125;<br>		cout&lt;&lt; <span class="hljs-string">&quot;\nNo Solution!&quot;</span> &lt;&lt; endl;<br>	&#125;<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="5-13-工作分配问题"><a href="#5-13-工作分配问题" class="headerlink" title="5-13 工作分配问题"></a>5-13 工作分配问题</h1><p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230105114617529.png" alt="image-20230105114617529" style="zoom:67%;"></p>
<p>由于每个工作仅由一人完成，每个人仅做一个工作，对于示例的输入矩阵，所求即为在每一行取一个数，且保证所取数不在同一列，求他们的和最小值，易知如果用暴力解法，设矩阵的行数为n，则解为n个数的排列组合，其中第i个数表示第i个工作分配给第j个人，则对于上述输入矩阵，可以得到可行解（3,2,1），（2,1,3），……</p>
<h3 id="1-解空间和解结构-9"><a href="#1-解空间和解结构-9" class="headerlink" title="1. 解空间和解结构"></a>1. 解空间和解结构</h3><p>对于n个工作的工作分配问题，其解空间即为1~n的全排列，解结构为排列树，具体而言树的第i层表示第i个工作的分配，每层的顶点表示该工作分配的人，如红色方框框出的节点即表示第1个工作分配给C1</p>
<p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230106091616647.png" alt="image-20230106091616647" style="zoom: 67%;"></p>
<h3 id="2-剪枝策略-9"><a href="#2-剪枝策略-9" class="headerlink" title="2. 剪枝策略"></a>2. 剪枝策略</h3><p>在搜索的过程中记录当前费用cv和最优费用bestv,若cv大于等于bestv，则无需再遍历该节点的子树（因为向下搜索的过程费用一定是单调递增的）</p>
<h3 id="3-示例-8"><a href="#3-示例-8" class="headerlink" title="3. 示例"></a>3. 示例</h3><p>分成两幅图来画了，实际上是一幅图</p>
<p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230106091745691.png" alt="image-20230106091745691" style="zoom:50%;"></p>
<p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230106091753460.png" alt="image-20230106091753460" style="zoom:50%;"></p>
<h3 id="4-代码-8"><a href="#4-代码-8" class="headerlink" title="4. 代码"></a>4. 代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">10010</span>;<br><span class="hljs-type">int</span> num;<br><span class="hljs-type">int</span> Min=INT_MAX;<br><span class="hljs-type">int</span> arr[N][N];<br><span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> state[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> t)</span><span class="hljs-comment">//从第t层开始搜索</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t&gt;=num) <span class="hljs-comment">//已经到达叶子节点，继续判断是否找到了最小总费用</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(Min&gt;sum)<span class="hljs-comment">//若当前费用小于最优费用</span><br>        &#123;<br>            Min=sum;<span class="hljs-comment">//更新最优费用</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;num;i++)<span class="hljs-comment">//搜索过程:将作业t进行分配</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(!state[i])<span class="hljs-comment">//若第i个人当前无作业</span><br>        &#123;<br>            state[i]=<span class="hljs-number">1</span>;<span class="hljs-comment">//将任务t分配给第i个人</span><br>            sum+=arr[t][i];<span class="hljs-comment">//更新当前费用</span><br>            <span class="hljs-keyword">if</span>(sum&lt;Min) <span class="hljs-built_in">dfs</span>(t+<span class="hljs-number">1</span>);<span class="hljs-comment">//若当前费用小于最优费用,则继续向下搜索</span><br>            state[i]=<span class="hljs-number">0</span>;<span class="hljs-comment">//回溯,恢复原状态</span><br>            sum-=arr[t][i];<span class="hljs-comment">//将当前费用恢复</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ifstream in;<br>    ofstream out;<br>    in.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;input.txt&quot;</span>);<br>    out.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;output.txt&quot;</span>);<br>    in&gt;&gt;num;<br>    Min=INT_MAX;<br>    sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;num;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;num;j++)<br>        &#123;<br>            in&gt;&gt;arr[i][j];<br>        &#125;<br>        state[i]=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>    cout&lt;&lt;<span class="hljs-string">&quot;最小费用为：&quot;</span>&lt;&lt;Min&lt;&lt;endl;<br>    out&lt;&lt;<span class="hljs-string">&quot;最小费用为：&quot;</span>&lt;&lt;Min&lt;&lt;endl;<br>    in.<span class="hljs-built_in">close</span>();<br>    out.<span class="hljs-built_in">close</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="5-时间复杂度-4"><a href="#5-时间复杂度-4" class="headerlink" title="5. 时间复杂度"></a>5. 时间复杂度</h3><p>考虑最坏情况，对于非叶子节点，其搜索所需时间为$O(n)$，对于叶子节点，其搜索所需时间为$O(1)$，故对于n个工作的工作分配问题，其时间消耗$T=n<em>(n+n</em>n-1+…+n!)+n!=O(n!*n)$</p>
<h1 id="5-14-布线问题"><a href="#5-14-布线问题" class="headerlink" title="5-14 布线问题"></a>5-14 布线问题</h1><p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230105114815154.png" alt="image-20230105114815154" style="zoom:67%;"></p>
<p>经典排列树，然后剪枝策略可以维护一个当前最优解的成本，若当前成本大于等于该变量，则剪去该分支。</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure>
<h3 id="1-解空间和解结构-10"><a href="#1-解空间和解结构-10" class="headerlink" title="1. 解空间和解结构"></a>1. 解空间和解结构</h3><p>对于n个元件的布线问题，其解空间为1~n的全排列，解结构为排列树</p>
<h3 id="2-剪枝策略-10"><a href="#2-剪枝策略-10" class="headerlink" title="2. 剪枝策略"></a>2. 剪枝策略</h3><p>维护当前最优解的成本<code>bestv</code>和当前费用<code>cv</code>，在考虑线路板t位置上是否放置元件i时，若当前费用加上放置元件i所带来的成本小于当前最优解的成本，则可继续搜索，否则剪去该分支</p>
<h3 id="3-示例-9"><a href="#3-示例-9" class="headerlink" title="3. 示例"></a>3. 示例</h3><p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230106111415596.png" alt="image-20230106111415596" style="zoom: 50%;"></p>
<h3 id="4-代码-9"><a href="#4-代码-9" class="headerlink" title="4. 代码"></a>4. 代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">25</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> conn[N][N];<br><span class="hljs-type">int</span> bestx[N];<br><span class="hljs-type">int</span> bestv=INT_MAX;<br><span class="hljs-type">int</span> cv;<br><span class="hljs-type">int</span> cx[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">currentvalue</span><span class="hljs-params">(<span class="hljs-type">int</span> cx[],<span class="hljs-type">int</span> t)</span><span class="hljs-comment">//计算cx第t位带来的成本</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;t;i++)<span class="hljs-comment">//t是从0开始的</span><br>    &#123;<br>        res=res+conn[cx[i]][cx[t]]*(t-i);<span class="hljs-comment">//cx从0开始</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">traceback</span><span class="hljs-params">(<span class="hljs-type">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t==n)<span class="hljs-comment">//到达叶子节点</span><br>    &#123;<br>      <span class="hljs-keyword">if</span>(cv&lt;bestv)<br>      &#123;<br>          <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>          &#123;<br>              bestx[i]=cx[i];<br>          &#125;<br>          bestv=cv;<br>      &#125;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=t;i&lt;n;i++)<span class="hljs-comment">//cx从0开始</span><br>    &#123;<br>        <span class="hljs-built_in">swap</span>(cx[t],cx[i]);<br>        <span class="hljs-type">int</span> value=<span class="hljs-built_in">currentvalue</span>(cx,t);<span class="hljs-comment">//计算t这一位带来的成本</span><br>        <span class="hljs-keyword">if</span>(value+cv&lt;bestv)<span class="hljs-comment">//满足限界条件</span><br>        &#123;<br>            cv+=value;<br>            <span class="hljs-built_in">traceback</span>(t+<span class="hljs-number">1</span>);<br>            cv-=value;<br>        &#125;<br>        <span class="hljs-built_in">swap</span>(cx[t],cx[i]);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>;j&lt;=n;j++)<br>        &#123;<br>            cin&gt;&gt;conn[i][j];<span class="hljs-comment">//构造领接矩阵</span><br>            conn[j][i]=conn[i][j];<span class="hljs-comment">//补全另一半</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) cx[i]=i+<span class="hljs-number">1</span>;<span class="hljs-comment">//当前解,先初始化为123...</span><br>    <span class="hljs-built_in">traceback</span>(<span class="hljs-number">0</span>);<br>    cout&lt;&lt;bestv&lt;&lt;endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        cout&lt;&lt;bestx[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="5-时间复杂度-5"><a href="#5-时间复杂度-5" class="headerlink" title="5. 时间复杂度"></a>5. 时间复杂度</h3><p>考虑最坏情况，对于n个元件的布线问题，对于非叶子节点，其消耗的时间与其层数t有关，为$O(n-t)$,对于叶子节点，其消耗的时间为$O(n)$，故该问题时间消耗为:$T=n<em>n+n</em>(n-1)<em>(n-1)+n</em>(n-1)<em>(n-2)</em>(n-2)+…+n!+n!<em>n=O(n!</em>n)$</p>
<h1 id="5-15-最佳调度问题"><a href="#5-15-最佳调度问题" class="headerlink" title="5-15 最佳调度问题"></a>5-15 最佳调度问题</h1><h3 id><a href="#" class="headerlink" title></a><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230105115631677.png" alt="image-20230105115631677" style="zoom:67%;"></h3><p>可以一一为每个任务分配工作，每个任务都可以尝试分配给每台机器，从而对排列树进行搜索。用一个数组存储每台机器已经分配的任务的总耗时，搜索到可行解后这个数组中的最大值即为当前解所需时间，在剪枝的过程中，将更新后该数组的值（即表示选择分配给该机器）与当前最优解的耗时比较，若小于则可继续搜索。</p>
<h3 id="1-解空间和解结构-11"><a href="#1-解空间和解结构-11" class="headerlink" title="1. 解空间和解结构"></a>1. 解空间和解结构</h3><p>对于n个任务k台机器的最佳调度问题，其解空间为长度为n的向量，向量的每一项为1~k，解结构为排列树</p>
<h3 id="2-剪枝策略-11"><a href="#2-剪枝策略-11" class="headerlink" title="2. 剪枝策略"></a>2. 剪枝策略</h3><p>按照题意，要求完成全部任务的时间最早，故维护变量<code>mintime</code>表示当前最优解的完成时间，数组<code>ans</code>存储每台机器完成当前任务后的时间，在任务分配过程中，尝试将任务i分配给机器j，若<code>t[i]+ans[j]&gt;=mintime</code>，则将该分支剪去，无需再搜索</p>
<h3 id="3-代码-1"><a href="#3-代码-1" class="headerlink" title="3. 代码"></a>3. 代码</h3><figure class="highlight basic"><table><tr><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">7 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">14</span> <span class="hljs-number">4</span> <span class="hljs-number">16</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,k,t[<span class="hljs-number">99</span>],ans[<span class="hljs-number">99</span>],min_time=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-comment">//ans[i]表示第i个机器运行完其上任务后的时间</span><br><span class="hljs-comment">//t[i]表示第i个任务需要的时间</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> level)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span>(level==n)<br>	&#123;<br>		<span class="hljs-type">int</span> tmp=*<span class="hljs-built_in">max_element</span>(ans,ans+n);<span class="hljs-comment">//max_element找数组的最大值</span><br>		<span class="hljs-keyword">if</span>(tmp&lt;min_time) min_time=tmp;<br>		<span class="hljs-keyword">return</span>;<br>	&#125;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)<span class="hljs-comment">//尝试分配给第i台机器</span><br>	&#123;<br>		ans[i]+=t[level];<br>		<span class="hljs-keyword">if</span>(ans[i]&lt;min_time) <span class="hljs-built_in">dfs</span>(level+<span class="hljs-number">1</span>);<br>		ans[i]-=t[level];<br>	&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	cin&gt;&gt;n&gt;&gt;k;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>	cin&gt;&gt;t[i];<br>	<span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>	cout&lt;&lt;min_time&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="4-时间复杂度"><a href="#4-时间复杂度" class="headerlink" title="4. 时间复杂度"></a>4. 时间复杂度</h3><p>考虑最坏情况，对于非叶子节点，其时间消耗为$O(k)$，对于叶子节点，其时间消耗为$O(n)$，故对于n个任务k台机器的最佳调度问题，其时间消耗为$T=k<em>(k+k^2+…+k^{n-1})+n</em>k^n=O(n*k^n)$</p>
<h1 id="5-16-无优先级运算问题"><a href="#5-16-无优先级运算问题" class="headerlink" title="5-16 无优先级运算问题"></a>5-16 无优先级运算问题</h1><p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230105115723106.png" alt="image-20230105115723106" style="zoom:67%;"></p>
<p>有点类似于整数变换问题，这里也是不知道树的层数，可以从1个数，2个数，…,n个数逐步增加树的层数，在选择数的时候，只能使用未选过的数，以此作为剪枝策略（可以用过数组记录某个数是否选过），使用数组记录该数右侧的运算符，每种符号的选择均作为分支向下搜索，当到达叶子节点时，检查当前运算结果是否为m，若为m，则不继续搜索，程序结束</p>
<h3 id="1-解空间和解结构-12"><a href="#1-解空间和解结构-12" class="headerlink" title="1. 解空间和解结构"></a>1. 解空间和解结构</h3><p>对于n个正整数的无优先级运算问题，其解空间为长度为2k-1(k从1到n)的向量，该向量的每一个奇数项为1~n的数且相互之间不重复，偶数项为1、2、3、4，分别表示<code>+,-,*,\</code>，解的结构为排列树，具体而言如下所示：</p>
<p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230106212553925.png" alt="image-20230106212553925" style="zoom:50%;"></p>
<h3 id="2-剪枝策略-12"><a href="#2-剪枝策略-12" class="headerlink" title="2. 剪枝策略"></a>2. 剪枝策略</h3><p>维护数组<code>flag</code>表示n个数是否使用，<code>flag[i]=1</code>表示第i个数已经使用，当给第dep位数选择数时，若该数已经使用过，则无法选择，剪去该分支</p>
<h3 id="3-代码-2"><a href="#3-代码-2" class="headerlink" title="3. 代码"></a>3. 代码</h3><figure class="highlight basic"><table><tr><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">25</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> a[N];<span class="hljs-comment">//存储题目所给n个数</span><br><span class="hljs-type">int</span> num[N];<span class="hljs-comment">//存储当前解</span><br><span class="hljs-type">int</span> oper[N];<span class="hljs-comment">//num[i] oper[i] num[i+1]</span><br><span class="hljs-type">int</span> flag[N];<span class="hljs-comment">//存储i个数的状态，是否使用</span><br><span class="hljs-type">int</span> k;<span class="hljs-comment">//表示使用的数的个数</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">found</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-comment">//判断是否找到解</span><br>    <span class="hljs-type">int</span> x=num[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)<br>    &#123;<br>        <span class="hljs-keyword">switch</span>(oper[i])&#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:x+=num[i+<span class="hljs-number">1</span>]; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:x-=num[i+<span class="hljs-number">1</span>]; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:x*=num[i+<span class="hljs-number">1</span>]; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:x/=num[i+<span class="hljs-number">1</span>]; <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (x==m);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">traceback</span><span class="hljs-params">(<span class="hljs-type">int</span> dep)</span><span class="hljs-comment">//考虑第dep个数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(dep&gt;k)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">found</span>()) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-comment">//第dep个数尝试选择数i</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(flag[i]==<span class="hljs-number">0</span>)<br>        &#123;<br>            num[dep]=a[i];<br>            flag[i]=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">4</span>;j++)<span class="hljs-comment">//选择该数右边的符号</span><br>            &#123;<br>                oper[dep]=j;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">traceback</span>(dep+<span class="hljs-number">1</span>))<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            flag[i]=<span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">out</span><span class="hljs-params">()</span><span class="hljs-comment">//输出函数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)<br>    &#123;<br>        cout&lt;&lt;num[i];<br>        <span class="hljs-keyword">switch</span>(oper[i])&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:cout&lt;&lt;<span class="hljs-string">&quot;+&quot;</span>;<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:cout&lt;&lt;<span class="hljs-string">&quot;-&quot;</span>;<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:cout&lt;&lt;<span class="hljs-string">&quot;*&quot;</span>;<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:cout&lt;&lt;<span class="hljs-string">&quot;/&quot;</span>;<span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;num[k];<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        cin&gt;&gt;a[i];<br>        flag[i]=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(k=<span class="hljs-number">1</span>;k&lt;=n;k++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">traceback</span>(<span class="hljs-number">0</span>))<br>        &#123;<br>            cout&lt;&lt;k&lt;&lt;endl;<br>            <span class="hljs-built_in">out</span>();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-string">&quot;No Solution!&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="4-时间复杂度-1"><a href="#4-时间复杂度-1" class="headerlink" title="4. 时间复杂度"></a>4. 时间复杂度</h3><p>考虑最坏情况，需要n个数，每个非叶子节点的时间消耗为$O(n)$，每个叶子节点的时间消耗为$O(n)$，此时时间消耗为$T=n(1+n+4<em>n+4</em>n^2+4^2<em>n^2+…+4^{n-1}</em>n^{n})=O(n^n<em>n</em>4^{n-1})$，真的很大。。。</p>
<h1 id="5-17-世界名画陈列馆问题"><a href="#5-17-世界名画陈列馆问题" class="headerlink" title="5-17 世界名画陈列馆问题"></a>5-17 世界名画陈列馆问题</h1><p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230105115824426.png" alt="image-20230105115824426" style="zoom:67%;"></p>
<p>input:</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>
<p>这题的思路参考了书的答案，他的剪枝策略有点复杂</p>
<h3 id="1-解空间和解结构-13"><a href="#1-解空间和解结构-13" class="headerlink" title="1. 解空间和解结构"></a>1. 解空间和解结构</h3><p>解空间为长度为n*m的向量，向量的每一项为0或者1，表示是否放置警卫，解结构为子集树</p>
<h3 id="2-剪枝策略-13"><a href="#2-剪枝策略-13" class="headerlink" title="2. 剪枝策略"></a>2. 剪枝策略</h3><ol>
<li>可以证明,当前访问的格点(i,j)已被监视时,放置在(i,j)的情况一定不会比放置在(i+1,j+1)的情况好.当(i+1,j+1)不在网格中时,(i+1,j)和(i,j+1)同理.所以,如果(i,j)已被监视,则不需要在此处放置机器人,直接跳过即可.（update,证明：因为是从上到下从左到右使得格子进入监视状态，当前正在检查访问(i,j)。说明在这之前的(i-1,j)和(i,j-1)已被监视。此时如果放在(i,j)处，只会使得(i+1,j)和(i,j+1)进入访问状态。而如果放在(i+1,j+1)处，显然在完成上述目标的情况下可以使更多格子进入访问状态）</li>
<li>当(i,j)未被监视时,若(i,j+1)已被监视,则在(i,j)放置一定不会比在(i+1,j)放置的情况好.所以当且仅当(i,j)在网格右下角或者(I,j+1)未被监视时才考虑放置在(i,j)的情况.</li>
<li>当(i,j)未被监视时,若(i,j+1)和(i,j+2)均被监视,则在(i+1,j)放置一定不会比在(i+1,j)放置的情况好,所以当且仅当(i,j+1)或(i,j+2)未被监视时才考虑放置在(i,j+1)的情况.</li>
<li>当i=n时,不考虑放置在(i+1,j)的情况.</li>
<li>记录已经监视的格点数,(当前最优值减去当前已放置个数)*5如果小于未监视的格点数,则一定达不到比当前最优值更好的情况,剪去.</li>
<li>类似于(5),考虑更紧的情况,并非每个机器人都能独立监视5个格点,至少会有m/4+5的冗余,这个剪枝仅适用于i&lt;n-1的情况,因为最后两行由于最优值和已放置个数非常接近,总是达不到这个值.</li>
</ol>
<blockquote>
<p>大概就是分为下界剪枝法和控制剪枝法两种，下界剪枝法就是计算剩余需要的警卫数，然后加上当前警卫数和当前最优解警卫数比较，控制剪枝法就是一堆已经证明的放置策略，如2、3、4,</p>
</blockquote>
<h3 id="3-代码-3"><a href="#3-代码-3" class="headerlink" title="3. 代码"></a>3. 代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> d[<span class="hljs-number">6</span>][<span class="hljs-number">3</span>]=&#123;&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;&#125;;<br><span class="hljs-comment">//d是个辅助用来改变状态的数组,从第1项开始,对应本身,左,上,右,下</span><br><span class="hljs-type">int</span> x[N][N];<span class="hljs-comment">//当前的放置策略</span><br><span class="hljs-type">int</span> y[N][N];<span class="hljs-comment">//是否受监视</span><br><span class="hljs-type">int</span> bestx[N][N];<span class="hljs-comment">//最优放置策略</span><br><span class="hljs-type">int</span> n,m,best,k=<span class="hljs-number">0</span>,t=<span class="hljs-number">0</span>,t1,t2,more;<br><span class="hljs-comment">//k为当前警卫数量</span><br><span class="hljs-comment">//t为当前受监视的位置的个数</span><br><span class="hljs-type">bool</span> p;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">place</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span><span class="hljs-comment">//在(i,j)处放置警卫,改变相邻位置的监视情况</span></span><br><span class="hljs-function"></span>&#123;<br>    x[i][j]=<span class="hljs-number">1</span>;<br>    k++;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> s=<span class="hljs-number">1</span>;s&lt;=<span class="hljs-number">5</span>;s++)<br>    &#123;<br>        <span class="hljs-type">int</span> p=i+d[s][<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> q=j+d[s][<span class="hljs-number">2</span>];<br>        y[p][q]++;<br>        <span class="hljs-keyword">if</span>(y[p][q]==<span class="hljs-number">1</span>) t++;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">noplace</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span><span class="hljs-comment">//用于撤销在(i,j)上放置的警卫</span></span><br><span class="hljs-function"></span>&#123;<br>    x[i][j]=<span class="hljs-number">0</span>;<br>    k--;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> s=<span class="hljs-number">1</span>;s&lt;=<span class="hljs-number">5</span>;s++)<br>    &#123;<br>        <span class="hljs-type">int</span> p=i+d[s][<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> q=j+d[s][<span class="hljs-number">2</span>];<br>        y[p][q]--;<br>        <span class="hljs-keyword">if</span>(y[p][q]==<span class="hljs-number">0</span>) t--;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">traceback</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">do</span>&#123;<br>        j++;<br>        <span class="hljs-keyword">if</span>(j&gt;m)&#123;<br>            i++;<br>            j=<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">while</span>(!(y[i][j]==<span class="hljs-number">0</span>||i&gt;n));<br>    <span class="hljs-comment">//若当前坐标未受监视或全部坐标都受到监视跳出循环</span><br>    <span class="hljs-keyword">if</span>(i&gt;n)&#123;<br>        <span class="hljs-keyword">if</span>(k&lt;best)&#123;<br>            best=k;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>                &#123;<br>                    bestx[i][j]=x[i][j];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(k+(t1-t)/<span class="hljs-number">5</span>&gt;=best)<span class="hljs-comment">//利用k和t估计警卫下界,</span><br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>((i&lt;n<span class="hljs-number">-1</span>)&amp;&amp;(k+(t2-t)/<span class="hljs-number">5</span>)&gt;=best)<span class="hljs-comment">//也是利用k和t估计下界</span><br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(i&lt;n)&#123;<span class="hljs-comment">//下侧放警卫</span><br>        <span class="hljs-built_in">place</span>(i+<span class="hljs-number">1</span>,j);<br>        <span class="hljs-built_in">traceback</span>(i,j);<br>        <span class="hljs-built_in">noplace</span>(i+<span class="hljs-number">1</span>,j);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(j&lt;m&amp;&amp;(y[i][j+<span class="hljs-number">1</span>]==<span class="hljs-number">0</span>||y[i][j+<span class="hljs-number">2</span>]==<span class="hljs-number">0</span>))&#123;<br>        <span class="hljs-built_in">place</span>(i,j+<span class="hljs-number">1</span>);<span class="hljs-comment">//在右侧放警卫</span><br>        <span class="hljs-built_in">traceback</span>(i,j);<br>        <span class="hljs-built_in">noplace</span>(i,j+<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>((y[i+<span class="hljs-number">1</span>][j]==<span class="hljs-number">0</span>&amp;&amp;y[i][j+<span class="hljs-number">1</span>]==<span class="hljs-number">0</span>))<br>    &#123;<br>        <span class="hljs-built_in">place</span>(i,j);<span class="hljs-comment">//在本身放警卫</span><br>        <span class="hljs-built_in">traceback</span>(i,j);<br>        <span class="hljs-built_in">noplace</span>(i,j);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">output</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout&lt;&lt;best&lt;&lt;endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>        &#123;<br>            cout&lt;&lt;bestx[i][j]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout&lt;&lt;endl;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//下界剪枝法的辅助，主要是用来辅助通过t和k估计警卫人数的下界的</span><br>    more=m/<span class="hljs-number">4</span>+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(m%<span class="hljs-number">4</span>==<span class="hljs-number">3</span>)<br>        more++;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(m%<span class="hljs-number">4</span>==<span class="hljs-number">2</span>)<br>        more+=<span class="hljs-number">2</span>;<br>    t2=m*n+more+<span class="hljs-number">4</span>;<br>    t1=m*n+<span class="hljs-number">4</span>;<br>	<span class="hljs-comment">//下面就很好看懂了</span><br>    best=INT_MAX;<br>    <span class="hljs-built_in">memset</span>(y,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(y));<br>    <span class="hljs-built_in">memset</span>(x,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(x));<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>&amp;&amp;m==<span class="hljs-number">1</span>)<br>    &#123;<br>        cout&lt;&lt;<span class="hljs-number">1</span>&lt;&lt;endl&lt;&lt;<span class="hljs-number">1</span>&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//构造边界</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=m+<span class="hljs-number">1</span>;i++)<br>    &#123;<br>        y[<span class="hljs-number">0</span>][i]=<span class="hljs-number">1</span>;<br>        y[n+<span class="hljs-number">1</span>][i]=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=n+<span class="hljs-number">1</span>;i++)<br>    &#123;<br>        y[i][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>        y[i][m+<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">traceback</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">output</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;m&gt;&gt;n;<br>    <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="5-18-世界名画陈列馆问题（不重复监视）"><a href="#5-18-世界名画陈列馆问题（不重复监视）" class="headerlink" title="5-18 世界名画陈列馆问题（不重复监视）"></a>5-18 世界名画陈列馆问题（不重复监视）</h1><p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230105115900644.png" alt="image-20230105115900644" style="zoom: 80%;"></p>
<p>在5-17上改了下，框架没变，去掉了答案那些控制剪枝法的剪枝策略，加上了题目中要求的不重复监视的剪枝策略，且在叶子节点处加上了对整个矩阵检查是否全部监视了，主要加了check函数，checkall函数，改了traceback函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> d[<span class="hljs-number">6</span>][<span class="hljs-number">3</span>]=&#123;&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;&#125;;<br><span class="hljs-comment">//d是个辅助用来改变状态的数组,从第1项开始,对应本身,左,上,右,下</span><br><span class="hljs-type">int</span> x[N][N];<span class="hljs-comment">//当前的放置策略</span><br><span class="hljs-type">int</span> y[N][N];<span class="hljs-comment">//是否受监视</span><br><span class="hljs-type">int</span> bestx[N][N];<span class="hljs-comment">//最优放置策略</span><br><span class="hljs-type">int</span> n,m,best,k=<span class="hljs-number">0</span>,t=<span class="hljs-number">0</span>,t1,t2,more;<br><span class="hljs-comment">//k为当前警卫数量</span><br><span class="hljs-comment">//t为当前受监视的位置的个数</span><br><span class="hljs-type">bool</span> p;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">place</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span><span class="hljs-comment">//在(i,j)处放置警卫,改变相邻位置的监视情况</span></span><br><span class="hljs-function"></span>&#123;<br>    x[i][j]=<span class="hljs-number">1</span>;<br>    k++;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> s=<span class="hljs-number">1</span>;s&lt;=<span class="hljs-number">5</span>;s++)<br>    &#123;<br>        <span class="hljs-type">int</span> p=i+d[s][<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> q=j+d[s][<span class="hljs-number">2</span>];<br>        y[p][q]++;<br>        <span class="hljs-keyword">if</span>(y[p][q]==<span class="hljs-number">1</span>) t++;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span><span class="hljs-comment">//检查(i,j)是否能放置警卫</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> s=<span class="hljs-number">1</span>;s&lt;=<span class="hljs-number">5</span>;s++)<br>    &#123;<br>        <span class="hljs-type">int</span> p=i+d[s][<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> q=j+d[s][<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">if</span>(y[p][q])<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">checkall</span><span class="hljs-params">()</span><span class="hljs-comment">//检查是否全部都有警卫</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!y[i][j]) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">noplace</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span><span class="hljs-comment">//用于撤销在(i,j)上放置的警卫</span></span><br><span class="hljs-function"></span>&#123;<br>    x[i][j]=<span class="hljs-number">0</span>;<br>    k--;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> s=<span class="hljs-number">1</span>;s&lt;=<span class="hljs-number">5</span>;s++)<br>    &#123;<br>        <span class="hljs-type">int</span> p=i+d[s][<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> q=j+d[s][<span class="hljs-number">2</span>];<br>        y[p][q]--;<br>        <span class="hljs-keyword">if</span>(y[p][q]==<span class="hljs-number">0</span>) t--;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">traceback</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">do</span>&#123;<br>        j++;<br>        <span class="hljs-keyword">if</span>(j&gt;m)&#123;<br>            i++;<br>            j=<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">while</span>(!(y[i][j]==<span class="hljs-number">0</span>||i&gt;n));<br>    <span class="hljs-comment">//若当前坐标未受监视或全部坐标都受到监视跳出循环</span><br>    <span class="hljs-keyword">if</span>(i&gt;n)&#123;<br>        <span class="hljs-keyword">if</span>(k&lt;best&amp;&amp;<span class="hljs-built_in">checkall</span>())&#123;<br>            best=k;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>                &#123;<br>                    bestx[i][j]=x[i][j];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(k+(t1-t)/<span class="hljs-number">5</span>&gt;=best)<span class="hljs-comment">//利用k和t估计警卫下界,</span><br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>((i&lt;n<span class="hljs-number">-1</span>)&amp;&amp;(k+(t2-t)/<span class="hljs-number">5</span>)&gt;=best)<span class="hljs-comment">//也是利用k和t估计下界</span><br>        <span class="hljs-keyword">return</span>;<br><br>   <span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(i,j))<br>   &#123;<br>       <span class="hljs-built_in">place</span>(i,j);<br>       <span class="hljs-built_in">traceback</span>(i,j);<br>       <span class="hljs-built_in">noplace</span>(i,j);<br>   &#125;<br>   <span class="hljs-built_in">traceback</span>(i,j);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">output</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout&lt;&lt;best&lt;&lt;endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>        &#123;<br>            cout&lt;&lt;bestx[i][j]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout&lt;&lt;endl;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    more=m/<span class="hljs-number">4</span>+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(m%<span class="hljs-number">4</span>==<span class="hljs-number">3</span>)<br>        more++;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(m%<span class="hljs-number">4</span>==<span class="hljs-number">2</span>)<br>        more+=<span class="hljs-number">2</span>;<br>    t2=m*n+more+<span class="hljs-number">4</span>;<br>    t1=m*n+<span class="hljs-number">4</span>;<br>	<span class="hljs-comment">//下面就很好看懂了</span><br>    best=INT_MAX;<br>    <span class="hljs-built_in">memset</span>(y,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(y));<br>    <span class="hljs-built_in">memset</span>(x,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(x));<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>&amp;&amp;m==<span class="hljs-number">1</span>)<br>    &#123;<br>        cout&lt;&lt;<span class="hljs-number">1</span>&lt;&lt;endl&lt;&lt;<span class="hljs-number">1</span>&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">traceback</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">output</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;m&gt;&gt;n;<br>    <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="5-19-算m点问题"><a href="#5-19-算m点问题" class="headerlink" title="5-19 算m点问题"></a>5-19 算m点问题</h1><p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230105115926418.png" alt="image-20230105115926418" style="zoom: 80%;"></p>
<p>类似于5-16，但是这里一定用到了k个整数，所以只需要稍微改改(把k设置为n-1然后改输出)，而且这种计算方式可以看成是无优先级的</p>
<p>示例应该给错了，应该是下面这样：</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">125</span><br><span class="hljs-symbol">7 </span><span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">12</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> a[N];<span class="hljs-comment">//存储题目所给n个数</span><br><span class="hljs-type">int</span> num[N];<span class="hljs-comment">//存储当前解</span><br><span class="hljs-type">int</span> oper[N];<span class="hljs-comment">//num[i] oper[i] num[i+1]</span><br><span class="hljs-type">int</span> flag[N];<span class="hljs-comment">//存储i个数的状态，是否使用</span><br><span class="hljs-type">int</span> k;<span class="hljs-comment">//表示使用的数的个数</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">found</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-comment">//判断是否找到解</span><br>    <span class="hljs-type">int</span> x=num[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)<br>    &#123;<br>        <span class="hljs-keyword">switch</span>(oper[i])&#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:x+=num[i+<span class="hljs-number">1</span>]; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:x-=num[i+<span class="hljs-number">1</span>]; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:x*=num[i+<span class="hljs-number">1</span>]; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:x/=num[i+<span class="hljs-number">1</span>]; <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (x==m);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">traceback</span><span class="hljs-params">(<span class="hljs-type">int</span> dep)</span><span class="hljs-comment">//考虑第dep个数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(dep&gt;k)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">found</span>()) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-comment">//第dep个数尝试选择数i</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(flag[i]==<span class="hljs-number">0</span>)<br>        &#123;<br>            num[dep]=a[i];<br>            flag[i]=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">4</span>;j++)<span class="hljs-comment">//选择该数右边的符号</span><br>            &#123;<br>                oper[dep]=j;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">traceback</span>(dep+<span class="hljs-number">1</span>))<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            flag[i]=<span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">out</span><span class="hljs-params">()</span><span class="hljs-comment">//输出函数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ans=num[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)<br>    &#123;<br>        cout&lt;&lt;ans;<br>        <span class="hljs-keyword">switch</span>(oper[i])&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:cout&lt;&lt;<span class="hljs-string">&quot;+&quot;</span>;ans+=num[i+<span class="hljs-number">1</span>];<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:cout&lt;&lt;<span class="hljs-string">&quot;-&quot;</span>;ans-=num[i+<span class="hljs-number">1</span>];<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:cout&lt;&lt;<span class="hljs-string">&quot;*&quot;</span>;ans*=num[i+<span class="hljs-number">1</span>];<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:cout&lt;&lt;<span class="hljs-string">&quot;/&quot;</span>;ans/=num[i+<span class="hljs-number">1</span>];<span class="hljs-keyword">break</span>;<br>        &#125;<br>        cout&lt;&lt;num[i+<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-string">&quot;=&quot;</span>&lt;&lt;ans&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        cin&gt;&gt;a[i];<br>        flag[i]=<span class="hljs-number">0</span>;<br>    &#125;<br>    k=n<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">traceback</span>(<span class="hljs-number">0</span>))<br>    &#123;<br>        <span class="hljs-built_in">out</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-string">&quot;No Solution!&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230106220815943.png" alt="image-20230106220815943"></p>
<h1 id="5-20-部落卫队问题"><a href="#5-20-部落卫队问题" class="headerlink" title="5-20 部落卫队问题"></a>5-20 部落卫队问题</h1><p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230105120010640.png" alt="image-20230105120010640"></p>
<p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230105120024040.png" alt="image-20230105120024040"></p>
<p>类似于0-1背包问题，子集树，左子树为1，右子树为0,约束函数就是不能和当前卫队里已有的居民为仇敌，若为仇敌，则剪去左子树。限界函数是当前卫队里的人数加上除去当前考虑的居民的剩余的居民，若数量还是比best小，则剪去右子树</p>
<h3 id="1-解空间和解结构-14"><a href="#1-解空间和解结构-14" class="headerlink" title="1. 解空间和解结构"></a>1. 解空间和解结构</h3><p>对于n个居民的部落卫队问题，其解空间为长度为n的向量，向量的每一项为0或者1，解结构为子集树</p>
<h3 id="2-剪枝策略-14"><a href="#2-剪枝策略-14" class="headerlink" title="2. 剪枝策略"></a>2. 剪枝策略</h3><p>考虑居民t是否加入卫队，加入卫队即进入左子树，否则进入右子树</p>
<p>约束函数：若居民t和1~t-1中已经加入卫队的居民直接有仇视关系，则t不能加入卫队，剪去左子树</p>
<p>限界函数：若居民t不加入卫队，维护变量cv为当前卫队中居民人数，则卫队未来可能的最多人数为<code>cv+n-t</code>，若该值大于n，才搜索右子树，否则剪去右子树</p>
<h3 id="3-代码-4"><a href="#3-代码-4" class="headerlink" title="3. 代码"></a>3. 代码</h3><p>input：</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">7 </span><span class="hljs-number">10</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">6</span><br></code></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> n,m;<span class="hljs-comment">//n个居民,m个关系</span><br><span class="hljs-type">int</span> relation[N][N];<span class="hljs-comment">//居民关系,0表示正常，1表示仇视,从1开始的</span><br><span class="hljs-type">int</span> cbest=<span class="hljs-number">0</span>;<span class="hljs-comment">//最多的卫兵</span><br><span class="hljs-type">int</span> bestx[N];<span class="hljs-comment">//存储最优解</span><br><span class="hljs-type">int</span> cv=<span class="hljs-number">0</span>;<span class="hljs-comment">//当前卫兵人数</span><br><span class="hljs-type">int</span> x[N];<span class="hljs-comment">//当前解,x[i]=1表示第i个居民是卫兵</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">traceback</span><span class="hljs-params">(<span class="hljs-type">int</span> t)</span><span class="hljs-comment">//第t个居民是否作为卫兵</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t==n)<span class="hljs-comment">//到达叶子节点</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(cv&gt;cbest)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>            &#123;<br>                bestx[i]=x[i];<br>                cbest=cv;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">bool</span> flag=<span class="hljs-literal">true</span>;<span class="hljs-comment">//判断是否有冲突</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;t;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(x[i]==<span class="hljs-number">1</span>&amp;&amp;relation[t+<span class="hljs-number">1</span>][i+<span class="hljs-number">1</span>]==<span class="hljs-number">1</span>)<br>        &#123;<br>            flag=<span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(flag)<span class="hljs-comment">//考虑是否进入左子树</span><br>    &#123;<br>        x[t]=<span class="hljs-number">1</span>;<br>        cv++;<br>        <span class="hljs-built_in">traceback</span>(t+<span class="hljs-number">1</span>);<br>        x[t]=<span class="hljs-number">0</span>;<br>        cv--;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(cv+n-t&gt;cbest)<span class="hljs-comment">//考虑是否进入右子树</span><br>    &#123;<br>        <span class="hljs-built_in">traceback</span>(t+<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-type">int</span> t1,t2;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)<span class="hljs-comment">//构造领接矩阵</span><br>    &#123;<br>        cin&gt;&gt;t1&gt;&gt;t2;<br>        relation[t1][t2]=<span class="hljs-number">1</span>;<br>        relation[t2][t1]=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">traceback</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">//从第0个居民开始考虑</span><br>    cout&lt;&lt;cbest&lt;&lt;endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        cout&lt;&lt;bestx[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230106230008395.png" alt="image-20230106230008395" style="zoom:67%;"></p>
<h3 id="4-时间复杂度-2"><a href="#4-时间复杂度-2" class="headerlink" title="4. 时间复杂度"></a>4. 时间复杂度</h3><p>考虑最坏情况，对于非叶子节点，搜索所需时间为$O(t+1)$，其中t为当前的层数，对于叶子节点，其搜索所需时间为$O(n)$，故居民数量为n的部落卫队问题的时间复杂度为$O(n*2^n)$</p>
<h1 id="5-21、5-22"><a href="#5-21、5-22" class="headerlink" title="5-21、5-22"></a>5-21、5-22</h1><p>装载问题和0-1背包问题，见书上例题~</p>
<h1 id="5-23-圆排列问题"><a href="#5-23-圆排列问题" class="headerlink" title="5-23 圆排列问题"></a>5-23 圆排列问题</h1><p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230106231319219.png" alt="image-20230106231319219" style="zoom: 80%;"></p>
<p>排列树，在选择一个圆的时候，就能计算他带来的长度（需要单独考虑第一个和最后一个的半径带来的长度），维护当前最优解，若当前解小于最优解才继续搜索，看看代码大概就能懂啦（突然发现书上有这道例题，也可以看看书上的）</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>
<h3 id="1-解空间和解结构-15"><a href="#1-解空间和解结构-15" class="headerlink" title="1. 解空间和解结构"></a>1. 解空间和解结构</h3><p>n个圆的圆排列问题的解空间为1~n的全排列，解结构为排列树</p>
<h3 id="2-剪枝策略-15"><a href="#2-剪枝策略-15" class="headerlink" title="2. 剪枝策略"></a>2. 剪枝策略</h3><p>维护变量<code>minlen</code>表示当前最优解的长度，<code>clen</code>表示当前长度，当考虑放置第t个圆时，计算其带来的长度<code>l</code>，若<code>l+clen&gt;=minlen</code>，则剪去该子树</p>
<h3 id="3-代码-5"><a href="#3-代码-5" class="headerlink" title="3. 代码"></a>3. 代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">double</span> r[N];<br><span class="hljs-type">double</span> minlen=DBL_MAX;<br><span class="hljs-type">double</span> clen=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> x[N];<span class="hljs-comment">//当前的排列</span><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">bring</span><span class="hljs-params">(<span class="hljs-type">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> r[x[t]];<span class="hljs-comment">//第一个就是半径</span><br>    <span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//加上t和t-1位置上圆心的x之间的距离</span><br>        <span class="hljs-type">double</span> res=<span class="hljs-number">0</span>;<br>        res=<span class="hljs-built_in">sqrt</span>((r[x[t]]+r[x[t<span class="hljs-number">-1</span>]])*(r[x[t]]+r[x[t<span class="hljs-number">-1</span>]])-<span class="hljs-built_in">abs</span>(r[x[t]]-r[x[t<span class="hljs-number">-1</span>]])*<span class="hljs-built_in">abs</span>(r[x[t]]-r[x[t<span class="hljs-number">-1</span>]]));<br>        <span class="hljs-keyword">if</span>(t==n<span class="hljs-number">-1</span>) res+=r[x[t]];<span class="hljs-comment">//最后一个还要加半径</span><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">traceback</span><span class="hljs-params">(<span class="hljs-type">int</span> t)</span><span class="hljs-comment">//考虑放置的第t个圆</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t==n)<span class="hljs-comment">//叶节点，更新min</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(clen&lt;minlen) minlen=clen;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=t;i&lt;n;i++)<span class="hljs-comment">//考虑将未使用的圆放在t位置</span><br>    &#123;<br>        <span class="hljs-built_in">swap</span>(x[t],x[i]);<br>        <span class="hljs-type">double</span> ctmp=clen;<br>        <span class="hljs-keyword">if</span>(clen+<span class="hljs-built_in">bring</span>(t)&lt;minlen)<span class="hljs-comment">//当前长度小于最优解长度</span><br>        &#123;<br>            clen=clen+<span class="hljs-built_in">bring</span>(t);<br>            <span class="hljs-built_in">traceback</span>(t+<span class="hljs-number">1</span>);<br>            clen=ctmp;<br>        &#125;<br>        <span class="hljs-built_in">swap</span>(x[t],x[i]);t<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        cin&gt;&gt;r[i];<br>        x[i]=i;<br>    &#125;<br>    <span class="hljs-built_in">traceback</span>(<span class="hljs-number">0</span>);<br>    cout&lt;&lt;minlen;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="4-时间复杂度-3"><a href="#4-时间复杂度-3" class="headerlink" title="4. 时间复杂度"></a>4. 时间复杂度</h3><p>考虑最坏情况，对于非叶子节点，搜索所需时间为$O(n-t)$，t为叶子节点的层数，对于叶子节点，搜索所需时间为$O(1)$，故n个圆的圆排列问题的最坏情况下时间复杂度为$O(n!)$</p>
<h1 id="5-24"><a href="#5-24" class="headerlink" title="5-24"></a>5-24</h1><p>图着色问题，见书上例题~</p>
<h1 id="5-25-最短加法链问题"><a href="#5-25-最短加法链问题" class="headerlink" title="5-25 最短加法链问题"></a>5-25 最短加法链问题</h1><p><img src="/2023/01/02/%E5%9B%9E%E6%BA%AF%E6%B3%95%E9%A2%98%E8%A7%A3/image-20230105120329010.png" alt="image-20230105120329010" style="zoom: 80%;"></p>
<p>类似于整数变换那题，也是树的层数未知，所以可以用变量控制层数慢慢加大，可以采用无优先级运算问题的类似框架去解这道题，不同的是这题随着层数的加大分支数也加大了，剪枝策略是当前考虑的项不能大于23，看看代码就差不多~</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> n;<span class="hljs-comment">//需要得到的数</span><br><span class="hljs-type">int</span> x[N];<span class="hljs-comment">//加法链数组</span><br><span class="hljs-type">int</span> k;<span class="hljs-comment">//控制层数</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">traceback</span><span class="hljs-params">(<span class="hljs-type">int</span> t)</span><span class="hljs-comment">//考虑加法链的第t项</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t==k)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(x[k<span class="hljs-number">-1</span>]==n) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//选择加法链中的两个相加得到第t项</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;t;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;t;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(x[i]+x[j]&lt;=n)<span class="hljs-comment">//剪枝，该项要小于等于n</span><br>            &#123;<br>                x[t]=x[i]+x[j];<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">traceback</span>(t+<span class="hljs-number">1</span>))<br>                &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    x[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(k=<span class="hljs-number">1</span>;k&lt;=n;k++)<span class="hljs-comment">//最多n层</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">traceback</span>(<span class="hljs-number">1</span>))<span class="hljs-comment">//这里得是1,因为如果是0会直接返回false</span><br>        &#123;<br>            cout&lt;&lt;k<span class="hljs-number">-1</span>&lt;&lt;endl;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)<br>            &#123;<br>                cout&lt;&lt;x[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>完结撒花🎉~</p>
]]></content>
  </entry>
  <entry>
    <title>algorithm</title>
    <url>/2022/12/14/algorithm/</url>
    <content><![CDATA[<p>代码参考acwing-yxc</p>
<span id="more"></span>
<h1 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h1><ul>
<li>c++里面1e7和1e8的复杂度大概1s能够计算得到</li>
<li>10的9次方以内或者32位整数用int存放，10的18次方以内或者64位整数用long long 存放</li>
<li>小写字母比大写字母的ASCII大32</li>
<li>%d-整数；%s-字符串（字符数组），%f-浮点数，%c-char</li>
<li>对于四舍五入的处理：可以直接进行判断，也可以使用浮点数的round函数</li>
<li>自建数据结构一定要考虑初始化</li>
<li>C++位运算的优先级比加减乘除的优先级低，所以遇到位运算和加减乘除一起的，要加个括号。</li>
<li>注意要不要用long long </li>
</ul>
<p>review：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>算法</th>
</tr>
</thead>
<tbody>
<tr>
<td>最长连续不重复子序列</td>
</tr>
<tr>
<td>二进制中1的个数</td>
</tr>
<tr>
<td></td>
</tr>
</tbody>
</table>
</div>
<h1 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h1><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="快速排序-1"><a href="#快速排序-1" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> q[N];<br><span class="hljs-comment">//分治法思想</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;<br>	<span class="hljs-comment">//双指针</span><br>    <span class="hljs-type">int</span> i = l - <span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>, x = q[l + r &gt;&gt; <span class="hljs-number">1</span>];<span class="hljs-comment">//取中间作为基准</span><br>    <span class="hljs-keyword">while</span> (i &lt; j)<br>    &#123;<br>        <span class="hljs-keyword">do</span> i ++ ; <span class="hljs-keyword">while</span> (q[i] &lt; x);<span class="hljs-comment">//左右指针移动</span><br>        <span class="hljs-keyword">do</span> j -- ; <span class="hljs-keyword">while</span> (q[j] &gt; x);<br>        <span class="hljs-keyword">if</span> (i &lt; j) <span class="hljs-built_in">swap</span>(q[i], q[j]);<span class="hljs-comment">//交换</span><br>    &#125;<br><br>    <span class="hljs-built_in">quick_sort</span>(q, l, j);<span class="hljs-comment">//递归处理左右部分</span><br>    <span class="hljs-built_in">quick_sort</span>(q, j + <span class="hljs-number">1</span>, r);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;q[i]);<br><br>    <span class="hljs-built_in">quick_sort</span>(q, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, q[i]);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="第k个数"><a href="#第k个数" class="headerlink" title="第k个数"></a>第k个数</h3><p>注意这个代码左边&lt;=x, 右边&gt;=x, 但分界点不一定=x ，模拟一下<code>3 4 2 8 9 5 7</code>，这个代码可能和有些不一样</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> q[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> k)</span><span class="hljs-comment">//基于快排</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span> q[l];<span class="hljs-comment">//数组中只有一个数</span><br><br>    <span class="hljs-type">int</span> i = l - <span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>, x = q[l + r &gt;&gt; <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">while</span> (i &lt; j)<span class="hljs-comment">//快排按基准划分</span><br>    &#123;<br>        <span class="hljs-keyword">do</span> i ++ ; <span class="hljs-keyword">while</span> (q[i] &lt; x);<br>        <span class="hljs-keyword">do</span> j -- ; <span class="hljs-keyword">while</span> (q[j] &gt; x);<br>        <span class="hljs-keyword">if</span> (i &lt; j) <span class="hljs-built_in">swap</span>(q[i], q[j]);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (j - l + <span class="hljs-number">1</span> &gt;= k) <span class="hljs-keyword">return</span> <span class="hljs-built_in">quick_sort</span>(q, l, j, k);<span class="hljs-comment">//若左半部分元素个数大于等于k，搜左边</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">quick_sort</span>(q, j + <span class="hljs-number">1</span>, r, k - (j - l + <span class="hljs-number">1</span>));<span class="hljs-comment">//否则搜右边，更新搜索第k - (j - l + 1)个元素</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, k;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;q[i]);<br><br>    cout &lt;&lt; <span class="hljs-built_in">quick_sort</span>(q, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>, k) &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h3 id="归并排序-1"><a href="#归并排序-1" class="headerlink" title="归并排序"></a>归并排序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> a[N], tmp[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br><br>    <span class="hljs-built_in">merge_sort</span>(q, l, mid), <span class="hljs-built_in">merge_sort</span>(q, mid + <span class="hljs-number">1</span>, r);<span class="hljs-comment">//分别对左右部分进行排序</span><br><br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>, i = l, j = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<span class="hljs-comment">//进行合并</span><br>        <span class="hljs-keyword">if</span> (q[i] &lt;= q[j]) tmp[k ++ ] = q[i ++ ];<br>        <span class="hljs-keyword">else</span> tmp[k ++ ] = q[j ++ ];<br>    <span class="hljs-keyword">while</span> (i &lt;= mid) tmp[k ++ ] = q[i ++ ];<span class="hljs-comment">//合并剩余部分</span><br>    <span class="hljs-keyword">while</span> (j &lt;= r) tmp[k ++ ] = q[j ++ ];<br><br>    <span class="hljs-keyword">for</span> (i = l, j = <span class="hljs-number">0</span>; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];<span class="hljs-comment">//重新拷贝到原数组</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br><br>    <span class="hljs-built_in">merge_sort</span>(a, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[i]);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="逆序对"><a href="#逆序对" class="headerlink" title="逆序对"></a>逆序对</h3><blockquote>
<p>注意边界条件&gt;=,写错了可就EML</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> a[N], tmp[N];<br><br><span class="hljs-function">LL <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br><br>    LL res = <span class="hljs-built_in">merge_sort</span>(q, l, mid) + <span class="hljs-built_in">merge_sort</span>(q, mid + <span class="hljs-number">1</span>, r);<br><br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>, i = l, j = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>        <span class="hljs-keyword">if</span> (q[i] &lt;= q[j]) tmp[k ++ ] = q[i ++ ];<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            res += mid - i + <span class="hljs-number">1</span>;<br>            tmp[k ++ ] = q[j ++ ];<br>        &#125;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid) tmp[k ++ ] = q[i ++ ];<br>    <span class="hljs-keyword">while</span> (j &lt;= r) tmp[k ++ ] = q[j ++ ];<br><br>    <span class="hljs-keyword">for</span> (i = l, j = <span class="hljs-number">0</span>; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];<br><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br><br>    cout &lt;&lt; <span class="hljs-built_in">merge_sort</span>(a, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>) &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h2><h3 id="数的范围"><a href="#数的范围" class="headerlink" title="数的范围"></a>数的范围</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> q[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;q[i]);<br><br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br><br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = n - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (l &lt; r)<br>        &#123;<br>            <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (q[mid] &gt;= x) r = mid;<br>            <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (q[l] != x) cout &lt;&lt; <span class="hljs-string">&quot;-1 -1&quot;</span> &lt;&lt; endl;<span class="hljs-comment">//这里lr无所谓，最后l=r</span><br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cout &lt;&lt; l &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br><br>            <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = n - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (l &lt; r)<br>            &#123;<br>                <span class="hljs-type">int</span> mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (q[mid] &lt;= x) l = mid;<br>                <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>            &#125;<br><br>            cout &lt;&lt; l &lt;&lt; endl;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="整数二分总结"><a href="#整数二分总结" class="headerlink" title="整数二分总结"></a>整数二分总结</h3><p>整数二分法：有单调性可以二分，无单调性也可能可以。主要是否存在一种性质能把区间分成两半——边界</p>
<p>二分可以求这个划分的边界，存在左半部分的右边界和右半部分的左边界，有两套模板，选择的时候判断性质把mid放在left还是right上</p>
<p>二分每次都覆盖最终的结果，最后只剩一个数的时候就是结果</p>
<p>二分模板一共有两个，分别适用于不同情况。<br>算法思路：假设目标值在闭区间[l, r]中， 每次将区间长度缩小一半，当l = r时，我们就找到了目标值。</p>
<p>版本1<br>当我们将区间[l, r]划分成[l, mid]和[mid + 1, r]时，其更新操作是r = mid或者l = mid + 1;，计算mid时不需要加1。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bsearch_1</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>版本2<br>当我们将区间[l, r]划分成[l, mid - 1]和[mid, r]时，其更新操作是r = mid - 1或者l = mid;，此时为了防止死循环，计算mid时需要加1。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bsearch_2</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;<span class="hljs-comment">//需要加一，否则可能出现死循环</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) l = mid;<br>        <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>假设有一个总区间，经由我们的 check 函数判断后，可分成两部分，<br>这边以o作 true，…..作 false 示意较好识别</p>
<p>如果我们的目标是下面这个v，那麽就必须使用模板 1</p>
<p>…………….vooooooooo</p>
<p>假设经由 check 划分后，整个区间的属性与目标v如下，则我们必须使用模板 2</p>
<p>oooooooov……………….</p>
<p>所以下次可以观察 check 属性再与模板1 or 2 互相搭配就不会写错啦</p>
<h3 id="数的三次方根"><a href="#数的三次方根" class="headerlink" title="数的三次方根"></a>数的三次方根</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">double</span> x;<br>    cin &gt;&gt; x;<br><br>    <span class="hljs-type">double</span> l = <span class="hljs-number">-100</span>, r = <span class="hljs-number">100</span>;<span class="hljs-comment">//边界的选择</span><br>    <span class="hljs-keyword">while</span> (r - l &gt; <span class="hljs-number">1e-8</span>)<span class="hljs-comment">//注意对浮点数的处理</span><br>    &#123;<br>        <span class="hljs-type">double</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (mid * mid * mid &gt;= x) r = mid;<span class="hljs-comment">//类似于整数二分</span><br>        <span class="hljs-keyword">else</span> l = mid;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.6lf\n&quot;</span>, l);<span class="hljs-comment">//注意浮点保留小数位</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://blog.csdn.net/qq_29874741/article/details/94626531">(c语言printf()输出格式大全_printf输出格式_rusty_knife的博客-CSDN博客</a></p>
</blockquote>
<p>double输出为<code>%lf</code></p>
<h3 id="浮点二分总结"><a href="#浮点二分总结" class="headerlink" title="浮点二分总结"></a>浮点二分总结</h3><p>浮点二分是类似于整数二分的，且其无需考虑+1-1的，需要注意：</p>
<ul>
<li>while的条件，<code>r-l&gt;精度*10^-2^</code>，比如题目要求精度是-6次，<code>r-l&gt;1e-8</code></li>
<li>r和l直接取边界值即可</li>
</ul>
<h2 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h2><blockquote>
<p>tips：</p>
<ul>
<li>注意处理进位，包括最高位的进位</li>
<li>借位的处理，借位不是t/10，而是正负判定赋值</li>
<li>注意是否需要处理前导0,注意乘法是不是可以乘以0</li>
</ul>
</blockquote>
<p>string的存储：”12345”</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
<td style="text-align:center">4</td>
<td style="text-align:center">5</td>
</tr>
</tbody>
</table>
</div>
<h3 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h3><ul>
<li>存储时使用数组存储（可用vector），从个位开始存储，如数12345，在数组里的存储方式为：（为了方便加法）</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>数组的第X位</th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
</tr>
</thead>
<tbody>
<tr>
<td>存储的数字</td>
<td>5</td>
<td>4</td>
<td>3</td>
<td>2</td>
<td>1</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>运算的方法：模拟人工加法，每一位的结果等于两个数该位的结果加上低位的进位</li>
</ul>
<p>不压位代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">add</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A, vector&lt;<span class="hljs-type">int</span>&gt; &amp;B)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (A.<span class="hljs-built_in">size</span>() &lt; B.<span class="hljs-built_in">size</span>()) <span class="hljs-keyword">return</span> <span class="hljs-built_in">add</span>(B, A);<span class="hljs-comment">//让A总是更长</span><br><br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; A.<span class="hljs-built_in">size</span>(); i ++ )<br>    &#123;<br>        t += A[i];<br>        <span class="hljs-keyword">if</span> (i &lt; B.<span class="hljs-built_in">size</span>()) t += B[i];<br>        C.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (t) C.<span class="hljs-built_in">push_back</span>(t); <span class="hljs-comment">//注意处理最后的进位</span><br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string a, b;<br>    vector&lt;<span class="hljs-type">int</span>&gt; A, B;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = a.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) A.<span class="hljs-built_in">push_back</span>(a[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = b.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) B.<span class="hljs-built_in">push_back</span>(b[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br><br>    <span class="hljs-keyword">auto</span> C = <span class="hljs-built_in">add</span>(A, B);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = C.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) cout &lt;&lt; C[i];<br>    cout &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>压位代码</p>
<p>压位能减小所需空间，高精度加法可以压9位，乘法可以压4位，压9位就是数组的一位表示原数的9位（int范围的限制）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> base = <span class="hljs-number">1000000000</span>;<span class="hljs-comment">//压9位，加法进位的时候是需要余base</span><br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">add</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A, vector&lt;<span class="hljs-type">int</span>&gt; &amp;B)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (A.<span class="hljs-built_in">size</span>() &lt; B.<span class="hljs-built_in">size</span>()) <span class="hljs-keyword">return</span> <span class="hljs-built_in">add</span>(B, A);<br><br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; A.<span class="hljs-built_in">size</span>(); i ++ )<br>    &#123;<br>        t += A[i];<br>        <span class="hljs-keyword">if</span> (i &lt; B.<span class="hljs-built_in">size</span>()) t += B[i];<br>        C.<span class="hljs-built_in">push_back</span>(t % base);<br>        t /= base;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (t) C.<span class="hljs-built_in">push_back</span>(t);<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string a, b;<br>    vector&lt;<span class="hljs-type">int</span>&gt; A, B;<br>    cin &gt;&gt; a &gt;&gt; b;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = a.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>, s = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>, t = <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- )<br>    &#123;<span class="hljs-comment">//s记录当前位数字，j为当前压了几位，t为辅助乘数量级</span><br>        s += (a[i] - <span class="hljs-string">&#x27;0&#x27;</span>) * t;<br>        j ++, t *= <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">9</span> || i == <span class="hljs-number">0</span>)<br>        &#123;<br>            A.<span class="hljs-built_in">push_back</span>(s);<br>            s = j = <span class="hljs-number">0</span>;<br>            t = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = b.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>, s = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>, t = <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- )<br>    &#123;<br>        s += (b[i] - <span class="hljs-string">&#x27;0&#x27;</span>) * t;<br>        j ++, t *= <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">9</span> || i == <span class="hljs-number">0</span>)<br>        &#123;<br>            B.<span class="hljs-built_in">push_back</span>(s);<br>            s = j = <span class="hljs-number">0</span>;<br>            t = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">auto</span> C = <span class="hljs-built_in">add</span>(A, B);<br><br>    cout &lt;&lt; C.<span class="hljs-built_in">back</span>();<span class="hljs-comment">//单独输出最高位(因为无需补高位0)</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = C.<span class="hljs-built_in">size</span>() - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%09d&quot;</span>, C[i]);<span class="hljs-comment">//需要补高位0，限制在9位</span><br>    cout &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="高精度减法"><a href="#高精度减法" class="headerlink" title="高精度减法"></a>高精度减法</h3><ul>
<li>需要首先保证<code>sub(A,B)</code>中有<code>A&gt;=B</code></li>
<li>然后逐位作差，注意借位</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A, vector&lt;<span class="hljs-type">int</span>&gt; &amp;B)</span><span class="hljs-comment">//判断是否有 A&gt;=B</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (A.<span class="hljs-built_in">size</span>() != B.<span class="hljs-built_in">size</span>()) <span class="hljs-keyword">return</span> A.<span class="hljs-built_in">size</span>() &gt; B.<span class="hljs-built_in">size</span>();<span class="hljs-comment">//首先判断位数</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = A.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- )<span class="hljs-comment">//然后从高位起开始判断</span><br>        <span class="hljs-keyword">if</span> (A[i] != B[i])<br>            <span class="hljs-keyword">return</span> A[i] &gt; B[i];<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//若相等，也返回true</span><br>&#125;<br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sub</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A, vector&lt;<span class="hljs-type">int</span>&gt; &amp;B)</span><span class="hljs-comment">//作差，此时已经保证A &gt;= B</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, t = <span class="hljs-number">0</span>; i &lt; A.<span class="hljs-built_in">size</span>(); i ++ )<span class="hljs-comment">//t表示借位</span><br>    &#123;<br>        t = A[i] - t;<br>        <span class="hljs-keyword">if</span> (i &lt; B.<span class="hljs-built_in">size</span>()) t -= B[i];<br>        C.<span class="hljs-built_in">push_back</span>((t + <span class="hljs-number">10</span>) % <span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">if</span> (t &lt; <span class="hljs-number">0</span>) t = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> t = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (C.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; C.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) C.<span class="hljs-built_in">pop_back</span>();<span class="hljs-comment">//去除前导0</span><br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string a, b;<br>    vector&lt;<span class="hljs-type">int</span>&gt; A, B;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = a.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) A.<span class="hljs-built_in">push_back</span>(a[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = b.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) B.<span class="hljs-built_in">push_back</span>(b[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br><br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">cmp</span>(A, B)) C = <span class="hljs-built_in">sub</span>(A, B);<br>    <span class="hljs-keyword">else</span> C = <span class="hljs-built_in">sub</span>(B, A), cout &lt;&lt; <span class="hljs-string">&#x27;-&#x27;</span>;<span class="hljs-comment">//注意对符号的判断</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = C.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) cout &lt;&lt; C[i];<br>    cout &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="高精度乘法"><a href="#高精度乘法" class="headerlink" title="高精度乘法"></a>高精度乘法</h3><ul>
<li>首先注意进位的处理，类似加法</li>
<li>其次注意处理前导0</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">mul</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; A.<span class="hljs-built_in">size</span>() || t; i ++ )<span class="hljs-comment">//处理进位，||t</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; A.<span class="hljs-built_in">size</span>()) t += A[i] * b;<span class="hljs-comment">//A的每一位</span><br>        C.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<span class="hljs-comment">//进位</span><br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (C.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; C.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) C.<span class="hljs-built_in">pop_back</span>();<span class="hljs-comment">//b为0，前导0</span><br><br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string a;<br>    <span class="hljs-type">int</span> b;<br><br>    cin &gt;&gt; a &gt;&gt; b;<br><br>    vector&lt;<span class="hljs-type">int</span>&gt; A;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = a.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) A.<span class="hljs-built_in">push_back</span>(a[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br><br>    <span class="hljs-keyword">auto</span> C = <span class="hljs-built_in">mul</span>(A, b);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = C.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, C[i]);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>上面这种方法不太好记忆，也可以采用下面这种：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dot</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp;A,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t=<span class="hljs-number">0</span>;<br>    vector&lt;<span class="hljs-type">int</span>&gt; res;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;A.<span class="hljs-built_in">size</span>();i++)<br>    &#123;<br>        t+=A[i]*b;<br>        res.<span class="hljs-built_in">push_back</span>(t%<span class="hljs-number">10</span>);<br>        t=t/<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(t)<span class="hljs-comment">//处理余下的进位</span><br>    &#123;<br>        res.<span class="hljs-built_in">push_back</span>(t%<span class="hljs-number">10</span>);<br>        t=t/<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(res.<span class="hljs-built_in">back</span>()==<span class="hljs-number">0</span>&amp;&amp;res.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">1</span>) res.<span class="hljs-built_in">pop_back</span>();<span class="hljs-comment">//处理乘以0后的前导0</span><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string a;<br>    <span class="hljs-type">int</span> b;<br>    cin&gt;&gt;a&gt;&gt;b;<br>    vector&lt;<span class="hljs-type">int</span>&gt;A,C;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=a.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--) A.<span class="hljs-built_in">push_back</span>(a[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>    C=<span class="hljs-built_in">dot</span>(A,b);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=C.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--) cout&lt;&lt;C[i];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="高精度除法"><a href="#高精度除法" class="headerlink" title="高精度除法"></a>高精度除法</h3><ul>
<li>类似于人做除法，从高位开始除，注意对余数的处理</li>
<li>除完后得到的是从0开始高位——低位的格式，进行反转</li>
<li>处理前导0</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">div</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> &amp;r)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    r = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = A.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- )<br>    &#123;<br>        r = r * <span class="hljs-number">10</span> + A[i];<br>        C.<span class="hljs-built_in">push_back</span>(r / b);<br>        r %= b;<br>    &#125;<br>    <span class="hljs-built_in">reverse</span>(C.<span class="hljs-built_in">begin</span>(), C.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">while</span> (C.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; C.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) C.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string a;<br>    vector&lt;<span class="hljs-type">int</span>&gt; A;<br><br>    <span class="hljs-type">int</span> B;<br>    cin &gt;&gt; a &gt;&gt; B;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = a.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) A.<span class="hljs-built_in">push_back</span>(a[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br><br>    <span class="hljs-type">int</span> r;<br>    <span class="hljs-keyword">auto</span> C = <span class="hljs-built_in">div</span>(A, B, r);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = C.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) cout &lt;&lt; C[i];<br><br>    cout &lt;&lt; endl &lt;&lt; r &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="前缀和和差分"><a href="#前缀和和差分" class="headerlink" title="前缀和和差分"></a>前缀和和差分</h2><h3 id="一维前缀和"><a href="#一维前缀和" class="headerlink" title="一维前缀和"></a>一维前缀和</h3><ul>
<li>$S_i=a_1+a_2+…+a_i$</li>
<li><p>$sum(l,r)=S_r-S_{l-1}$</p>
</li>
<li><p>为了能统一格式，输入可以从1开始，然后<code>s[i] = s[i - 1] + a[i]</code>这一操作就也可以从1开始了</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;  iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> a[N], s[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) s[i] = s[i - <span class="hljs-number">1</span>] + a[i]; <span class="hljs-comment">// 前缀和的初始化</span><br><br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-type">int</span> l, r;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, s[r] - s[l - <span class="hljs-number">1</span>]); <span class="hljs-comment">// 区间和的计算</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>如果不需要原来的数组，也可以直接用<code>a</code>数组自己来变换</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        cin&gt;&gt;a[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        a[i]=a[i]+a[i<span class="hljs-number">-1</span>];<br>    &#125;<br>    <span class="hljs-type">int</span> st,ed;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>    &#123;<br>        cin&gt;&gt;st&gt;&gt;ed;<br>        cout&lt;&lt;a[ed]-a[st<span class="hljs-number">-1</span>]&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h3><ul>
<li>$S[i][j]$存储包括$a[i][j]$的左上侧元素的和</li>
<li>$S[i][j]=S[i-1][j]+S[i][j-1]-S[i-1][j-1]+a[i][j]$</li>
<li>查询$(x_1,y_1)$和$(x_2,y_2)$范围内元素的和（包括这两个点），$S[x_2][y_2]-S[x_2][y_1-1]-S[x_1-1][y_2]+S[x_1-1][y_1-1]$</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-type">int</span> n, m, q;<br><span class="hljs-type">int</span> s[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;q);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++ )<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;s[i][j]);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++ )<br>            s[i][j] += s[i - <span class="hljs-number">1</span>][j] + s[i][j - <span class="hljs-number">1</span>] - s[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br><br>    <span class="hljs-keyword">while</span> (q -- )<br>    &#123;<br>        <span class="hljs-type">int</span> x1, y1, x2, y2;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, s[x2][y2] - s[x1 - <span class="hljs-number">1</span>][y2] - s[x2][y1 - <span class="hljs-number">1</span>] + s[x1 - <span class="hljs-number">1</span>][y1 - <span class="hljs-number">1</span>]);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="一维差分"><a href="#一维差分" class="headerlink" title="一维差分"></a>一维差分</h3><ul>
<li><p>差分的核心操作是：在数组<code>a[L:R]</code>上全都加上c，等价于<code>b[l]+=c</code>,<code>b[R+1]-=c</code></p>
</li>
<li><p>差分是前缀和的逆运算，即构造数组b，使得a数组是其前缀和数组</p>
</li>
<li>差分的数组b不需要显示计算，可以理解为a数组原本是全0，然后在a数组上插入数，即在<code>a[i,i]上插入a[i][i]</code></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> a[N], b[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> c)</span><span class="hljs-comment">//等价在a上的[l,r]区间的数都加上c</span></span><br><span class="hljs-function"></span>&#123;<br>    b[l] += c;<br>    b[r + <span class="hljs-number">1</span>] -= c;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) <span class="hljs-built_in">insert</span>(i, i, a[i]);<br><br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-type">int</span> l, r, c;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;c);<br>        <span class="hljs-built_in">insert</span>(l, r, c);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) b[i] += b[i - <span class="hljs-number">1</span>];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, b[i]);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">还见过另外一种差分方法：</span><br><span class="hljs-comment">for (int i = 1; i &lt;= n; i ++ ) cin &gt;&gt; a[i];</span><br><span class="hljs-comment">for (int i = n; i; i -- ) a[i] -= a[i - 1];</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>
<h3 id="二维差分"><a href="#二维差分" class="headerlink" title="二维差分"></a>二维差分</h3><ul>
<li>核心思想：给定原矩阵<code>a[i,j]</code>，构造差分矩阵<code>b[i,j]</code>，使得a是b的前缀和</li>
<li>核心操作：给以(x1,y1)为左上角,(x2,y2)为右下角的子矩阵中的所有数加上c，其对于差分矩阵的影响是</li>
<li><code>S[x1,y1]+=c;S[x1,y2+1]-=c;S[x2+1,y1]-=c;S[x2+1,y2+1]+=c</code></li>
<li>同样不需要显式构造差分矩阵，借助核心操作可完成</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-type">int</span> n, m, q;<br><span class="hljs-type">int</span> a[N][N], b[N][N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x1, <span class="hljs-type">int</span> y1, <span class="hljs-type">int</span> x2, <span class="hljs-type">int</span> y2, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    b[x1][y1] += c;<br>    b[x2 + <span class="hljs-number">1</span>][y1] -= c;<br>    b[x1][y2 + <span class="hljs-number">1</span>] -= c;<br>    b[x2 + <span class="hljs-number">1</span>][y2 + <span class="hljs-number">1</span>] += c;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;q);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++ )<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i][j]);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++ )<br>            <span class="hljs-built_in">insert</span>(i, j, i, j, a[i][j]);<br><br>    <span class="hljs-keyword">while</span> (q -- )<br>    &#123;<br>        <span class="hljs-type">int</span> x1, y1, x2, y2, c;<br>        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; c;<br>        <span class="hljs-built_in">insert</span>(x1, y1, x2, y2, c);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++ )<br>            b[i][j] += b[i - <span class="hljs-number">1</span>][j] + b[i][j - <span class="hljs-number">1</span>] - b[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++ ) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, b[i][j]);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="双指针算法"><a href="#双指针算法" class="headerlink" title="双指针算法"></a>双指针算法</h2><ul>
<li>归并排序双指针指向两个数组，快排双指针指向一个数组</li>
<li>核心思想：将朴素的二重循环优化到$O(n)$</li>
<li>写的时候首先写朴素的二重循环，然后考虑i,j之间的关系，是否存在单调的关系</li>
</ul>
<p>!!!模板：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>    <span class="hljs-keyword">while</span>(j&lt;i&amp;&amp;<span class="hljs-built_in">check</span>(i,j)) j++;<br>    <span class="hljs-comment">//具体问题的逻辑</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="最长连续不重复子序列"><a href="#最长连续不重复子序列" class="headerlink" title="最长连续不重复子序列"></a>最长连续不重复子序列</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> q[N], s[N];<span class="hljs-comment">//s用来做hash的，表示某个数的数量</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;q[i]);<br><br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; n; i ++ )<span class="hljs-comment">//考虑右边界为i的最长子序列</span><br>    &#123;<br>        s[q[i]] ++ ;<span class="hljs-comment">//由于左侧一定是不重复的，所以只需要考虑进入的数是否重复</span><br>        <span class="hljs-keyword">while</span> (j &lt; i &amp;&amp; s[q[i]] &gt; <span class="hljs-number">1</span>) s[q[j ++ ]] -- ;<span class="hljs-comment">//若重复则紧缩左边界以达到去重目的</span><br>        res = <span class="hljs-built_in">max</span>(res, i - j + <span class="hljs-number">1</span>);<span class="hljs-comment">//去重后取最大值作为输出</span><br>    &#125;<br><br>    cout &lt;&lt; res &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="数组元素的目标和"><a href="#数组元素的目标和" class="headerlink" title="数组元素的目标和"></a>数组元素的目标和</h3><p>考虑单调性去优化二重朴素循环</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> n,m,x;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> b[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;x);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;b[j]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>,j=<span class="hljs-number">0</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>    &#123;<br>     <span class="hljs-keyword">while</span>(j&lt;m&amp;&amp;a[i]+b[j]&lt;x) j++;<br>     <span class="hljs-keyword">if</span>(a[i]+b[j]==x)<br>     &#123;<br>         cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;j;<br>         <span class="hljs-keyword">break</span>;<br>     &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="判断子序列"><a href="#判断子序列" class="headerlink" title="判断子序列"></a>判断子序列</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> a[N], b[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++ ) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;b[i]);<br><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; n &amp;&amp; j &lt; m)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (a[i] == b[j]) i ++ ;<br>        j ++ ;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (i == n) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>求n的第k位数字：<code>n&gt;&gt;k&amp;1</code></p>
<p>返回n的最后一位：<code>lowbit(n)=n&amp;-n</code>，如：</p>
<p>x=1010，lowbit(x)=10</p>
<p>x=101000，lowbit(x)=1000</p>
<h3 id="二进制中1的个数"><a href="#二进制中1的个数" class="headerlink" title="二进制中1的个数"></a>二进制中1的个数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">while</span> (n -- )<br>    &#123;<br>        <span class="hljs-type">int</span> x, s = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i; i -= i &amp; -i) s ++ ;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, s);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h2><p>当值域跨度大，但点分布比较稀疏时可用离散化，如给定数-1e10,-1,1e10，该数上所在位置对应一个数，此时可用一个数组中存储上述列举的稀疏的数，一个数组来存储对应的数</p>
<p>离散化的本质是建立了一段数列到自然数之间的映射关系（value -&gt; index)，通过建立新索引，来缩小目标区间，使得可以进行一系列连续数组可以进行的操作比如二分，前缀和等…</p>
<p>离散化首先需要排序去重：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-number">1.</span> 排序：<span class="hljs-built_in">sort</span>(alls.<span class="hljs-built_in">begin</span>(),alls.<span class="hljs-built_in">end</span>())<br><span class="hljs-number">2.</span> 去重：alls.<span class="hljs-built_in">earse</span>(<span class="hljs-built_in">unique</span>(alls.<span class="hljs-built_in">begin</span>(),alls.<span class="hljs-built_in">end</span>()),alls.<span class="hljs-built_in">end</span>());<br><span class="hljs-built_in">unique</span>(alls.<span class="hljs-built_in">begin</span>(),alls.<span class="hljs-built_in">end</span>())<br><span class="hljs-comment">/*返回去重最后一位数，外层alls.erase()删去从alls中去重的最后一位数到alls后面的重复数的最后一位（也就是把unique操作中移到alls末尾的重复数全部删掉）*/</span><br></code></pre></td></tr></table></figure>
<p>unique()函数的底层原理</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt;::<span class="hljs-function">iterator <span class="hljs-title">unique</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;a)</span> </span>&#123;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>        <span class="hljs-keyword">if</span> (!i || a[i] != a[i - <span class="hljs-number">1</span>])<span class="hljs-comment">//如果是第一个元素或者该元素不等于前一个元素，即不重复元素，我们就把它存到数组前j个元素中</span><br>            a[j++] = a[i];<span class="hljs-comment">//每存在一个不同元素，j++</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> a.<span class="hljs-built_in">begin</span>() + j;<span class="hljs-comment">//返回的是前j个不重复元素的下标</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="区间和"><a href="#区间和" class="headerlink" title="区间和"></a>区间和</h3><p>建立x-&gt;value的映射，但是又不能是数组那种直接hash，所以做法是把所有可能的下标都记录下来，去重后，然后再建立一个新的数组来存放固定好x后的他们的value值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">300010</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> a[N], s[N];<br><br>vector&lt;<span class="hljs-type">int</span>&gt; alls;<br>vector&lt;PII&gt; add, query;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = alls.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (alls[mid] &gt;= x) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> r + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> x, c;<br>        cin &gt;&gt; x &gt;&gt; c;<br>        add.<span class="hljs-built_in">push_back</span>(&#123;x, c&#125;);<br><br>        alls.<span class="hljs-built_in">push_back</span>(x);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> l, r;<br>        cin &gt;&gt; l &gt;&gt; r;<br>        query.<span class="hljs-built_in">push_back</span>(&#123;l, r&#125;);<br><br>        alls.<span class="hljs-built_in">push_back</span>(l);<br>        alls.<span class="hljs-built_in">push_back</span>(r);<br>    &#125;<br><br>    <span class="hljs-comment">// 去重</span><br>    <span class="hljs-built_in">sort</span>(alls.<span class="hljs-built_in">begin</span>(), alls.<span class="hljs-built_in">end</span>());<br>    alls.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">unique</span>(alls.<span class="hljs-built_in">begin</span>(), alls.<span class="hljs-built_in">end</span>()), alls.<span class="hljs-built_in">end</span>());<br><br>    <span class="hljs-comment">// 处理插入</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> item : add)<br>    &#123;<br>        <span class="hljs-type">int</span> x = <span class="hljs-built_in">find</span>(item.first);<br>        a[x] += item.second;<br>    &#125;<br><br>    <span class="hljs-comment">// 预处理前缀和</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= alls.<span class="hljs-built_in">size</span>(); i ++ ) s[i] = s[i - <span class="hljs-number">1</span>] + a[i];<br>    <span class="hljs-comment">//这里可以直接从1开始是因为find函数返回时从1开始的</span><br><br>    <span class="hljs-comment">// 处理询问</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> item : query)<br>    &#123;<br>        <span class="hljs-type">int</span> l = <span class="hljs-built_in">find</span>(item.first), r = <span class="hljs-built_in">find</span>(item.second);<br>        cout &lt;&lt; s[r] - s[l - <span class="hljs-number">1</span>] &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;PII;<br><span class="hljs-type">int</span> n;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(vector&lt;PII&gt;&amp;segs)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;PII&gt; res;<br>    <span class="hljs-built_in">sort</span>(segs.<span class="hljs-built_in">begin</span>(),segs.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-type">int</span> st=<span class="hljs-number">-2e9</span>,ed=<span class="hljs-number">-2e9</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> item:segs)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(item.first&gt;ed)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(st!=<span class="hljs-number">-2e9</span>) res.<span class="hljs-built_in">push_back</span>(&#123;st,ed&#125;);<span class="hljs-comment">//把上一个块压入</span><br>            st=item.first,ed=item.second;<span class="hljs-comment">//开启一个新的块</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> ed=<span class="hljs-built_in">max</span>(ed,item.second);<span class="hljs-comment">//不能开启新的块,拓展该块</span><br>    &#125;<br>    <span class="hljs-comment">//无论上述何种情况，最后一个块都尚未压入</span><br>    <span class="hljs-keyword">if</span>(st!=<span class="hljs-number">-2e9</span>) res.<span class="hljs-built_in">push_back</span>(&#123;st,ed&#125;);<br>    segs=res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> l,r;<br>    vector&lt;PII&gt;segs;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        cin&gt;&gt;l&gt;&gt;r;<br>        segs.<span class="hljs-built_in">push_back</span>(&#123;l,r&#125;);<br>    &#125;<br>    <span class="hljs-built_in">merge</span>(segs);<br>    cout&lt;&lt;segs.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p>一般单链表的实现：指针+结构体</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>&#123;<br>  <span class="hljs-type">int</span> val;<br>  Node* next;<br>&#125;;<br></code></pre></td></tr></table></figure>
<p>但在笔试题里面不怎么用，因为new的时候耗时比较高，在面试中常用</p>
<blockquote>
<p>单链表，用得最多的是邻接表（n个链表），可用于存储树和图</p>
<p>双链表，用于优化某些问题</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> head,idx,e[N],ne[N];<br><span class="hljs-comment">//分别为头指针,idx为下一个能放入的点,e数组存储值,ne数组存储next节点。null用-1表示</span><br></code></pre></td></tr></table></figure>
<p>下面是单链表的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><br><span class="hljs-comment">// head 表示头结点的下标</span><br><span class="hljs-comment">// e[i] 表示节点i的值</span><br><span class="hljs-comment">// ne[i] 表示节点i的next指针是多少</span><br><span class="hljs-comment">// idx 存储当前已经用到了哪个点</span><br><span class="hljs-type">int</span> head, e[N], ne[N], idx;<br><br><span class="hljs-comment">// 初始化</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    head = <span class="hljs-number">-1</span>;<br>    idx = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 将x插到头结点</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add_to_head</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = x, ne[idx] = head, head = idx ++ ;<br>&#125;<br><br><span class="hljs-comment">// 将x插到下标是k的点后面</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> k, <span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = x, ne[idx] = ne[k], ne[k] = idx ++ ;<br>&#125;<br><br><span class="hljs-comment">// 将下标是k的点后面的点删掉</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    ne[k] = ne[ne[k]];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m;<br>    cin &gt;&gt; m;<br><br>    <span class="hljs-built_in">init</span>();<br><br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-type">int</span> k, x;<br>        <span class="hljs-type">char</span> op;<br><br>        cin &gt;&gt; op;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;H&#x27;</span>)<br>        &#123;<br>            cin &gt;&gt; x;<br>            <span class="hljs-built_in">add_to_head</span>(x);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;D&#x27;</span>)<br>        &#123;<br>            cin &gt;&gt; k;<br>            <span class="hljs-keyword">if</span> (!k) head = ne[head];<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">remove</span>(k - <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cin &gt;&gt; k &gt;&gt; x;<br>            <span class="hljs-built_in">add</span>(k - <span class="hljs-number">1</span>, x);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head; i != <span class="hljs-number">-1</span>; i = ne[i]) cout &lt;&lt; e[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    cout &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> e[N],l[N],r[N],idx,m;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    r[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    l[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    idx=<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-comment">//在下标k后面插入x</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx]=x;<br>    l[idx]=k;<br>    r[idx]=r[k];<br>    l[r[k]]=idx;<br>    r[k]=idx;<br>    idx++;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    l[r[k]]=l[k];<br>    r[l[k]]=r[k];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;m;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        string op;<br>        <span class="hljs-type">int</span> x,k;<br>        cin&gt;&gt;op;<br>        <span class="hljs-keyword">if</span>(op==<span class="hljs-string">&quot;L&quot;</span>)<br>        &#123;<br>            cin&gt;&gt;x;<br>            <span class="hljs-built_in">insert</span>(<span class="hljs-number">0</span>,x);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op==<span class="hljs-string">&quot;R&quot;</span>)<br>        &#123;<br>            cin&gt;&gt;x;<br>            <span class="hljs-built_in">insert</span>(l[<span class="hljs-number">1</span>],x);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op==<span class="hljs-string">&quot;D&quot;</span>)<br>        &#123;<br>            cin&gt;&gt;k;<br>            <span class="hljs-built_in">remove</span>(k+<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op==<span class="hljs-string">&quot;IL&quot;</span>)<br>        &#123;<br>            cin&gt;&gt;k&gt;&gt;x;<br>            <span class="hljs-built_in">insert</span>(l[k+<span class="hljs-number">1</span>],x);<br>        &#125;<span class="hljs-keyword">else</span><br>        &#123;<br>            cin&gt;&gt;k&gt;&gt;x;<br>            <span class="hljs-built_in">insert</span>(k+<span class="hljs-number">1</span>,x);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=r[<span class="hljs-number">0</span>];i!=<span class="hljs-number">1</span>;i=r[i])<br>    &#123;<br>        cout&lt;&lt;e[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>;<br><span class="hljs-comment">// *********栈</span><br><span class="hljs-type">int</span> stk[N],tt;<span class="hljs-comment">//tt表示栈顶(是指向一个元素的)</span><br><br><span class="hljs-comment">// 插入</span><br>stk[++tt]=x;<br><br><span class="hljs-comment">// 弹出</span><br>tt--;<br><br><span class="hljs-comment">//判断栈是否为空</span><br><span class="hljs-keyword">if</span>(tt&gt;<span class="hljs-number">0</span>) <span class="hljs-keyword">not</span> empty<br><span class="hljs-keyword">else</span> empty<br><br><span class="hljs-comment">//栈顶</span><br>stk[tt];<br></code></pre></td></tr></table></figure>
<h3 id="模拟栈"><a href="#模拟栈" class="headerlink" title="模拟栈"></a>模拟栈</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> m;<br><span class="hljs-type">int</span> stk[N],tt;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;m;<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        string op;<br>        <span class="hljs-type">int</span> x;<br>        cin&gt;&gt;op;<br>        <span class="hljs-keyword">if</span>(op==<span class="hljs-string">&quot;push&quot;</span>)<br>        &#123;<br>            cin&gt;&gt;x;<br>            stk[++tt]=x;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op==<span class="hljs-string">&quot;pop&quot;</span>)<br>        &#123;<br>            tt--;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op==<span class="hljs-string">&quot;empty&quot;</span>)<br>        &#123;<br>            cout&lt;&lt;(tt?<span class="hljs-string">&quot;NO&quot;</span>:<span class="hljs-string">&quot;YES&quot;</span>)&lt;&lt;endl;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            cout&lt;&lt;stk[tt]&lt;&lt;endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h3><p>如果所有字符的运算顺序都相同，也就是说从左往右算和从右往左算都无区别，那我们可以将所有数字压进栈中，所有操作符压进栈中，然后做<code>eval</code>操作，但是并不是所有情况我们都可以从后往前直接算的</p>
<ul>
<li>如果前面运算符的优先级高的话或者相等（运算符优先级相等的话从左往右算），我们必须先算前面的操作，如<code>3*5-2</code>，就不能先算5-2</li>
<li>如果前面有括号，就必须先算括号里的，如<code>(3-2)*5</code>，就不能先算2*5</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>stack&lt;<span class="hljs-type">int</span>&gt;num;<br>stack&lt;<span class="hljs-type">char</span>&gt;op;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">eval</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> b=num.<span class="hljs-built_in">top</span>();num.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">//b是右边的</span><br>    <span class="hljs-keyword">auto</span> a=num.<span class="hljs-built_in">top</span>();num.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">//a是左边的</span><br>    <span class="hljs-keyword">auto</span> c=op.<span class="hljs-built_in">top</span>();op.<span class="hljs-built_in">pop</span>();<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;+&#x27;</span>) x=a+b;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) x=a-b;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;*&#x27;</span>) x=a*b;<br>    <span class="hljs-keyword">else</span> x=a/b;<br>    num.<span class="hljs-built_in">push</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    unordered_map&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt; pr&#123;&#123;<span class="hljs-string">&#x27;+&#x27;</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-string">&#x27;*&#x27;</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-number">2</span>&#125;&#125;;<span class="hljs-comment">//优先级定义</span><br>    string str;<br>    cin&gt;&gt;str;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;str.<span class="hljs-built_in">size</span>();i++)<br>    &#123;<br>        <span class="hljs-keyword">auto</span> c=str[i];<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isdigit</span>(c))<span class="hljs-comment">//数字则构造数字</span><br>        &#123;<br>            <span class="hljs-type">int</span> x=<span class="hljs-number">0</span>,j=i;<br>            <span class="hljs-keyword">while</span>(j&lt;str.<span class="hljs-built_in">size</span>()&amp;&amp;<span class="hljs-built_in">isdigit</span>(str[j]))<span class="hljs-comment">//构造x</span><br>                x=x*<span class="hljs-number">10</span>+str[j++]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>            i=j<span class="hljs-number">-1</span>;<br>            num.<span class="hljs-built_in">push</span>(x);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;(&#x27;</span>) op.<span class="hljs-built_in">push</span>(c);<span class="hljs-comment">//处理括号</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;)&#x27;</span>)<span class="hljs-comment">//处理括号前算的情况</span><br>        &#123;<br>            <span class="hljs-keyword">while</span>(op.<span class="hljs-built_in">top</span>()!=<span class="hljs-string">&#x27;(&#x27;</span>) <span class="hljs-built_in">eval</span>();<br>            op.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-keyword">else</span><span class="hljs-comment">//处理优先级前算的情况</span><br>        &#123;<br>            <span class="hljs-keyword">while</span>(op.<span class="hljs-built_in">size</span>()&amp;&amp;op.<span class="hljs-built_in">top</span>()!=<span class="hljs-string">&#x27;(&#x27;</span>&amp;&amp;pr[op.<span class="hljs-built_in">top</span>()]&gt;=pr[c]) <span class="hljs-built_in">eval</span>();<span class="hljs-comment">//算完前面的</span><br>            op.<span class="hljs-built_in">push</span>(c);<br>        &#125;<br>    &#125;   <br>    <span class="hljs-keyword">while</span>(op.<span class="hljs-built_in">size</span>()) <span class="hljs-built_in">eval</span>();<span class="hljs-comment">//接下来就没有异常情况了，可以直接算了</span><br>    cout&lt;&lt;num.<span class="hljs-built_in">top</span>()&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>栈和队列书写思路对比：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>;<br><span class="hljs-comment">// *********栈</span><br><span class="hljs-type">int</span> stk[N],tt;<span class="hljs-comment">//tt表示栈顶(是指向一个元素的)</span><br><br><span class="hljs-comment">// 插入</span><br>stk[++tt]=x;<br><br><span class="hljs-comment">// 弹出</span><br>tt--;<br><br><span class="hljs-comment">//判断栈是否为空</span><br><span class="hljs-keyword">if</span>(tt&gt;<span class="hljs-number">0</span>) <span class="hljs-keyword">not</span> empty<br><span class="hljs-keyword">else</span> empty<br><br><span class="hljs-comment">//栈顶</span><br>stk[tt];<br><br><span class="hljs-comment">//*********队列</span><br><span class="hljs-type">int</span> q[N],hh,tt=<span class="hljs-number">-1</span>;<span class="hljs-comment">//hh为队头，tt为队尾(包含元素的),hh为队头(同样包含元素),队头在低位，队尾在高位</span><br><br><span class="hljs-comment">//插入</span><br>q[++tt]=x;<br><br><span class="hljs-comment">//弹出</span><br>hh++;<br><br><span class="hljs-comment">//判断队列是否为空</span><br><span class="hljs-keyword">if</span>(hh&lt;=tt) <span class="hljs-keyword">not</span> empty<br><span class="hljs-keyword">else</span> empty<br><br><span class="hljs-comment">//取出队头元素</span><br>q[hh]<br>    <br><span class="hljs-comment">//取出队尾元素</span><br>q[tt]<br></code></pre></td></tr></table></figure>
<p>模拟队列操作代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> m;<br><span class="hljs-type">int</span> q[N], hh, tt = <span class="hljs-number">-1</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; m;<br><br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        string op;<br>        <span class="hljs-type">int</span> x;<br><br>        cin &gt;&gt; op;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&quot;push&quot;</span>)<br>        &#123;<br>            cin &gt;&gt; x;<br>            q[ ++ tt] = x;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&quot;pop&quot;</span>) hh ++ ;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&quot;empty&quot;</span>) cout &lt;&lt; (hh &lt;= tt ? <span class="hljs-string">&quot;NO&quot;</span> : <span class="hljs-string">&quot;YES&quot;</span>) &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span> cout &lt;&lt; q[hh] &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><p>若<code>a[x]&gt;=a[y]</code>且<code>x&gt;y</code>，则<code>a[x]</code>可以被替换为y，故如果用stk栈结构来存储一个数前面的数：</p>
<p>若当前数下标为5，目前栈内的数下标为1~4，由上述说法可知，左侧标的三个红色圈的数都是无效的，故可被替换为新的数，最终形成红色的线，实质上是维持栈中元素随着下标单调递增，不能出现下折或者直线的情况</p>
<p><img src="/2022/12/14/algorithm/image-20230116154159337.png" alt="image-20230116154159337" style="zoom:80%;"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> stk[N], tt;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">while</span> (n -- )<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>        <span class="hljs-keyword">while</span> (tt &amp;&amp; stk[tt] &gt;= x) tt -- ;<span class="hljs-comment">//若队列不为空，且栈顶大于等于x，栈顶将不会再被用到</span><br>        <span class="hljs-keyword">if</span> (!tt) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1 &quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, stk[tt]);<span class="hljs-comment">//若找到stk[tt]&lt;x,满足单调栈</span><br>        stk[ ++ tt] = x;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h2><h3 id="滑动队列"><a href="#滑动队列" class="headerlink" title="滑动队列"></a>滑动队列</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">10000010</span>;<br><span class="hljs-type">int</span> a[N],q[N];<br><span class="hljs-type">int</span> n,k;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>    &#125;<br>    <span class="hljs-type">int</span> hh=<span class="hljs-number">0</span>,tt=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-comment">//i-k+1~i是当前队列</span><br>        <span class="hljs-keyword">if</span>(hh&lt;=tt&amp;&amp;i-k+<span class="hljs-number">1</span>&gt;q[hh]) hh++;<span class="hljs-comment">//首先踢掉不在队列中的</span><br>        <span class="hljs-keyword">while</span>(hh&lt;=tt&amp;&amp;a[q[tt]]&gt;=a[i]) tt--;<span class="hljs-comment">//保持队头到队尾递增</span><br>        q[++tt]=i;<br>        <span class="hljs-comment">//前面一截是不够队列的</span><br>        <span class="hljs-keyword">if</span>(i&gt;=k<span class="hljs-number">-1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,a[q[hh]]);<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    hh=<span class="hljs-number">0</span>,tt=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>         <span class="hljs-keyword">if</span>(hh&lt;=tt&amp;&amp;i-k+<span class="hljs-number">1</span>&gt;q[hh]) hh++;<br>         <span class="hljs-keyword">while</span>(hh&lt;=tt&amp;&amp;a[q[tt]]&lt;=a[i]) tt--;<br>         q[++tt]=i;<br>         <span class="hljs-keyword">if</span>(i&gt;=k<span class="hljs-number">-1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,a[q[hh]]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><p>前后缀等长相等</p>
<p><code>p[1,j]=p[i-j+1,i]</code></p>
<p>首先明确前后缀的含义，然后明确next数组的含义</p>
<p>注意总是用i和j+1进行匹配</p>
<p><img src="/2022/12/14/algorithm/image-20230831165116969.png" alt="image-20230831165116969" style="zoom:50%;"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e6</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">char</span> p[N],s[N];<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> ne[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;p+<span class="hljs-number">1</span>&gt;&gt;m&gt;&gt;s+<span class="hljs-number">1</span>;<span class="hljs-comment">//习惯从1开始</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>,j=<span class="hljs-number">0</span>;i&lt;=n;i++)<span class="hljs-comment">//i从2开始是因为如果第一位不匹配无法再退了,该循环计算ne[i]</span><br>    &#123;<br>        <span class="hljs-keyword">while</span>(j&amp;&amp;p[i]!=p[j+<span class="hljs-number">1</span>]) j=ne[j];<span class="hljs-comment">//如果j还有退路,即&gt;0,且需要退,则退</span><br>        <span class="hljs-keyword">if</span>(p[i]==p[j+<span class="hljs-number">1</span>]) j++;<span class="hljs-comment">//若匹配上了</span><br>        ne[i]=j;<span class="hljs-comment">//记录</span><br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>,j=<span class="hljs-number">0</span>;i&lt;=m;i++)<span class="hljs-comment">//进行匹配,从待匹配串的第一位开始匹配</span><br>    &#123;<br>        <span class="hljs-keyword">while</span>(j&amp;&amp;s[i]!=p[j+<span class="hljs-number">1</span>]) j=ne[j];<br>        <span class="hljs-keyword">if</span>(s[i]==p[j+<span class="hljs-number">1</span>]) j++;<br>        <span class="hljs-keyword">if</span>(j==n)<br>        &#123;<br>            cout&lt;&lt;i-n&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h2><blockquote>
<p>Trie：高效地存储和查找字符串，是一个集合的数据结构</p>
</blockquote>
<p>Trie树中有个二维数组 son[N][26]，表示当前结点的儿子，如果没有的话，可以等于++idx。Trie树本质上是一颗多叉树，对于字母而言最多有26个子结点。所以这个数组包含了两条信息。比如：son[1][0]=2表示1结点的一个值为a的子结点为结点2;如果son[1][0] = 0，则意味着没有值为a子结点。这里的son[N]/[26]相当于链表中的ne[N]。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">char</span> str[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>; <span class="hljs-comment">//从根结点开始遍历</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; str[i]; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> u =str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (!son[p][u]) son[p][u] = ++ idx; <span class="hljs-comment">//没有该子结点就创建一个</span><br>        p = son[p][u]; <span class="hljs-comment">//走到p的子结点</span><br>    &#125;<br>    cnt[p] ++; <span class="hljs-comment">// cnt相当于链表中的e[idx]</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="Trie树字符串统计"><a href="#Trie树字符串统计" class="headerlink" title="Trie树字符串统计"></a>Trie树字符串统计</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> son[N][<span class="hljs-number">26</span>],cnt[N],idx;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">char</span> str[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">char</span>*str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;str[i];i++)<br>    &#123;<br>        <span class="hljs-type">int</span> u=str[i]-<span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(son[p][u]==<span class="hljs-number">0</span>) son[p][u]=++idx;<br>        p=son[p][u];<br>    &#125;<br>    cnt[p]++;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">char</span>*str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;str[i];i++)<br>    &#123;<br>        <span class="hljs-type">int</span> u=str[i]-<span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(son[p][u]==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        p=son[p][u];<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt[p];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">char</span> op[<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%s&quot;</span>,op,str);<br>        <span class="hljs-keyword">if</span>(*op==<span class="hljs-string">&#x27;I&#x27;</span>) <span class="hljs-built_in">insert</span>(str);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">query</span>(str));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="最大异或对"><a href="#最大异或对" class="headerlink" title="最大异或对"></a>最大异或对</h3><p>有点贪心的味道</p>
<p>这道题的启示是：字典树不单单可以高效存储和查找字符串集合,还可以存储二进制数字<br>思路:将每个数以二进制方式存入字典树,找的时候从最高位去找有无该位的异.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>,M=<span class="hljs-number">3100010</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> son[M][<span class="hljs-number">2</span>],idx,a[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">30</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>    &#123;<br>        <span class="hljs-type">int</span> u=x&gt;&gt;i&amp;<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(!son[p][u]) son[p][u]=++idx;<br>        p=son[p][u];<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p=<span class="hljs-number">0</span>,res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">30</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>    &#123;<br>        <span class="hljs-type">int</span> u=x&gt;&gt;i&amp;<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(son[p][!u])<br>        &#123;<br>            res+=<span class="hljs-number">1</span>&lt;&lt;i;<br>            p=son[p][!u];<br>        &#125;<span class="hljs-keyword">else</span> p=son[p][u];<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        cin&gt;&gt;a[i];<br>        <span class="hljs-built_in">insert</span>(a[i]);<br>    &#125;<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        res=<span class="hljs-built_in">max</span>(res,<span class="hljs-built_in">search</span>(a[i]));<br>    &#125;<br>    cout&lt;&lt;res;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><p>并查集：</p>
<ol>
<li>将两个集合合并</li>
<li>询问两个元素是否在一个集合中</li>
</ol>
<p>基本原理：每个集合用一棵树来表示。树根的编号就是整个集合的编号。每个节点存储他的父节点，<code>p[x]</code>表示x的父节点</p>
<p>问题一：如何判断树根：<code>if(p[x]==x)</code></p>
<p>问题二：如何求x的集合编号：<code>while(p[x]!=x) x=p[x];</code></p>
<p>问题三：如何合并两个集合：假设p[x]是x的集合编号，p[y]是y的集合编号。合并：<code>p[x]=y</code></p>
<p>近乎<code>O(1)</code>的效率完成上述两个操作</p>
<p>优化——路径压缩：对问题二找根的过程进行优化，一旦往上走的过程中找到根节点，则把路径上所有节点的的根节点指向根（这样就能实现<code>O(1)</code>）</p>
<h3 id="合并集合"><a href="#合并集合" class="headerlink" title="合并集合"></a>合并集合</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> p[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><span class="hljs-comment">//寻找x点的根节点</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(p[x]!=x) p[x]=<span class="hljs-built_in">find</span>(p[x]);<span class="hljs-comment">//路径压缩</span><br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) p[i]=i;<span class="hljs-comment">//开始时每个点都是独立的</span><br>    <span class="hljs-type">char</span> op[<span class="hljs-number">2</span>];<br>    <span class="hljs-type">int</span> a,b;<br>    <span class="hljs-keyword">while</span>(m--)<span class="hljs-comment">//进行m个操作</span><br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%d%d&quot;</span>,op,&amp;a,&amp;b);<br>        <span class="hljs-keyword">if</span>(*op==<span class="hljs-string">&#x27;M&#x27;</span>) p[<span class="hljs-built_in">find</span>(a)]=<span class="hljs-built_in">find</span>(b);<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(a)==<span class="hljs-built_in">find</span>(b)) cout&lt;&lt;<span class="hljs-string">&quot;Yes\n&quot;</span>;<br>            <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&quot;No\n&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="连通块中点的数量"><a href="#连通块中点的数量" class="headerlink" title="连通块中点的数量"></a>连通块中点的数量</h3><p>与上题类似，不同之处需要记录数量，这里规定只有根节点的数量属性是有效的</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> p[N],cnt[N];<span class="hljs-comment">//cnt记录数量，只对根节点有效</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(p[x]!=x) p[x]=<span class="hljs-built_in">find</span>(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        p[i]=i;<br>        cnt[i]=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        string op;<br>        <span class="hljs-type">int</span> a,b;<br>        cin&gt;&gt;op;<br><br>        <span class="hljs-keyword">if</span>(op==<span class="hljs-string">&quot;C&quot;</span>)<span class="hljs-comment">//连通</span><br>        &#123;<br>            cin&gt;&gt;a&gt;&gt;b;<br>            a=<span class="hljs-built_in">find</span>(a),b=<span class="hljs-built_in">find</span>(b);<br>            <span class="hljs-keyword">if</span>(a!=b)<br>            &#123;<br>                p[a]=b;<br>                cnt[b]+=cnt[a];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op==<span class="hljs-string">&quot;Q1&quot;</span>)<span class="hljs-comment">//查询是否连通</span><br>        &#123;<br>            cin&gt;&gt;a&gt;&gt;b;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(a)==<span class="hljs-built_in">find</span>(b)) cout&lt;&lt;<span class="hljs-string">&quot;Yes\n&quot;</span>;<br>            <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&quot;No\n&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//查询连通集</span><br>            cin&gt;&gt;a;<br>            cout&lt;&lt;cnt[<span class="hljs-built_in">find</span>(a)]&lt;&lt;endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="食物链"><a href="#食物链" class="headerlink" title="食物链"></a>食物链</h3><blockquote>
<p>find(x)有两个功能： 1 路径压缩, 2 更新 d[x]<br>假设有一棵树 a -&gt; b -&gt; c -&gt; d， 根节点为 d。d[b]一开始等于 b、c 之间的距离，再执行完路径压缩命令之后，d[b] 等于b、d之间的距离。 d[a] += d[b]: 为了确保d[a]等于 节点a、d的距离，d[b]必须等于b 、d的距离，所以要先调用find(b)更新d[b]， 同时p[x] = find(b)会改变p[x]的值，结果就会变成d[a] += d[d],所以先用一个变量把p[a]的值存起来。 关键就是既要先执行find(p[x])， 又要让d[x] += d[p[x]]中p[x]的值保持不变，所以代码还可以这么写</p>
</blockquote>
<p>这道题的插入方式需要注意，且使用距离来体现与根节点的关系，d%3的情况如下：</p>
<ul>
<li>=0，则与根节点同类型</li>
<li>=1，一层节点，可以吃掉根节点，可以被二层节点吃</li>
<li>=2，二层节点，可以吃掉一层节点，可以被零层节点（根节点同类型）吃</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">50010</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> p[N],d[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(p[x]!=x)<br>    &#123;<br>        <span class="hljs-type">int</span> t=<span class="hljs-built_in">find</span>(p[x]);<br>        d[x]+=d[p[x]];<br>        p[x]=t;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) p[i]=i;<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        <span class="hljs-type">int</span> t,x,y;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;t,&amp;x,&amp;y);<br>        <span class="hljs-keyword">if</span>(x&gt;n||y&gt;n) res++;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-type">int</span> px=<span class="hljs-built_in">find</span>(x),py=<span class="hljs-built_in">find</span>(y);<span class="hljs-comment">//找到x和y的根节点</span><br>            <span class="hljs-keyword">if</span>(t==<span class="hljs-number">1</span>)<span class="hljs-comment">//两者同类</span><br>            &#123;<br>                <span class="hljs-comment">//若相同根，说明之前构造过，则若不同类(d[x]-d[y]%3!=0)</span><br>                <span class="hljs-comment">//则是非法的</span><br>                <span class="hljs-keyword">if</span>(px==py&amp;&amp;(d[x]-d[y])%<span class="hljs-number">3</span>) res++;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(px!=py)<br>                &#123;<span class="hljs-comment">//若不同根，说明这是第一次，需要进行构造</span><br>                    p[px]=py;<br>                    d[px]=d[y]-d[x];<span class="hljs-comment">//需要弥补x-&gt;px-&gt;y的第二段的长度d[x]+d[px]=d[y]</span><br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//为2的情况，x可以吃y</span><br>            <span class="hljs-comment">//若px==py，说明之前构造过，则若不是x吃y的关系((d[x]-d[y]-1)%3)=0</span><br>            <span class="hljs-comment">//则是非法的</span><br>                <span class="hljs-keyword">if</span>(px==py&amp;&amp;(d[x]-d[y]<span class="hljs-number">-1</span>)%<span class="hljs-number">3</span>) res++;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(px!=py)<br>                &#123;<span class="hljs-comment">//若是不同根，说明这是第一次，需要进行构造</span><br>                    p[px]=py;<br>                    <span class="hljs-comment">//满足d[y]+1=d[x]+d[px],即将x的根节点作为y的根节点的子节点之后</span><br>                    <span class="hljs-comment">//还要满足吃的关系（x比y下一层）</span><br>                    d[px]=d[y]+<span class="hljs-number">1</span>-d[x];<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>如何手写一个堆？</p>
<ol>
<li>插入一个数 </li>
<li>求集合当中的最小值</li>
<li>删除最小值</li>
<li>删除任意一个元素</li>
<li>修改任意一个元素</li>
</ol>
<p>堆——完全二叉树，除了最后一排节点都是非空的，最后一排节点从左到右排列</p>
<p>小根堆——每个点都是小于左右儿子的（可知根节点是堆里面的最小值）</p>
<p><img src="/2022/12/14/algorithm/image-20230308233940858.png" alt="image-20230308233940858"></p>
<p>ps:感谢new Bing的搜索支持！</p>
<p>存储方式：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>1(根节点)</th>
<th>2(根节点左儿子)</th>
<th>3(根节点右儿子)</th>
<th>4</th>
<th>5</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
</div>
<p>节点x的左儿子：2x</p>
<p>节点x的右儿子：2x+1</p>
<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//如何手写一个堆？完全二叉树 5个操作</span><br><span class="hljs-comment">//1. 插入一个数         heap[ ++ size] = x; up(size);</span><br><span class="hljs-comment">//2. 求集合中的最小值   heap[1]</span><br><span class="hljs-comment">//3. 删除最小值         heap[1] = heap[size]; size -- ;down(1);</span><br><span class="hljs-comment">//4. 删除任意一个元素   heap[k] = heap[size]; size -- ;up(k); down(k);</span><br><span class="hljs-comment">//5. 修改任意一个元素   heap[k] = x; up(k); down(k);</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> <span class="hljs-type">const</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-comment">//h[i] 表示第i个结点存储的值，i从1开始，2*i是左子节点，2*i + 1是右子节点</span><br><span class="hljs-comment">//size 既表示堆里存储的元素个数，又表示最后一个结点的下标</span><br><span class="hljs-type">int</span> h[N], siz; <span class="hljs-comment">//堆有两个变量h[N]，size; 这里的size和文件里有冲突，只能改成siz了</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t = u;<span class="hljs-comment">//t存储三个结点中存在的最小的结点的下标，初始化为当前结点u</span><br>    <span class="hljs-keyword">if</span> (u * <span class="hljs-number">2</span> &lt;= siz &amp;&amp; h[u * <span class="hljs-number">2</span>] &lt; h[t]) t = u * <span class="hljs-number">2</span>; <span class="hljs-comment">// 左子节点存在并且小于当前结点，更新t的下标</span><br>    <span class="hljs-keyword">if</span> (u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt;= siz &amp;&amp; h[u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] &lt; h[t]) t = u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<span class="hljs-comment">//右子节点存在并且小于当前结点，更新t的下标</span><br>    <span class="hljs-keyword">if</span> (t != u)<span class="hljs-comment">//如果t==u意味着不用变动，u就是三个结点中拥有最小值的结点下标，否则交换数值</span><br>    &#123;<br>        <span class="hljs-built_in">swap</span>(h[t], h[u]);<br>        <span class="hljs-built_in">down</span>(t); <span class="hljs-comment">//交换数值后，t这个结点存储原本u的值，u存储存储t的值（三个数中的最小值）。u不用调整了，但t情况不明，可能需要调整。直到它比左右子节点都小</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;h[i]); <br>    siz = n; <span class="hljs-comment">//初始化size,表示堆里有n 个元素</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n / <span class="hljs-number">2</span>; i; i --) <span class="hljs-built_in">down</span>(i); <span class="hljs-comment">//把堆初始化成小根堆，从二叉树的倒数第二行开始，把数字大的下沉</span><br>	<span class="hljs-comment">//这里无需对所有节点进行down操作，只需要对前n/2个节点进行即可，叶子节点无需再进行down了</span><br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, h[<span class="hljs-number">1</span>]);<br>        h[<span class="hljs-number">1</span>] = h[siz];<br>        siz --;<br>        <span class="hljs-built_in">down</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="模拟堆"><a href="#模拟堆" class="headerlink" title="模拟堆"></a>模拟堆</h3><p>由于题目要求修改和删除第k个插入的，所以要加入存储映射，为了便于在up、down过程中修改映射，需要两个数组</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> h[N],ph[N],hp[N],cnt;<br><span class="hljs-comment">//ph[i]=j表示第i个插入的数在堆中下标为j</span><br><span class="hljs-comment">//hp[i]=j表示堆中下标为i的数是第j个插入的</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heap_swap</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">swap</span>(ph[hp[a]],ph[hp[b]]);<span class="hljs-comment">//交换a、b下标，需要修改ph</span><br>    <span class="hljs-built_in">swap</span>(hp[a],hp[b]);<span class="hljs-comment">//因为下标改了，也需要修改hp</span><br>    <span class="hljs-built_in">swap</span>(h[a],h[b]);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t=u;<br>    <span class="hljs-keyword">if</span>(u*<span class="hljs-number">2</span>&lt;=cnt&amp;&amp;h[u*<span class="hljs-number">2</span>]&lt;h[t]) t=u*<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(u*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>&lt;=cnt&amp;&amp;h[u*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>]&lt;h[t]) t=u*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(u!=t)<br>    &#123;<br>        <span class="hljs-built_in">heap_swap</span>(u,t);<br>        <span class="hljs-built_in">down</span>(t);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(u/<span class="hljs-number">2</span>&amp;&amp;h[u]&lt;h[u/<span class="hljs-number">2</span>])<span class="hljs-comment">//有根节点且根节点值没有满足最小堆要求</span><br>    &#123;<br>        <span class="hljs-built_in">heap_swap</span>(u,u/<span class="hljs-number">2</span>);<br>        u&gt;&gt;=<span class="hljs-number">1</span>;<span class="hljs-comment">//u=u/2;</span><br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        <span class="hljs-type">char</span> op[<span class="hljs-number">5</span>];<br>        <span class="hljs-type">int</span> k,x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,op);<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(op,<span class="hljs-string">&quot;I&quot;</span>))<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>            cnt++;<br>            m++;<span class="hljs-comment">//用m作为下标，因为cnt会减少而m不会减少</span><br>            ph[m]=cnt,hp[cnt]=m;<span class="hljs-comment">//cnt为在堆中下标，而m为第几个插入的数</span><br>            h[cnt]=x;<span class="hljs-comment">//插在最后的位置，然后向上up</span><br>            <span class="hljs-built_in">up</span>(cnt);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(op,<span class="hljs-string">&quot;PM&quot;</span>)) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,h[<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(op,<span class="hljs-string">&quot;DM&quot;</span>))<br>        &#123;<br>            <span class="hljs-built_in">heap_swap</span>(<span class="hljs-number">1</span>,cnt);<br>            cnt--;<br>            <span class="hljs-built_in">down</span>(<span class="hljs-number">1</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(op,<span class="hljs-string">&quot;D&quot;</span>))<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;k);<br>            k=ph[k];<br>            <span class="hljs-built_in">heap_swap</span>(k,cnt);<br>            cnt--;<br>            <span class="hljs-built_in">up</span>(k);<br>            <span class="hljs-built_in">down</span>(k);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;k,&amp;x);<br>            k=ph[k];<br>            h[k]=x;<br>            <span class="hljs-built_in">up</span>(k);<br>            <span class="hljs-built_in">down</span>(k);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><h3 id="模拟散列表"><a href="#模拟散列表" class="headerlink" title="模拟散列表"></a>模拟散列表</h3><p>求质数的方法：</p>
<p><img src="/2022/12/14/algorithm/image-20230309152402474.png" alt="image-20230309152402474"></p>
<p>关于哈希函数对应的数组的大小：如果用拉链法，则和数多少差不多即可，如果用开放寻址法，则设置为该数的两倍</p>
<p>开放寻址法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">200003</span>,null=<span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//设置长度为两倍，设置空标志</span><br><span class="hljs-comment">//注意null四个3f，memset对字节做的</span><br><span class="hljs-type">int</span> h[N];<span class="hljs-comment">//开放寻址法类似于找坑位</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><span class="hljs-comment">//寻找</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t=(x%N+N)%N;<br>    <span class="hljs-keyword">while</span>(h[t]!=null&amp;&amp;h[t]!=x)<span class="hljs-comment">//当前坑位被占，需要向后寻找</span><br>    &#123;<br>        t++;<br>        <span class="hljs-keyword">if</span>(t==N) t=<span class="hljs-number">0</span>;<span class="hljs-comment">//循环查找</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> t;<span class="hljs-comment">//不一定找对！</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span> h);<span class="hljs-comment">//设置空标志位</span><br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    string op;<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        cin&gt;&gt;op&gt;&gt;x;<br>        <span class="hljs-keyword">if</span>(op==<span class="hljs-string">&quot;I&quot;</span>) h[<span class="hljs-built_in">find</span>(x)]=x;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(h[<span class="hljs-built_in">find</span>(x)]==null) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>拉链法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100003</span>;<br><span class="hljs-type">int</span> h[N],e[N],ne[N],idx;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><span class="hljs-comment">//h数组类似于head指针的数组</span></span><br><span class="hljs-function"></span>&#123;<span class="hljs-comment">//头插法</span><br>    <span class="hljs-type">int</span> k=(x%N+N)%N;<span class="hljs-comment">//哈希函数值,需要处理负数</span><br>    e[idx]=x;<br>    ne[idx]=h[k];<br>    h[k]=idx++;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> k=(x%N+N)%N;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=h[k];i!=<span class="hljs-number">-1</span>;i=ne[i])<br>    &#123;<br>        <span class="hljs-keyword">if</span>(e[i]==x)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> h);<span class="hljs-comment">//类似于单链表init的时候要将head初始化为-1</span><br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        string op;<br>        <span class="hljs-type">int</span> x;<br>        cin&gt;&gt;op&gt;&gt;x;<br>        <span class="hljs-keyword">if</span>(op==<span class="hljs-string">&quot;I&quot;</span>) <span class="hljs-built_in">insert</span>(x);<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(x)) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h3><p>在字符串哈希中，我们没有处理冲突，靠经验定理来保证不冲突，将字符串看做是p进制的数</p>
<p>根据经验定理，p取131或者1331，得到的数模上2的64次方，可保证完全散列，由于数据类型<code>unsigned int</code>的值域恰好为2的64次方，故可以直接使用<code>unsigned int</code>存储，溢出即为取模</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ULL;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>,P=<span class="hljs-number">131</span>;<br><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">char</span> str[N];<br>ULL h[N],p[N];<span class="hljs-comment">//p数组存储每一位上的基本单元</span><br><span class="hljs-function">ULL <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> h[r]-h[l<span class="hljs-number">-1</span>]*p[r-l+<span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,str+<span class="hljs-number">1</span>);<br>    <br>    p[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        h[i]=h[i<span class="hljs-number">-1</span>]*P+str[i];<span class="hljs-comment">//直接用的ASCII码</span><br>        p[i]=p[i<span class="hljs-number">-1</span>]*P;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        <span class="hljs-type">int</span> l1,r1,l2,r2;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>,&amp;l1,&amp;r1,&amp;l2,&amp;r2);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">get</span>(l1,r1)==<span class="hljs-built_in">get</span>(l2,r2))<br>        &#123;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="搜索与图论"><a href="#搜索与图论" class="headerlink" title="搜索与图论"></a>搜索与图论</h1><p>1.DFS：递归结束条件的选择+状态标记+递归后的恢复<br>2.BFS：模拟队列 q[N], d[N] 使用d数组标记状态<br>3.搜索：解空间的搜索往往需要dfs+剪枝，bfs用来找最短路<br>4.树和图的存储：邻接表 h[N], e[N], ne[N], idx<br>5.树和图的遍历：遍历不用像搜索解空间一样递归后恢复，只用遍历一次即可</p>
<p>点的数量和边的数量，若点的数量的平方与边的数量大致相同，则为稠密图</p>
<p>邻接矩阵去重边用<code>min</code>，邻接表里面无需去重边</p>
<p>无向图存储的时候边的数量要开成给定边数量的一倍大小</p>
<h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><h3 id="排列数字"><a href="#排列数字" class="headerlink" title="排列数字"></a>排列数字</h3><p>典型排列树，但是需要按照字典序来做，下面这种做法会有些不同</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> x[N];<br><span class="hljs-type">int</span> n;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-type">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t==n)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) cout&lt;&lt;x[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=t;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">swap</span>(x[i],x[t]);<br>        <span class="hljs-built_in">DFS</span>(t+<span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">swap</span>(x[i],x[t]);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) x[i]=i;<br>    <span class="hljs-built_in">DFS</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>acwing提供的做法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> path[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> state)</span><span class="hljs-comment">//用整型数state记录每个数的使用情况</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(u==n)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,path[i]);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!(state&gt;&gt;i&amp;<span class="hljs-number">1</span>))<span class="hljs-comment">//检查某个数是否被用过</span><br>        &#123;<br>            path[u]=i+<span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">dfs</span>(u+<span class="hljs-number">1</span>,state+(<span class="hljs-number">1</span>&lt;&lt;i));<span class="hljs-comment">//注意这里并没有改变源state</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="n皇后问题"><a href="#n皇后问题" class="headerlink" title="n皇后问题"></a>n皇后问题</h3><p>排列树，dg和udg用来判断是否在对角线上有冲突，主对角线检查下标y-x+n是否冲突，副对角线检查x+y是否冲突</p>
<p>同时由于对角线数量是n的两倍左右，N数量要开两倍</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> x[N],dg[N],udg[N],n;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-type">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t&gt;n)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(j==x[i]) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Q&quot;</span>);<br>                <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;.&quot;</span>);<br>            &#125;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=t;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">swap</span>(x[i],x[t]);<br>        <span class="hljs-keyword">if</span>(!dg[t+x[t]]&amp;&amp;!udg[n+x[t]-t])<br>        &#123;<br>            dg[t+x[t]]=udg[n+x[t]-t]=<span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">backtrack</span>(t+<span class="hljs-number">1</span>);<br>            dg[t+x[t]]=udg[n+x[t]-t]=<span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-built_in">swap</span>(x[i],x[t]);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        x[i]=i;<br>    &#125;<br>    <span class="hljs-built_in">backtrack</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>acwing解法，差不多</p>
<h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h2><p>分支限界框架</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++">queue Q;<br><span class="hljs-type">int</span> bestw;<br>Node k=<span class="hljs-keyword">new</span> <span class="hljs-built_in">node</span>();<span class="hljs-comment">//初始化根节点</span><br>set k;<span class="hljs-comment">//设置k,假设k有属性cw,level</span><br>Q.<span class="hljs-built_in">push</span>(k);<br><span class="hljs-keyword">while</span>(!Q.<span class="hljs-built_in">empty</span>())<br>&#123;<br>    Node cn = Q.<span class="hljs-built_in">pop</span>();<br>    <span class="hljs-type">int</span> level=cn.level;<br>    <span class="hljs-keyword">if</span>(level&gt;n)&#123;<br>        <span class="hljs-built_in">print</span>();<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> node:cn的后继)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(约束函数/限界函数)<br>        &#123;<br>            Node tmp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>();<br>            set tmp;<span class="hljs-comment">//设置tmp参数</span><br>            Q.<span class="hljs-built_in">push</span>()<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>BFS相对而言更简单，通常无需考虑level和一些剪枝</p>
<h3 id="走迷宫"><a href="#走迷宫" class="headerlink" title="走迷宫"></a>走迷宫</h3><p>首先用回溯法做了一遍，果然超时了，回溯剪枝不够强大</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">105</span>;<br><span class="hljs-type">int</span> a[N][N];<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> cw,cbest=<span class="hljs-number">10000</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x==n&amp;&amp;y==m)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(cw&lt;cbest) cbest=cw;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(cw&gt;cbest) <span class="hljs-keyword">return</span>;<br>    a[x][y]=<span class="hljs-number">1</span>;<br>    cw++;<br>    <span class="hljs-keyword">if</span>(!a[x][y<span class="hljs-number">-1</span>]) <span class="hljs-built_in">dfs</span>(x,y<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">if</span>(!a[x][y+<span class="hljs-number">1</span>]) <span class="hljs-built_in">dfs</span>(x,y+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(!a[x+<span class="hljs-number">1</span>][y]) <span class="hljs-built_in">dfs</span>(x+<span class="hljs-number">1</span>,y);<br>    <span class="hljs-keyword">if</span>(!a[x<span class="hljs-number">-1</span>][y]) <span class="hljs-built_in">dfs</span>(x<span class="hljs-number">-1</span>,y);<br>    a[x][y]=<span class="hljs-number">0</span>;<br>    cw--;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-built_in">memset</span>(a,<span class="hljs-number">1</span>,<span class="hljs-keyword">sizeof</span> a);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>        &#123;<br>            cin&gt;&gt;a[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>    cout&lt;&lt;cbest;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>遂使用可爱的BFS！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">110</span>;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; PII;<br><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> g[N][N],d[N][N];<span class="hljs-comment">//g数组记录地图,d数组记录走到此处的距离</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    queue&lt;PII&gt; q;<br>    <span class="hljs-built_in">memset</span>(d,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(d));<br>    d[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<span class="hljs-comment">//初始化根节点</span><br>    q.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;);<br>    <span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;,dy[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;;<span class="hljs-comment">//小技巧</span><br>    <br>    <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>())<span class="hljs-comment">//若队列不为空</span><br>    &#123;<br>        <span class="hljs-keyword">auto</span> t=q.<span class="hljs-built_in">front</span>();<span class="hljs-comment">//取队列元素</span><br>        q.<span class="hljs-built_in">pop</span>();<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<span class="hljs-comment">//扩展</span><br>        &#123;<br>            <span class="hljs-type">int</span> x=t.first+dx[i];<br>            <span class="hljs-type">int</span> y=t.second+dy[i];<br>            <br>            <span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">0</span>&amp;&amp;x&lt;n&amp;&amp;y&gt;=<span class="hljs-number">0</span>&amp;&amp;y&lt;m&amp;&amp;g[x][y]==<span class="hljs-number">0</span>&amp;&amp;d[x][y]==<span class="hljs-number">-1</span>)<br>            &#123;<br>                d[x][y]=d[t.first][t.second]+<span class="hljs-number">1</span>;<span class="hljs-comment">//配置扩展节点</span><br>                q.<span class="hljs-built_in">push</span>(&#123;x,y&#125;);<span class="hljs-comment">//加入队列</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> d[n<span class="hljs-number">-1</span>][m<span class="hljs-number">-1</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)<br>        &#123;<br>            cin&gt;&gt;g[i][j];<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-built_in">bfs</span>()&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="八数码"><a href="#八数码" class="headerlink" title="八数码"></a>八数码</h3><p>主要难点在于状态的表示和转换上</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">(string state)</span></span><br><span class="hljs-function"></span>&#123;<br>    queue&lt;string&gt; q;<br>    unordered_map&lt;string,<span class="hljs-type">int</span>&gt; d;<br>    q.<span class="hljs-built_in">push</span>(state);<span class="hljs-comment">//初始根节点</span><br>    d[state]=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;,dy[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;;<span class="hljs-comment">//移动的小tip</span><br>    <br>    string end=<span class="hljs-string">&quot;12345678x&quot;</span>;<span class="hljs-comment">//终结状态</span><br>    <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>())<span class="hljs-comment">//若队列不为空</span><br>    &#123;<br>        <span class="hljs-keyword">auto</span> t=q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <br>        <span class="hljs-keyword">if</span>(t==end) <span class="hljs-keyword">return</span> d[t];<span class="hljs-comment">//取出后进行判断</span><br>        <br>        <span class="hljs-type">int</span> distance=d[t];<span class="hljs-comment">//取节点距离方便后面扩展</span><br>        <span class="hljs-type">int</span> k=t.<span class="hljs-built_in">find</span>(<span class="hljs-string">&#x27;x&#x27;</span>);<span class="hljs-comment">//方便修改和表示状态</span><br>        <br>        <span class="hljs-type">int</span> x=k/<span class="hljs-number">3</span>,y=k%<span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<br>        &#123;<br>            <span class="hljs-type">int</span> a=x+dx[i],b=y+dy[i];<br>            <span class="hljs-keyword">if</span>(a&gt;=<span class="hljs-number">0</span>&amp;&amp;a&lt;<span class="hljs-number">3</span>&amp;&amp;b&gt;=<span class="hljs-number">0</span>&amp;&amp;b&lt;<span class="hljs-number">3</span>)<br>            &#123;<br>                <span class="hljs-built_in">swap</span>(t[a*<span class="hljs-number">3</span>+b],t[k]);<br>                <span class="hljs-keyword">if</span>(!d.<span class="hljs-built_in">count</span>(t))<br>                &#123;<br>                    d[t]=distance+<span class="hljs-number">1</span>;<br>                    q.<span class="hljs-built_in">push</span>(t);<br>                &#125;<br>                <span class="hljs-built_in">swap</span>(t[<span class="hljs-number">3</span>*a+b],t[k]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">2</span>];<br>    <br>    string state;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">9</span>;i++)<br>    &#123;<br>        cin&gt;&gt;s;<br>        state+=*s;<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-built_in">bfs</span>(state)&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="树与图的深度优先遍历"><a href="#树与图的深度优先遍历" class="headerlink" title="树与图的深度优先遍历"></a>树与图的深度优先遍历</h2><p>树和图的存储方式，树是特殊的图，故介绍图的存储方式</p>
<p>图：有向图、无向图</p>
<p>有向图：a-&gt;b</p>
<p>无向图：a-&gt;b,b-&gt;a</p>
<p>故只需要考虑有向图的存储方式</p>
<ul>
<li>领接矩阵：a-&gt;b，g[a][b]=w，记录边权，不能存储重边（a-&gt;b有多条边，但也可以直接选一条）</li>
<li>邻接表：</li>
</ul>
<p><img src="/2022/12/14/algorithm/image-20230311111455881.png" alt="image-20230311111455881" style="zoom:50%;"><img src="/2022/12/14/algorithm/image-20230311111508913.png" alt="image-20230311111508913" style="zoom:50%;"></p>
<p>（数组建立邻接表） 树/图的dfs<br>//邻接表</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> h[N], e[N * <span class="hljs-number">2</span>], ne[N * <span class="hljs-number">2</span>], idx;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx++;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> h);<br>&#125;<br></code></pre></td></tr></table></figure>
<p>树/图的bfs模板</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 需要标记数组st[N],  遍历节点的每个相邻的便</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> </span>&#123;<span class="hljs-comment">//搜索节点u对应的节点</span><br>    st[u] = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 标记一下，记录为已经被搜索过了，下面进行搜索过程</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; i != <span class="hljs-number">-1</span>; i = ne[i]) &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (!st[j]) &#123;<br>            <span class="hljs-built_in">dfs</span>(j);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="树的重心"><a href="#树的重心" class="headerlink" title="树的重心"></a>树的重心</h3><p>本题的本质是树的dfs， 每次dfs可以确定以u为重心的最大连通块的节点数，并且更新一下ans。</p>
<p>也就是说，dfs并不直接返回答案，而是在每次更新中迭代一次答案。</p>
<p>这样的套路会经常用到，在 树的dfs 题目中</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>,M=<span class="hljs-number">2</span>*N;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> h[N],e[M],ne[M],idx;<br><span class="hljs-type">int</span> ans=N;<br><span class="hljs-type">bool</span> st[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx]=b,ne[idx]=h[a],h[a]=idx++;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br>    st[u]=<span class="hljs-literal">true</span>;<span class="hljs-comment">//标记已经遍历完</span><br>    <span class="hljs-type">int</span> size=<span class="hljs-number">0</span>,sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=h[u];i!=<span class="hljs-number">-1</span>;i=ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> j=e[i];<br>        <span class="hljs-keyword">if</span>(st[j]) <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//如果遍历过，则继续遍历下一个子节点</span><br>        <span class="hljs-type">int</span> s=<span class="hljs-built_in">dfs</span>(j);<span class="hljs-comment">//子节点的子树的节点数量</span><br>        size=<span class="hljs-built_in">max</span>(size,s);<span class="hljs-comment">//计算子树节点的最大值</span><br>        sum+=s;<span class="hljs-comment">//为了计算当前节点所在子树</span><br>    &#125;<br>    size=<span class="hljs-built_in">max</span>(size,n-sum<span class="hljs-number">-1</span>);<span class="hljs-comment">//去掉当前节点后连通块的最大节点数</span><br>    ans=<span class="hljs-built_in">min</span>(ans,size);<span class="hljs-comment">//选择最小值</span><br>    <span class="hljs-keyword">return</span> sum+<span class="hljs-number">1</span>;<span class="hljs-comment">//返回的应该是当前节点和以其为根节点的子树的全部节点的个数</span><br>    <br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> a,b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);<br>        <span class="hljs-built_in">add</span>(a,b),<span class="hljs-built_in">add</span>(b,a);<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="树与图的广度优先遍历"><a href="#树与图的广度优先遍历" class="headerlink" title="树与图的广度优先遍历"></a>树与图的广度优先遍历</h2><h3 id="图中点的层次"><a href="#图中点的层次" class="headerlink" title="图中点的层次"></a>图中点的层次</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> h[N], e[N], ne[N], idx;<br><span class="hljs-type">int</span> d[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> d);<br><br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    d[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    q.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (d[j] == <span class="hljs-number">-1</span>)<br>            &#123;<br>                d[j] = d[t] + <span class="hljs-number">1</span>;<br>                q.<span class="hljs-built_in">push</span>(j);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> d[n];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>        <span class="hljs-built_in">add</span>(a, b);<br>    &#125;<br><br>    cout &lt;&lt; <span class="hljs-built_in">bfs</span>() &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><h3 id="有向图的拓扑序列"><a href="#有向图的拓扑序列" class="headerlink" title="有向图的拓扑序列"></a>有向图的拓扑序列</h3><p>有向图才有拓扑序，并非所有图都有拓扑序列，有向无环图一定存在一个入度为0的点，一定存在拓扑序列</p>
<p>所谓拓扑序列，要求A-&gt;B，A在拓扑序列中要求排列在B前面，所有的边都由前指向后</p>
<p>可所有知入度为0的节点可作为拓扑序列的最前位置，思路如下：</p>
<p><img src="/2022/12/14/algorithm/image-20230311174125677.png" alt="image-20230311174125677" style="zoom: 50%;"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> h[N],e[N],ne[N],idx;<br><span class="hljs-type">int</span> d[N];<span class="hljs-comment">//记录每个节点的入度</span><br><span class="hljs-type">int</span> q[N];<span class="hljs-comment">//队列</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx]=b,ne[idx]=h[a],h[a]=idx++;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">topsort</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> hh=<span class="hljs-number">0</span>,tt=<span class="hljs-number">-1</span>;<span class="hljs-comment">//队头，队尾</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-comment">//首先将所有入度为0的点加入队列</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(!d[i]) q[++tt]=i;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(hh&lt;=tt)<br>    &#123;<br>        <span class="hljs-type">int</span> t=q[hh++];<span class="hljs-comment">//弹出队首元素</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=h[t];i!=<span class="hljs-number">-1</span>;i=ne[i])<span class="hljs-comment">//遍历其在图中相邻节点</span><br>        &#123;<br>            <span class="hljs-type">int</span> j=e[i];<br>            <span class="hljs-keyword">if</span>(--d[j]==<span class="hljs-number">0</span>)<span class="hljs-comment">//如果入度为0，则加入队列中</span><br>            &#123;<br>                q[++tt]=j;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> tt==n<span class="hljs-number">-1</span>;<span class="hljs-comment">//所有节点都入队过</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-type">int</span> a,b;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>    &#123;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        <span class="hljs-built_in">add</span>(a,b);<br>        d[b]++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">topsort</span>()) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,q[i]);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h2><p>稠密图用领接矩阵，稀疏图用邻接链表</p>
<p><img src="/2022/12/14/algorithm/image-20230311205637682.png" alt="image-20230311205637682"></p>
<h3 id="朴素版本"><a href="#朴素版本" class="headerlink" title="朴素版本"></a>朴素版本</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">510</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> g[N][N];<br><span class="hljs-type">int</span> dist[N];<br><span class="hljs-type">bool</span> st[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> t = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>            <span class="hljs-keyword">if</span> (!st[j] &amp;&amp; (t == <span class="hljs-number">-1</span> || dist[t] &gt; dist[j]))<br>                t = j;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>            dist[j] = <span class="hljs-built_in">min</span>(dist[j], dist[t] + g[t][j]);<br><br>        st[t] = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (dist[n] == <span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br><br>    <span class="hljs-built_in">memset</span>(g, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> g);<br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-type">int</span> a, b, c;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);<br><br>        g[a][b] = <span class="hljs-built_in">min</span>(g[a][b], c);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">dijkstra</span>());<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="最小堆优化"><a href="#最小堆优化" class="headerlink" title="最小堆优化"></a>最小堆优化</h3><p>priority_queue的定义方法如下所示：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++">priority_queue&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt;,greater&lt;<span class="hljs-type">int</span>&gt;&gt; q;<br>priority_queue&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt;,less&lt;<span class="hljs-type">int</span>&gt;&gt; q;<br><span class="hljs-comment">//本题使用pair来做，pair的first含义为距离，second含义为编号</span><br>priority_queue&lt;PII,vector&lt;PII&gt;,greater&lt;PII&gt;&gt; heap;<br></code></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; PII;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e6</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> h[N],w[N],e[N],ne[N],idx;<br><span class="hljs-type">int</span> dist[N];<br><span class="hljs-type">bool</span> st[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx]=b,w[idx]=c,ne[idx]=h[a],h[a]=idx++;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span> dist);<span class="hljs-comment">//先设置为无穷大</span><br>    dist[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<span class="hljs-comment">//起点设置为0</span><br>    priority_queue&lt;PII,vector&lt;PII&gt;,greater&lt;PII&gt;&gt; heap;<span class="hljs-comment">//定义最小堆</span><br>    heap.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;);<span class="hljs-comment">//到第一个节点的距离时0</span><br>    <span class="hljs-keyword">while</span>(heap.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> t=heap.<span class="hljs-built_in">top</span>();<span class="hljs-comment">//取堆顶节点</span><br>        heap.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-type">int</span> ver=t.second,distance=t.first;<span class="hljs-comment">//取节点对应的节点编号和距离</span><br>        <span class="hljs-keyword">if</span>(st[ver]) <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//若已经扩展过，则无需扩展</span><br>        st[ver]=<span class="hljs-literal">true</span>;<span class="hljs-comment">//扩展该节点</span><br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=h[ver];i!=<span class="hljs-number">-1</span>;i=ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> j=e[i];<span class="hljs-comment">//取节点编号</span><br>            <span class="hljs-keyword">if</span>(dist[j]&gt;dist[ver]+w[i])<span class="hljs-comment">//更新其后继节点</span><br>            &#123;<br>                dist[j]=dist[ver]+w[i];<br>                heap.<span class="hljs-built_in">push</span>(&#123;dist[j],j&#125;);<span class="hljs-comment">//加入到队列中</span><br>                <span class="hljs-comment">//注意这里没有删掉以前这个节点在队列中的信息，因为是优先队列</span><br>                <span class="hljs-comment">//且每个节点也只能扩展一次</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(dist[n]==<span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-type">int</span> a,b,c;<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);<br>        <span class="hljs-built_in">add</span>(a,b,c);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,<span class="hljs-built_in">dijkstra</span>());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="bellman-ford"><a href="#bellman-ford" class="headerlink" title="bellman-ford"></a>bellman-ford</h2><p>可以处理负权重的情况，可以检测负环但是时间复杂度较高</p>
<blockquote>
<p>串联：由于这个算法的特性决定，每次更新得到的必然是在多考虑 1 条边之后能得到的全局的最短路。而串联指的是一次更新之后考虑了不止一条边：由于使用了松弛，某节点的当前最短路依赖于其所有入度的节点的最短路；假如在代码中使用dist[e.b]=min(dist[e.b],dist[e.a] + e.c);，我们无法保证dist[e.a]是否也在本次循环中被更新，如果被更新了，并且dist[e.b] &gt; dist[e.a] + e.c，那么会造成当前节点在事实上“即考虑了一条从某个节点指向a的边，也考虑了a-&gt;b”，共两条边。而使用dist[e.b]=min(dist[e.b],last[e.a] + e.c);，可以保证a在dist更新后不影响对b的判定，因为后者使用last数组，保存着上一次循环中的dist的值。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">510</span>,M=<span class="hljs-number">10010</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span><br>&#123;<br>    <span class="hljs-type">int</span> a,b,c;<br>&#125;edges[M];<br><br><span class="hljs-type">int</span> n,m,k;<br><span class="hljs-type">int</span> dist[N];<br><span class="hljs-type">int</span> last[N];<span class="hljs-comment">//是用来避免串联影响的</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bellman_ford</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)<br>    &#123;<br>        <span class="hljs-built_in">memcpy</span>(last,dist,<span class="hljs-keyword">sizeof</span> dist);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)<br>        &#123;<br>            <span class="hljs-keyword">auto</span> e=edges[j];<br>            dist[e.b]=<span class="hljs-built_in">min</span>(dist[e.b],last[e.a]+e.c);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;k);<span class="hljs-comment">//n个点m条边k步</span><br>    <span class="hljs-type">int</span> a,b,c;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);<br>        edges[i]=&#123;a,b,c&#125;;<br>    &#125;<br>    <span class="hljs-built_in">bellman_ford</span>();<br>    <br>    <span class="hljs-keyword">if</span>(dist[n]&gt;<span class="hljs-number">0x3f3f3f3f</span>/<span class="hljs-number">2</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;impossible&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,dist[n]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="spfa"><a href="#spfa" class="headerlink" title="spfa"></a>spfa</h2><p>改进bellman_ford算法，dist[v]=dist[w]+w仅当前面的节点w的dist发生变化才更新，具体而言需要用广搜来做</p>
<p>还是基于bellman方程来做的，但是只动态加入前继节点改变的后继：<code>dist[x]=dist[t]+w[i]</code></p>
<h3 id="spfa求最短路"><a href="#spfa求最短路" class="headerlink" title="spfa求最短路"></a>spfa求最短路</h3><p><a href="https://www.acwing.com/solution/content/9306/">AcWing 851. SPFA算法 - AcWing</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e6</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> h[N],ne[N],w[N],e[N],idx;<br><span class="hljs-type">int</span> dist[N];<br><span class="hljs-type">bool</span> st[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx]=b,ne[idx]=h[a],w[idx]=c,h[a]=idx++;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>    st[<span class="hljs-number">1</span>]=<span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> t=q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        st[t]=<span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=h[t];i!=<span class="hljs-number">-1</span>;i=ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> j=e[i];<br>            <span class="hljs-keyword">if</span>(dist[j]&gt;dist[t]+w[i])<br>            &#123;<br>                dist[j]=dist[t]+w[i];<br>                <span class="hljs-keyword">if</span>(!st[j])<br>                &#123;<br>                    q.<span class="hljs-built_in">push</span>(j);<br>                    st[j]=<span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-type">int</span> a,b,c;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);<br>        <span class="hljs-built_in">add</span>(a,b,c);<br>    &#125;<br>    <span class="hljs-type">int</span> t=<span class="hljs-built_in">spfa</span>();<br>    <span class="hljs-keyword">if</span>(t==<span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;impossible&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,t);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="spfa判断负环"><a href="#spfa判断负环" class="headerlink" title="spfa判断负环"></a>spfa判断负环</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2010</span>,M=<span class="hljs-number">10010</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> h[N],ne[M],w[M],e[M],idx;<br><span class="hljs-type">bool</span> st[N];<br><span class="hljs-type">int</span> dist[N],cnt[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx]=b,ne[idx]=h[a],w[idx]=c,h[a]=idx++;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        st[i]=<span class="hljs-literal">true</span>;<br>        q.<span class="hljs-built_in">push</span>(i);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> t=q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        st[t]=<span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=h[t];i!=<span class="hljs-number">-1</span>;i=ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> j=e[i];<br>            <span class="hljs-keyword">if</span>(dist[j]&gt;dist[t]+w[i])<br>            &#123;<br>                dist[j]=dist[t]+w[i];<br>                cnt[j]=cnt[t]+<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(cnt[j]&gt;=n) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">if</span>(!st[j])<br>                &#123;<br>                    st[j]=<span class="hljs-literal">true</span>;<br>                    q.<span class="hljs-built_in">push</span>(j);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-type">int</span> a,b,c;<br>    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);<br>        <span class="hljs-built_in">add</span>(a,b,c);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">spfa</span>()) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>问题一：为什么dt数组不用初始化为0x3f3f3f3f，以及为什么初始化要把所有点入队？<br>答：dt数组的初始值是多少都不影响，因为dt数组在这里记录的不是最短路径。首先，我们理解初始化时为什么把所有点都加入队列中，在求1开始到n的最短路时，我们只把1入队了且让dt[1] = 0，目的是让1成为开始时唯一一个更新了dt数组的点，然后在根据已更新dt数组的这些点去更新他的出边（这就是spfa改良bellman的精髓）。但是负环可能不在点1的后继上（可以自行构造，把1放在拓扑图的中断位置，负环在点1的前面），所以要把所有点入队。所有看到这就懂了，dt数组的意义不是记录最短路径，而且来更新后继节点的，如果某个点的dt更新过了，那么就可以用这个点来更新他的后继节点（在求最短路问题里，一个点距离初始点的距离边短了，是不是尝试用这个点去更新他的后继节点，可能使得后继节点的最短距离也变小）。</p>
<h2 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h2><h3 id="Floyd求最短路"><a href="#Floyd求最短路" class="headerlink" title="Floyd求最短路"></a>Floyd求最短路</h3><p>三重循环！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">210</span>,INF=<span class="hljs-number">1e9</span>;<br><span class="hljs-type">int</span> n,m,Q;<br><span class="hljs-type">int</span> d[N][N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">floyd</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;=n;k++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>            &#123;<br>                d[i][j]=<span class="hljs-built_in">min</span>(d[i][j],d[i][k]+d[k][j]);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//初始化图</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;Q);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(i==j) d[i][j]=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span> d[i][j]=INF;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        <span class="hljs-type">int</span> a,b,c;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);<br>        d[a][b]=<span class="hljs-built_in">min</span>(d[a][b],c);<br>    &#125;<br>    <span class="hljs-comment">//floyd</span><br>    <span class="hljs-built_in">floyd</span>();<br>    <span class="hljs-comment">//轮询</span><br>    <span class="hljs-keyword">while</span>(Q--)<br>    &#123;<br>        <span class="hljs-type">int</span> a,b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);<br>        <span class="hljs-type">int</span> t=d[a][b];<br>        <span class="hljs-keyword">if</span>(t&gt;INF/<span class="hljs-number">2</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;impossible&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,t);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id><a href="#" class="headerlink" title></a><img src="/2022/12/14/algorithm/image-20230316203824250.png" alt="image-20230316203824250"></h2><h2 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h2><h3 id="Prim算法求最小生成数"><a href="#Prim算法求最小生成数" class="headerlink" title="Prim算法求最小生成数"></a>Prim算法求最小生成数</h3><p>朴素版本：类似于dijkstra算法</p>
<p>思路：</p>
<ul>
<li>与dijkstra不同，prim需要迭代n次</li>
<li>最小生成树是针对无向图的，所以在读入边的时候，需要赋值两次</li>
<li>要先累加再更新，避免t有自环，影响答案的正确性。后更新不会影响后面的结果么？不会的，因为dist[i]为i到集合S的距离，当t放入集合后，其dist[t]就已经没有意义了，再更新也不会影响答案的正确性。</li>
<li>需要特判一下第一次迭代，在我们没有做特殊处理时，第一次迭代中所有点到集合S的距离必然为无穷大，而且不会进行更新(也没有必要)，所以不需要将这条边(第一次迭代时，找到的距离集合S最短的边)累加到答案中，也不能认定为图不连通。</li>
<li>如果需要设置起点为i的话，在初始化dist数组之后，dist[i] = 0即可，这样也可以省去每轮迭代中的两个if判断。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">510</span>,INF=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">int</span> g[N][N],dist[N],n,m;<br><span class="hljs-type">bool</span> st[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">prim</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> t=<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!st[j]&amp;&amp;(t==<span class="hljs-number">-1</span>||dist[j]&lt;dist[t]))<br>            &#123;<br>                t=j;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(dist[t]==<span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0x3f3f3f3f</span>;<br>        res+=dist[t];<br>        st[t]=<span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) dist[i]=<span class="hljs-built_in">min</span>(dist[i],g[t][i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-built_in">memset</span>(g,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span> g);<br>    <span class="hljs-type">int</span> a,b,c;<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);<br>        g[a][b]=g[b][a]=<span class="hljs-built_in">min</span>(g[a][b],c);<br>    &#125;<br>    <span class="hljs-type">int</span> t=<span class="hljs-built_in">prim</span>();<br>    <span class="hljs-keyword">if</span>(t==<span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;impossible&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,t);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h2><h3 id="求最小生成数"><a href="#求最小生成数" class="headerlink" title="求最小生成数"></a>求最小生成数</h3><ul>
<li>将所有边按权重从小到大排序 $O(nlogn)$</li>
<li>枚举每条边<code>a,b</code>，权重c；if<code>a,b</code>不连通，将这条边也加入集合（并查集的使用） $(1)$</li>
</ul>
<p>稀疏图里用kruskal</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>,M=<span class="hljs-number">200010</span>,INF=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> p[N];<span class="hljs-comment">//每个节点的爷</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span>&#123;<br>    <span class="hljs-type">int</span> a,b,w;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-type">const</span> Edge&amp;W) <span class="hljs-type">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> w&lt;W.w;<span class="hljs-comment">//重载方便排序</span><br>    &#125;<br>&#125;edges[M];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><span class="hljs-comment">//并查集找爷</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(p[x]!=x) p[x]=<span class="hljs-built_in">find</span>(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">kruskal</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">sort</span>(edges,edges+m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) p[i]=i;<span class="hljs-comment">//你我都是爷</span><br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>,cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> a=edges[i].a,b=edges[i].b,w=edges[i].w;<br>        a=<span class="hljs-built_in">find</span>(a),b=<span class="hljs-built_in">find</span>(b);<br>        <span class="hljs-keyword">if</span>(a!=b)<br>        &#123;<br>            p[a]=b;<span class="hljs-comment">//连通</span><br>            res+=w;<span class="hljs-comment">//加上这条边</span><br>            cnt++;<span class="hljs-comment">//又连通了一个节点</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(cnt&lt;n<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> INF;<span class="hljs-comment">//有节点没有加进来，说明图不连通</span><br>    <span class="hljs-keyword">return</span> res;<span class="hljs-comment">//返回结果</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> a,b,w;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;w);<br>        edges[i]=&#123;a,b,w&#125;;<br>    &#125;<br>    <span class="hljs-type">int</span> t=<span class="hljs-built_in">kruskal</span>();<br>    <span class="hljs-keyword">if</span>(t==INF) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;impossible&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,t);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><img src="/2022/12/14/algorithm/image-20230730163510347.png" alt="image-20230730163510347"></p>
<h2 id="染色法判定二分图"><a href="#染色法判定二分图" class="headerlink" title="染色法判定二分图"></a>染色法判定二分图</h2><p>一个图是二分图，当前仅当图中不含奇数环（由于图中不含奇数环，所以染色过程一定没有矛盾）</p>
<p>二分图指图能分为两个集合，每个集合内部没有边，边都在集合之间（用两种颜色染色）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>,M=<span class="hljs-number">200010</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> h[N],e[M],ne[M],idx;<br><span class="hljs-type">int</span> colour[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx]=b,ne[idx]=h[a],h[a]=idx++;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    colour[u]=c;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=h[u];i!=<span class="hljs-number">-1</span>;i=ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> j=e[i];<br>        <span class="hljs-keyword">if</span>(!colour[j])<span class="hljs-comment">//若没有染色</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">dfs</span>(j,<span class="hljs-number">3</span>-c)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//因为i染了c，所以后继要染相反的颜色</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(colour[j]==c) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//如果染了和i相同的颜色，则冲突</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//如果未发生冲突，则返回true</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-type">int</span> a,b;<br>    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);<br>        <span class="hljs-built_in">add</span>(a,b),<span class="hljs-built_in">add</span>(b,a);<br>    &#125;<br>    <br>    <span class="hljs-type">bool</span> flag=<span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!colour[i])<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">dfs</span>(i,<span class="hljs-number">1</span>))<br>            &#123;<br>                flag=<span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(flag) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h2><h3 id="二分图的最大匹配"><a href="#二分图的最大匹配" class="headerlink" title="二分图的最大匹配"></a>二分图的最大匹配</h3><p>姑娘 j 遇到新的追求者的心理活动：如果原来的男朋友有备胎，我就绿他，如果没有，那我看他太可怜了，就一直跟他在一起吧。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">510</span>,M=<span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> n1,n2,m;<br><span class="hljs-type">int</span> h[N],e[M],ne[M],idx;<br><span class="hljs-type">int</span> match[N];<br><span class="hljs-type">bool</span> st[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx]=b,ne[idx]=h[a],h[a]=idx++;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><span class="hljs-comment">//为男生x找女生</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=h[x];i!=<span class="hljs-number">-1</span>;i=ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> j=e[i];<span class="hljs-comment">//女生的编号</span><br>        <span class="hljs-keyword">if</span>(!st[j])<span class="hljs-comment">//这个女生之前没有尝试匹配过</span><br>        &#123;<br>            st[j]=<span class="hljs-literal">true</span>;<span class="hljs-comment">//现在尝试过了</span><br>            <span class="hljs-keyword">if</span>(match[j]==<span class="hljs-number">0</span>||<span class="hljs-built_in">find</span>(match[j]))<span class="hljs-comment">//如果喜欢的女生单身,或者能变成前任</span><br>            &#123;<br>                match[j]=x;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;n1,&amp;n2,&amp;m);<br>    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        <span class="hljs-type">int</span> a,b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);<br>        <span class="hljs-built_in">add</span>(a,b);<br>    &#125;<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n1;i++)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(st,<span class="hljs-literal">false</span>,<span class="hljs-keyword">sizeof</span> st);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(i)) res++;<span class="hljs-comment">//为男生找到女生</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h1><ol>
<li>数论</li>
<li>组合计数</li>
<li>高斯消元</li>
<li>简单博弈论</li>
</ol>
<h2 id="质数"><a href="#质数" class="headerlink" title="质数"></a>质数</h2><p>定义：在大于1的整数中，如果值包含1和本身这两个约数，就被称之为质数，或者叫素数</p>
<p>所有小于等于1的数既不是质数也不是合数</p>
<p>（1）质数的判定——试除法</p>
<p>（2）分解质因数——试除法：从小到达枚举所有数，</p>
<h3 id="试除法判定质数"><a href="#试除法判定质数" class="headerlink" title="试除法判定质数"></a>试除法判定质数</h3><p>只枚举较小的约数以减小时间复杂度，时间复杂度$O(sqrt(n))$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_prime</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=x/i;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(x%i==<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        cin&gt;&gt;m;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">is_prime</span>(m)) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="分解质因子"><a href="#分解质因子" class="headerlink" title="分解质因子"></a>分解质因子</h3><p>质因数是指，能够被n 整除（也就是他的约数或者叫因子），并且本身是质数的数。</p>
<ul>
<li><p>我们可以从前往后去筛，而不需要判断这个数是否是质数，举个例子n=12,那么2到12之间一共有2,3,4,5,6,7,8,9,10,11 这几个数，当i=2时，会筛掉2,4,6这几个数（前提是这几个数是ta的约数），4这个合数就是 2*2 被筛掉了 ，6同理，也就是合数等于质数和质数的乘积,不用担心该因子不是质数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(n%i==<span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> s=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(n%i==<span class="hljs-number">0</span>)<br>            &#123;<br>                n/=i;<br>                s++;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,i,s);<br>        &#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>n中至多只包含一个大于sqrt(n)的质因子，故可以先枚举小于sqrt(n)的质因子，然后单独考虑那个大于sqrt(n)的质因子</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=x/i;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(x%i==<span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> s=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(x%i==<span class="hljs-number">0</span>) x/=i,s++;<br>            cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;s&lt;&lt;endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(x&gt;<span class="hljs-number">1</span>) cout&lt;&lt;x&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;<span class="hljs-number">1</span>&lt;&lt;endl;<span class="hljs-comment">//剩下一个大于根号x的质因子（该数得是大于1的）</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        cin&gt;&gt;m;<br>        <span class="hljs-built_in">divide</span>(m);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="筛质数"><a href="#筛质数" class="headerlink" title="筛质数"></a>筛质数</h3><p>埃式筛法：<strong>当一个数是质数时</strong>（因为合数等价于用其质因子筛，对于合数我们可以直接跳过），即未被筛，则加入，同时用他向后筛他的倍数，可以想象，以他为因数的合数会被筛掉，如果后面的某个数未被筛，说明他前面的数都不是他的因数，满足质数定义，故有效。埃氏筛法复杂度差不多n，但是还是比n大一点</p>
<p>线性筛法：复杂度就是n</p>
<blockquote>
<p><img src="/2022/12/14/algorithm/image-20230318143606944.png" alt="image-20230318143606944"></p>
</blockquote>
<p>埃式筛法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1000010</span>;<br><span class="hljs-type">int</span> primes[N],cnt;<br><span class="hljs-type">bool</span> st[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(st[i]) <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//若为合数</span><br>        primes[cnt++]=i;<span class="hljs-comment">//若为质数</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+i;j&lt;=n;j+=i)<span class="hljs-comment">//筛掉质数的倍数，如i=2,筛掉4,6等等</span><br>        &#123;<br>            st[j]=<span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-built_in">get_primes</span>(n);<br>    cout&lt;&lt;cnt&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>线性筛法：</p>
<p>线性筛法的原理：n只会被最小质因子筛掉</p>
<ul>
<li>本来我们应该对每个质数像埃氏筛法一样去筛，去把他的所有倍数找出来，但我们也可以不这样，可以并行地做，让相同的i乘以primes[j]来筛，但是是否需要让i乘以每个primes[j]来筛呢，如果i%primes[j]成立，说明primesj是i的最小质因子，我们希望每个数都被其最小质因子筛，所以i*primes[j+1]筛掉这个任务应该交给k*primes[j]来完成，同理接下来的i*primes[j+x]…，所以就不需要再循环下去了，break</li>
<li>那一上来把primes[j]<em>i筛了合适吗，这个是能保证最小筛吗，如果j大于0，也就是不是第一次循环，假设现在是c+1次循环，那么在第c次判断的时候通过判断可知i%primes[c]!=0,故可知i的最小质因数大于primes[c]，数i\</em>primes[c+1]的最小质因数要么是i要么是primes[c+1]，如果是第一次循环，那么primes[j]为2，其为最小的质数，用其筛掉的数一定能保证原则<code>用最小质因数筛</code></li>
<li><strong>我们筛的时候总是用最小质因数来筛，并且筛的是i*primes[j]，这个数筛的时候是归为用primes[j]作为最小质因数来筛的</strong>，因为如果归为i，i如果是合数的话，那么应该由i的最小质因数来筛，如果是质数的话，那么i刚刚加入primes数组中，按照顺序(i这个质数)<em>(primes这个质数)，显然primes这个质数更小，所以也是归为primes这个质数来筛的，所以i\</em>primes[j]来筛总是归为primes[j]作为最小质因数来筛</li>
<li>所以当不满足这个条件的时候，也就是i*primes[j]不能归为primes[j]时，那么一定是i为合数，即由i的最小质因子来筛，因为如果是质数的话按照上一条，仍然归结为primes[j]，也就是说i的最小质因子小于等于primes[j]吧，所以我们为了满足黑体加粗的规则，在等于的时候就跳出循环</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!st[i]) primes[cnt ++ ] = i;            <span class="hljs-comment">// 存质数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; primes[j] &lt;= n / i; j ++ )          <span class="hljs-comment">// 结束的条件是：primes[j] * i &lt;= n, 最多筛到n</span><br>        &#123;<br>            st[primes[j] * i] = <span class="hljs-literal">true</span>;                   <span class="hljs-comment">// 把合数 primes[j] * i 筛了</span><br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<span class="hljs-comment">//遍历的过程中把归结为以i的最小质因子的可能去掉               </span><br>            <span class="hljs-comment">// 若 i 为 primes[j] 的合数, 在筛prime[j] * i之前就已经把i筛掉了</span><br>            <span class="hljs-comment">// i都被筛了，比i大的 primes[j]的倍数也在之前被筛了</span><br>            <span class="hljs-comment">// 因为 i = primes[j] * k, primes[j] &lt; i, k &lt; i.</span><br>            <span class="hljs-comment">// 而 i &lt; n, 若 i - n之间还存在prims[j]* (k + 1) == x &lt; n 的话</span><br>            <span class="hljs-comment">// i &lt; x &lt; n，循环结束时可以筛到n，故primes[j]的k + 1倍 x会被筛掉</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="约数"><a href="#约数" class="headerlink" title="约数"></a>约数</h2><p>（1）试除法求一个数的所有约数 只需要枚举较小的约束，较大的那个可以直接计算出来</p>
<p>（2）约束个数 int范围内约数最多的是1500左右</p>
<p>（3）约束之和</p>
<p><img src="/2022/12/14/algorithm/image-20230318151937617.png" alt="image-20230318151937617"></p>
<p>约束之和展开即可呀，每个括号里选一个就行了~</p>
<p>（4）最大公约数 欧几里得算法（辗转相除法）</p>
<h3 id="约束个数"><a href="#约束个数" class="headerlink" title="约束个数"></a>约束个数</h3><p>先把每个数分解为质因子表达式，然后用上面的公式</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">110</span>,mode=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;primes;<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        cin&gt;&gt;x;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=x/i;i++)<span class="hljs-comment">//把每个数分解成质因子表达式</span><br>        &#123;<br>            <span class="hljs-keyword">while</span>(x%i==<span class="hljs-number">0</span>)&#123;<br>            x/=i;<br>            primes[i]++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(x&gt;<span class="hljs-number">1</span>) primes[x]++;<br>    &#125;<br>    LL res=<span class="hljs-number">1</span>;<span class="hljs-comment">//注意是1</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> p:primes) res=res*(p.second+<span class="hljs-number">1</span>)%mode;<br>    cout&lt;&lt;res&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="约束之和"><a href="#约束之和" class="headerlink" title="约束之和"></a>约束之和</h3><p>主要是$1+P+P^2…$的处理采用<code>t=t*p+1</code>的方式完成</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>, mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br><br>    unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; primes;<br><br>    <span class="hljs-keyword">while</span> (n -- )<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        cin &gt;&gt; x;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= x / i; i ++ )<br>            <span class="hljs-keyword">while</span> (x % i == <span class="hljs-number">0</span>)<br>            &#123;<br>                x /= i;<br>                primes[i] ++ ;<br>            &#125;<br><br>        <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">1</span>) primes[x] ++ ;<br>    &#125;<br><br>    LL res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p : primes)<br>    &#123;<br>        LL a = p.first, b = p.second;<br>        LL t = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (b -- ) t = (t * a + <span class="hljs-number">1</span>) % mod;<br>        res = res * t % mod;<br>    &#125;<br><br>    cout &lt;&lt; res &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="试除法求约数"><a href="#试除法求约数" class="headerlink" title="试除法求约数"></a>试除法求约数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">get_divisors</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; res;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=x/i;i++)<span class="hljs-comment">//枚举较小者即可</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(x%i==<span class="hljs-number">0</span>)<br>        &#123;<br>            res.<span class="hljs-built_in">push_back</span>(i);<br>            <span class="hljs-keyword">if</span>(i!=x/i) res.<span class="hljs-built_in">push_back</span>(x/i);<span class="hljs-comment">//避免两个相同</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(res.<span class="hljs-built_in">begin</span>(),res.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        cin&gt;&gt;x;<br>        <span class="hljs-keyword">auto</span> res=<span class="hljs-built_in">get_divisors</span>(x);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x:res) cout&lt;&lt;x&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        cout&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h3><p><img src="/2022/12/14/algorithm/image-20230803100601905.png" alt="image-20230803100601905"></p>
<p>欧几里得算法，时间复杂度$log(n)$</p>
<p>注意: d|a的含义是a能被d整除，即a/d</p>
<p>基于如下原理：d|a,d|b,则有d|ax+by，所以a和b的最大公约数(a,b)也可以表示为(b,a-c*b)，可知假设(a,b)值为k，k一定都整除b和a-c*b，特殊的，这里的c取[a/b]，故有(a,b)=(b,a%b)，如果b为0，则由于0可以被任何数整除，0/k=0,所以最大公约数返回a（也就是说任何的数都是0的约数）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> b?<span class="hljs-built_in">gcd</span>(b,a%b):a;<span class="hljs-comment">//若b为0，则返回a(0可以整除任何数),否则返回(b,a%b)</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        <span class="hljs-type">int</span> a,b;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        cout&lt;&lt;<span class="hljs-built_in">gcd</span>(a,b)&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h2><h3 id="欧拉函数-1"><a href="#欧拉函数-1" class="headerlink" title="欧拉函数"></a>欧拉函数</h3><p>互质：公约数只有1的两个整数</p>
<p>欧拉函数就是求出1~N中与N互质的数的个数，比如6与1,5互质，故欧拉函数值为2</p>
<p><img src="/2022/12/14/algorithm/image-20230803102654370.png" alt="image-20230803102654370"></p>
<p>欧拉公式原理：上面的公式展开就是下面的容斥原理，比如1/p1这个项前面是负号，两个的话是正号。。。。</p>
<p><img src="/2022/12/14/algorithm/image-20230318164700758.png" alt="image-20230318164700758" style="zoom:50%;"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">phi</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//这里没存质因数，因为没必要</span><br>    <span class="hljs-type">int</span> res=x;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=x/i;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(x%i==<span class="hljs-number">0</span>)<br>        &#123;<br>            res=res/i*(i<span class="hljs-number">-1</span>);<span class="hljs-comment">//先除后乘，避免计算过程中溢出</span><br>            <span class="hljs-keyword">while</span>(x%i==<span class="hljs-number">0</span>) x/=i;<span class="hljs-comment">//除尽</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(x&gt;<span class="hljs-number">1</span>) res=res/x*(x<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        cin&gt;&gt;x;<br>        cout&lt;&lt;<span class="hljs-built_in">phi</span>(x)&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="筛法求欧拉函数"><a href="#筛法求欧拉函数" class="headerlink" title="筛法求欧拉函数"></a>筛法求欧拉函数</h3><p>如果要求1~N中每一个数的欧拉函数，如果用公式来算，分解质因数n次将复杂度变成$O(n*sqrt(n))$，而筛法求每个数的欧拉函数的时间复杂度为$O(n)$</p>
<p>在线性筛法的过程中顺便把欧拉函数求出来，注意欧拉函数的定义，1~N中与N互质的数的个数</p>
<ol>
<li><p>若i是质数，那么i与前i-1个数均互质，这是质数的定义（质数只有他自己和1两个因子），故其phi值为i-1</p>
</li>
<li><p>primes[j]*i的phi值</p>
<ol>
<li><p>如果i%primes[j]==0，按照线性筛法，此时primes[j]恰好是i的最小质因数，所以按照公式可知：phi[i%primes[j]]=primes[j]*phi[i]</p>
<p><img src="/2022/12/14/algorithm/image-20230803110959261.png" alt="image-20230803110959261" style="zoom:50%;"></p>
</li>
<li><p>如果i%primes[j]!=0，按照线性筛法，此时i的最小质因子大于primes，故需要分别计算i和primes[j]的质因子</p>
</li>
</ol>
<p><img src="/2022/12/14/algorithm/image-20230803111634276.png" alt="image-20230803111634276" style="zoom:50%;"></p>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1000010</span>;<br><span class="hljs-type">int</span> primes[N],cnt;<br><span class="hljs-type">int</span> euler[N];<br><span class="hljs-type">bool</span> st[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_euler</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    euler[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!st[i])<span class="hljs-comment">//是质数</span><br>        &#123;<br>            primes[cnt++]=i;<br>            euler[i]=i<span class="hljs-number">-1</span>;<span class="hljs-comment">//质数和其前面的数互质</span><br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;primes[j]&lt;=n/i;j++)<span class="hljs-comment">//对于该数与质数的乘数，向后筛</span><br>        &#123;<br>            <span class="hljs-type">int</span> t=primes[j]*i;<br>            st[t]=<span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span>(i%primes[j]==<span class="hljs-number">0</span>)<span class="hljs-comment">//eulaer中已经包含了1/primes[j]</span><br>            &#123;<br>                euler[t]=euler[i]*primes[j];<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-comment">//未包含</span><br>            euler[t]=euler[i]*(primes[j]<span class="hljs-number">-1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-built_in">get_euler</span>(n);<br>    LL res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) res+=euler[i];<br>    cout&lt;&lt;res&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>欧拉函数的一个运用，因为a和n互质，假设1~n中与n互质的数为a1,a2,…a_phi(n),将这些数乘以a后也将与n互质（只有1这一个公因子），而在模n的情况下这两种应该是等价的(模n之后)，所以乘起来，可得上面的公式,如5^2^=25%6=1，其中phi(6)=2</p>
<p><img src="/2022/12/14/algorithm/image-20230803113942758.png" alt="image-20230803113942758" style="zoom: 50%;"></p>
<h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><p>原理：</p>
<p><img src="/2022/12/14/algorithm/image-20230803115223198.png" alt="image-20230803115223198" style="zoom: 50%;"></p>
<p><img src="/2022/12/14/algorithm/image-20230318191702495.png" alt="image-20230318191702495"></p>
<p>例子：</p>
<p><img src="/2022/12/14/algorithm/image-20230803115210828.png" alt="image-20230803115210828" style="zoom:50%;"></p>
<h3 id="快速幂-1"><a href="#快速幂-1" class="headerlink" title="快速幂"></a>快速幂</h3><p>若求A的B次方的后几位数，则这里的后几位数就是q</p>
<p>LL res = 1 % p;<br>注意这个式子！！！，当a=5,b=0,p=1这种情况下是会出错的</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><span class="hljs-function">LL <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> q)</span></span><br><span class="hljs-function"></span>&#123;<br>    LL res=<span class="hljs-number">1</span>%q;<br>    <span class="hljs-keyword">while</span>(b)<br>    &#123;<br>        <span class="hljs-comment">//把b转换为二进制</span><br>        <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>) res=res*a%q;<br>        a=a*(LL)a%q;<span class="hljs-comment">//a变成其平方</span><br>        b&gt;&gt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res%q;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        <span class="hljs-type">int</span> a,b,q;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;q);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,<span class="hljs-built_in">qmi</span>(a,b,q));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="快速幂求逆元"><a href="#快速幂求逆元" class="headerlink" title="快速幂求逆元"></a>快速幂求逆元</h3><p>在欧几里得算法那节我们知道了费马定理：<strong>注意条件是a和p互质且p是质数</strong>，如果a是p的倍数，快速幂是无法求的</p>
<p><img src="/2022/12/14/algorithm/image-20230803113942758.png" alt="image-20230803113942758" style="zoom: 50%;"></p>
<p><img src="/2022/12/14/algorithm/image-20230319114751648.png" alt="image-20230319114751648"></p>
<p>b的逆元就是上面的x，最终通过费马定理转换为求<code>b^(n-2)%n</code>，转变为快速幂</p>
<p>注意这里a和n要求互质，否则结果是<code>impossible</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><span class="hljs-function">LL <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    LL res=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>) res=res*a%p;<br>        a=a*(LL)a%p;<br>        b&gt;&gt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> a,p;<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;a,&amp;p);<br>        <span class="hljs-keyword">if</span>(a%p==<span class="hljs-number">0</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;impossible&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,<span class="hljs-built_in">qmi</span>(a,p<span class="hljs-number">-2</span>,p));<span class="hljs-comment">//a^(p-2)%p;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h2><p>欧几里得算法：</p>
<p>基于如下原理：d|a,d|b,则有d|ax+by，所以a和b的最大公约数(a,b)也可以表示为(b,a-c*b)，可知假设(a,b)值为k，k一定都整除b和a-c*b，特殊的，这里的c取[a/b]，故有(a,b)=(b,a%b)，如果b为0，则由于0可以被任何数整除，0/k=0,所以最大公约数返回a（也就是说任何的数都是0的约数）</p>
<p>裴蜀定理：对于任意正整数a,b，一定存在非零整数x，y，使得ax+by=(a,b)的最大公约数</p>
<p>最大公约数就是最大公因数，扩展欧几里得就是构造x和y，利用的是递归的思想</p>
<p>当b为0时，可以轻易写出来，当b不为0时，找到前后两层的递归关系</p>
<h3 id="扩展欧几里得算法-1"><a href="#扩展欧几里得算法-1" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h3><p><img src="/2022/12/14/algorithm/image-20230804104602951.png" alt="image-20230804104602951"></p>
<p>x、y并不唯一，算法求出其一</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> &amp;x,<span class="hljs-type">int</span> &amp;y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(!b)<span class="hljs-comment">//如果b为0，则最大公约数就是a</span><br>    &#123;<br>        x=<span class="hljs-number">1</span>,y=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>    <span class="hljs-comment">//下面是递归两层间的关系</span><br>    <span class="hljs-type">int</span> d=<span class="hljs-built_in">exgcd</span>(b,a%b,y,x);<span class="hljs-comment">//已经求得by+(a%b)x=d的解y,x，现在根据已经求得的解求ax+by=d的解x和y</span><br>    <span class="hljs-comment">//扩展欧几里得</span><br>    y-=a/b*x;<br>    <span class="hljs-keyword">return</span> d;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-type">int</span> a,b;<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);<br>        <span class="hljs-type">int</span> x,y;<br>        <span class="hljs-built_in">exgcd</span>(a,b,x,y);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,x,y);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="线性同余方程"><a href="#线性同余方程" class="headerlink" title="线性同余方程"></a>线性同余方程</h3><p><img src="/2022/12/14/algorithm/image-20230804111200034.png" alt="image-20230804111200034" style="zoom: 50%;"></p>
<p>根据欧几里得算法，对于ax+my=d，其中d是a和m的最大公约数，一定在一些条件下有解，但是题目给出的是b，所以不一定有解，有解的条件是b能够被d整除，并且可知实际的x值会因此而扩大b/d倍</p>
<p><img src="/2022/12/14/algorithm/image-20230319190625005.png" alt="image-20230319190625005"></p>
<p>线性同余方程求的是这个x，思路是用扩展欧几里得首先求a和m的最大公约数d，然后把求得的x扩展b/d倍</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> &amp;x,<span class="hljs-type">int</span> &amp;y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(!b)<br>    &#123;<br>        x=<span class="hljs-number">1</span>,y=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>    <span class="hljs-type">int</span> t=<span class="hljs-built_in">exgcd</span>(b,a%b,y,x);<br>    y-=a/b*x;<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-type">int</span> a,b,m;<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;m);<br>        <span class="hljs-type">int</span> x,y;<br>        <span class="hljs-type">int</span> d=<span class="hljs-built_in">exgcd</span>(a,m,x,y);<br>        <span class="hljs-keyword">if</span>(b%d) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;impossible&quot;</span>);<span class="hljs-comment">//要求能整除最大公约数</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,(LL)b/d*x%m);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>假设某个特解为ax0+by0=n；<br>那这个也等同于 a（x0+bt）+b（y0-at）=n;<br>x的通解为 x=x0+b*t;<br>最后取模可以求最小的解</p>
<h2 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h2><h3 id="表达整数的奇怪方式"><a href="#表达整数的奇怪方式" class="headerlink" title="表达整数的奇怪方式"></a>表达整数的奇怪方式</h3><p><img src="/2022/12/14/algorithm/image-20230804123142955.png" alt="image-20230804123142955" style="zoom:67%;"></p>
<p>按照上图的步骤来求：</p>
<ul>
<li>首先化为k1a1-k2a2=m2-m1形式，这个形式做两件事情，第一件事情是判断是否有解，有解等价于(m2-m1)是(a1,a2)的倍数，第二件事情是根据扩展欧几里得算法求出k1</li>
<li>但是为了题目的x的最小条件，我们需要根据扩展欧几里得的通解形式缩小k1，这也是一步</li>
<li>在求出k1之后我们就可以求x了，x=a1k1+m1+</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-function">LL <span class="hljs-title">exgcd</span><span class="hljs-params">(LL a,LL b,LL &amp;x,LL &amp;y)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!b)&#123;<br>        x=<span class="hljs-number">1</span>,y=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br><br>    LL d=<span class="hljs-built_in">exgcd</span>(b,a%b,y,x);<br>    y-=a/b*x;<br>    <span class="hljs-keyword">return</span> d;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    LL x=<span class="hljs-number">0</span>,m1,a1;<br>    cin&gt;&gt;a1&gt;&gt;m1;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++)&#123;<br>        LL m2,a2;<br>        cin&gt;&gt;a2&gt;&gt;m2;<br>        LL k1,k2;<br>        LL d=<span class="hljs-built_in">exgcd</span>(a1,a2,k1,k2);<br>        <span class="hljs-keyword">if</span>((m2-m1)%d)&#123;<br>            x=<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//更新状态</span><br>        k1*=(m2-m1)/d;<span class="hljs-comment">//因为等式右边是m2-m1而不是最大公约数，所以需要扩展</span><br>        LL t=a2/d;<span class="hljs-comment">//上图下面的通解形式</span><br>        <span class="hljs-comment">//将解变成一个最小的正整数解</span><br>        k1=(k1%t+t)%t;<br><br>        x=k1*a1+m1;<span class="hljs-comment">//求得x</span><br>        <span class="hljs-comment">//下面就是把两个式子统一为一个式子继续合并</span><br>        <span class="hljs-comment">//更新a和m，k只是个变量，不用管，取余的时候会自动消失</span><br>        m1=k1*a1+m1;<br>        a1=<span class="hljs-built_in">abs</span>(a1/d*a2);<span class="hljs-comment">//最小公倍数</span><br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(x!=<span class="hljs-number">-1</span>) x=(m1%a1+a1)%a1;<br><br>    cout&lt;&lt;x&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="高斯消元"><a href="#高斯消元" class="headerlink" title="高斯消元"></a>高斯消元</h2><p>高斯消元解线性方程组</p>
<p>线性方程组有三种情况的解，先将矩阵化为上三角</p>
<ol>
<li>如果出现左侧和右侧都是0的行，说明方程组中该方程可以被其他方程表出，故方程组有无穷解</li>
<li>如果出现左侧全为0右侧不为0的行，则方程组无解</li>
<li>否则就是有唯一解，通过初等行变换，高斯消元的方法求解</li>
</ol>
<p><img src="/2022/12/14/algorithm/image-20230805110013261.png" alt="image-20230805110013261" style="zoom:67%;"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> eps = <span class="hljs-number">1e-8</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">double</span> a[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gauss</span><span class="hljs-params">()</span>  <span class="hljs-comment">// 高斯消元，答案存于a[i][n]中，0 &lt;= i &lt; n</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> c, r;<br>    <span class="hljs-keyword">for</span> (c = <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>; c &lt; n; c ++ )<span class="hljs-comment">//依次处理吧各列</span><br>    &#123;<br>        <span class="hljs-type">int</span> t = r;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; i &lt; n; i ++ )  <span class="hljs-comment">// 找绝对值最大的行</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(a[i][c]) &gt; <span class="hljs-built_in">fabs</span>(a[t][c]))<br>                t = i;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(a[t][c]) &lt; eps) <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//如果最大的行都是0，说明全是0，该列无法用于行的固定</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = c; i &lt;= n; i ++ ) <span class="hljs-built_in">swap</span>(a[t][i], a[r][i]);  <span class="hljs-comment">// 将绝对值最大的行换到最顶端</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt;= c; i -- ) a[r][i] /= a[r][c];  <span class="hljs-comment">// 将当前行的首位变成1</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r + <span class="hljs-number">1</span>; i &lt; n; i ++ )  <span class="hljs-comment">// 用当前行将下面所有的列消成0</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(a[i][c]) &gt; eps)<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = n; j &gt;= c; j -- )<br>                    a[i][j] -= a[r][j] * a[i][c];<br><br>        r ++ ;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (r &lt; n)<span class="hljs-comment">//如果固定的行数小于n，则说明有一些行左侧全是0</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; i &lt; n; i ++ )<span class="hljs-comment">//检查这些行右边是不是0</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(a[i][n]) &gt; eps)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>; <span class="hljs-comment">// 无解</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 有无穷多组解</span><br>    &#125;<br>	<span class="hljs-comment">//求唯一解，需要再化为最简式，即系数矩阵化为单位矩阵</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j ++ )<br>            a[i][n] -= a[i][j] * a[j][n];<span class="hljs-comment">//第i行需要减的数与第i行的非首位和该首位对应的列的首位有关</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 有唯一解</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n + <span class="hljs-number">1</span>; j ++ )<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf&quot;</span>, &amp;a[i][j]);<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-built_in">gauss</span>();<br>    <span class="hljs-keyword">if</span> (t == <span class="hljs-number">2</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No solution&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (t == <span class="hljs-number">1</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Infinite group solutions&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf\n&quot;</span>, a[i][n]);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="求组合数"><a href="#求组合数" class="headerlink" title="求组合数"></a>求组合数</h2><p>求组合数有多种方式，需要根据题目数据范围来选择合适的做法</p>
<p><img src="/2022/12/14/algorithm/image-20230320120740137.png" alt="image-20230320120740137"></p>
<p>求组合数有多种方式，要根据数据的范围选择</p>
<h3 id="求组合数1"><a href="#求组合数1" class="headerlink" title="求组合数1"></a>求组合数1</h3><p>考虑打表的方式直接弄出来，直接预处理出来每一个数，复杂度O(n^2^)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2010</span>,mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> c[N][N];<br><span class="hljs-comment">//单独把c_ij处理出来</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=i;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!j) c[i][j]=<span class="hljs-number">1</span>;<span class="hljs-comment">//边界条件，当j为0时</span><br>            <span class="hljs-keyword">else</span> c[i][j]=(c[i<span class="hljs-number">-1</span>][j]+c[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>])%mod;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        <span class="hljs-type">int</span> a,b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,c[a][b]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="求组合数2"><a href="#求组合数2" class="headerlink" title="求组合数2"></a>求组合数2</h3><p>预处理出来阶乘，用公式计算组合数，但是不存在除法分开取模的特征，所以要计算逆元来做，所以预处理出来一个数的阶乘和他的逆元</p>
<p><img src="/2022/12/14/algorithm/image-20230805113411772.png" alt="image-20230805113411772" style="zoom:50%;"></p>
<p>处理出来数的阶乘，和数的逆元的相乘结果</p>
<p>两个long long级别的数相乘就要mod一次了~，复杂度O(NlogN)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>,mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> fact[N],infact[N];<span class="hljs-comment">//阶乘和逆元</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> p)</span><span class="hljs-comment">//快速幂</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(k)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(k&amp;<span class="hljs-number">1</span>) res=(LL)res*a%p;<br>        a=(LL)a*a%p;<br>        k&gt;&gt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//预处理出阶乘和逆元</span><br>    fact[<span class="hljs-number">0</span>]=infact[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<span class="hljs-comment">//1的阶乘和逆元都是本身</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;N;i++)<br>    &#123;<br>        fact[i]=(LL)fact[i<span class="hljs-number">-1</span>]*i%mod;<br>        infact[i]=(LL)infact[i<span class="hljs-number">-1</span>]*<span class="hljs-built_in">qmi</span>(i,mod<span class="hljs-number">-2</span>,mod)%mod;<span class="hljs-comment">//前面那个乘上i的逆元</span><br>    &#125;<br>    <br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">int</span> a,b;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,(LL)fact[a]*infact[b]%mod*infact[a-b]%mod);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h3 id="求组合数3"><a href="#求组合数3" class="headerlink" title="求组合数3"></a>求组合数3</h3><p>采用lucus定理来做：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/8148298/">AcWing 887. 求组合数 III - AcWing</a></p>
<p>关键的一步是来凑出b0+b1*p1+…凑出来b</p>
<p><img src="/2022/12/14/algorithm/image-20230806095717752.png" alt="image-20230806095717752"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(k)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(k&amp;<span class="hljs-number">1</span>) res=(LL) res*a%p;<br>        a=(LL)a*a%p;<br>        k&gt;&gt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> p)</span><span class="hljs-comment">//直接求组合数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(b&gt;a) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>,j=a;i&lt;=b;i++,j--)<br>    &#123;<br>        res=(LL)res*j%p;<span class="hljs-comment">//a~a-b+1</span><br>        res=(LL)res*<span class="hljs-built_in">qmi</span>(i,p<span class="hljs-number">-2</span>,p)%p;<span class="hljs-comment">//b的阶乘的逆元</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lucas</span><span class="hljs-params">(LL a,LL b,<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(a&lt;p&amp;&amp;b&lt;p) <span class="hljs-keyword">return</span> <span class="hljs-built_in">C</span>(a,b,p);<span class="hljs-comment">//均不满足则直接求</span><br>    <span class="hljs-keyword">return</span> (LL)<span class="hljs-built_in">C</span>(a%p,b%p,p)*<span class="hljs-built_in">lucas</span>(a/p,b/p,p)%p;<span class="hljs-comment">//lucas定理是个递归的过程</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    LL a,b;<br>    <span class="hljs-type">int</span> p;<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%d&quot;</span>,&amp;a,&amp;b,&amp;p);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">lucas</span>(a,b,p));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="求组合数4"><a href="#求组合数4" class="headerlink" title="求组合数4"></a>求组合数4</h3><p>要求求准确的解，而不是模一个数，可以直接用公式来计算，涉及到高精度乘法和高精度除法，效率较低</p>
<p>方法是先将<code>C(a,b)</code>分解质因数<code>a!/((a-b)!*(b!))</code>，然后只用高精度乘法来做即可<a href="https://www.acwing.com/solution/content/26559/">AcWing 888. 求组合数 IV(高精度-素数组合) - AcWing</a></p>
<ul>
<li>首先筛1~a之间的所有质数</li>
<li>再求每个质数的次数</li>
<li>用高精度乘法将上述质数乘上</li>
</ul>
<p>这里计算每个质数的次数的方法如下：</p>
<p><img src="/2022/12/14/algorithm/image-20230806110437230.png" alt="image-20230806110437230" style="zoom:50%;"></p>
<p>以2为例：</p>
<p><img src="/2022/12/14/algorithm/image-20230806111033816.png" alt="image-20230806111033816" style="zoom:50%;"></p>
<p>其实代码里面更好理解，就是不断地除p</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">5010</span>;<br><br><span class="hljs-type">int</span> primes[N],cnt;<br><span class="hljs-type">int</span> sum[N];<br><span class="hljs-type">bool</span> st[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!st[i]) primes[cnt++]=i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;primes[j]&lt;=n/i;j++)<br>        &#123;<br>            st[primes[j]*i]=<span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span>(i%primes[j]==<span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> p)</span><span class="hljs-comment">//计算n的阶乘</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(n)<br>    &#123;<br>        res+=n/p;<br>        n/=p;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">mul</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; a,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; c;<br>    <span class="hljs-type">int</span> t=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.<span class="hljs-built_in">size</span>();i++)<br>    &#123;<br>        t+=a[i]*b;<br>        c.<span class="hljs-built_in">push_back</span>(t%<span class="hljs-number">10</span>);<br>        t/=<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(t)<br>    &#123;<br>        c.<span class="hljs-built_in">push_back</span>(t%<span class="hljs-number">10</span>);<br>        t/=<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a,b;<br>    cin&gt;&gt;a&gt;&gt;b;<br>    <br>    <span class="hljs-built_in">get_primes</span>(a);<span class="hljs-comment">//求1~a之间的质数</span><br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;cnt;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> p=primes[i];<span class="hljs-comment">//第i个质数</span><br>        sum[i]=<span class="hljs-built_in">get</span>(a,p)-<span class="hljs-built_in">get</span>(a-b,p)-<span class="hljs-built_in">get</span>(b,p);<span class="hljs-comment">//求这个质数的次数</span><br>    &#125;<br>    <br>    vector&lt;<span class="hljs-type">int</span>&gt; res;<br>    res.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;cnt;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;sum[i];j++)<br>        &#123;<br>            res=<span class="hljs-built_in">mul</span>(res,primes[i]);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=res.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,res[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="满足条件的01序列"><a href="#满足条件的01序列" class="headerlink" title="满足条件的01序列"></a>满足条件的01序列</h3><p>参考：<a href="https://www.acwing.com/solution/content/8907/">AcWing 889. 满足条件的01序列 - AcWing</a>，即求卡特兰数</p>
<p>注意快速幂求逆元的条件，要求mod为质数</p>
<p>问题转换为从0，0走到n，n的满足一定条件的路径，将序列中0看成向右走，1看成向上走，最终走到(n,n)位置，但是题目要求序列前缀中0的个数要不少于1的个数，所以x&gt;=y，也就是说不能碰到红色的线，那如何求碰到红色线的路径数量呢，任何一个碰到红线然后到达(n,n)的路径通过红线进行镜像处理，最终一定会镜像到达(n-1,n+1)这个点的一条路径，所以只需要求出从(0,0)到达(n-1,n+1)这个点的路径数量，然后相减即可</p>
<p><img src="/2022/12/14/algorithm/image-20230325205418891.png" alt="image-20230325205418891"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>,mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(k)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(k&amp;<span class="hljs-number">1</span>) res=(LL)res*a%p;<br>        a=(LL)a*a%p;<br>        k&gt;&gt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <br>    <span class="hljs-type">int</span> a=n*<span class="hljs-number">2</span>,b=n;<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=a;i&gt;a-b;i--) res=(LL)res*i%mod;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=b;i++) res=(LL)res*<span class="hljs-built_in">qmi</span>(i,mod<span class="hljs-number">-2</span>,mod)%mod;<span class="hljs-comment">//逆元</span><br>    res=(LL)res*<span class="hljs-built_in">qmi</span>(n+<span class="hljs-number">1</span>,mod<span class="hljs-number">-2</span>,mod)%mod;<br>    cout&lt;&lt;res&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="容斥原理"><a href="#容斥原理" class="headerlink" title="容斥原理"></a>容斥原理</h2><p><img src="/2022/12/14/algorithm/image-20230807094630758.png" alt="image-20230807094630758"></p>
<p>实现的时候以位运算的方式实现，假设有n个数m个类别，则从1~2^m^-1进行枚举，每一位上表示该位上的集合是否取，在枚举的过程中计算上述等式</p>
<h3 id="能被整除的数"><a href="#能被整除的数" class="headerlink" title="能被整除的数"></a>能被整除的数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> p[N];<span class="hljs-comment">//m个质数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++) cin&gt;&gt;p[i];<br>    <br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">1</span>&lt;&lt;m;i++)<span class="hljs-comment">//1~2^m,看做是2进制串</span><br>    &#123;<br>        <span class="hljs-type">int</span> t=<span class="hljs-number">1</span>,s=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)<span class="hljs-comment">//计算其中1的个数</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(i&gt;&gt;j&amp;<span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>((LL)t*p[j]&gt;n)<span class="hljs-comment">//选择的质数不符合要求</span><br>                &#123;<br>                    t=<span class="hljs-number">-1</span>;<span class="hljs-comment">//做个标记然后退出循环</span><br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                t*=p[j];<br>                s++;<span class="hljs-comment">//集合中元素的数量</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(t!=<span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s%<span class="hljs-number">2</span>) res+=n/t;<span class="hljs-comment">//奇数个数为加</span><br>            <span class="hljs-keyword">else</span> res-=n/t;<span class="hljs-comment">//偶数个数为减</span><br>        &#125;<br>    &#125;<br>    cout&lt;&lt;res;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="博弈论"><a href="#博弈论" class="headerlink" title="博弈论"></a>博弈论</h2><p>若一个游戏满足：</p>
<p>由两名玩家交替行动<br>在游戏进行的任意时刻，可以执行的合法行动与轮到哪位玩家无关<br>不能行动的玩家判负<br>则称该游戏为一个<strong>公平组合游戏</strong>。</p>
<p>尼姆游戏（NIM）属于公平组合游戏，但常见的棋类游戏，比如围棋就不是公平组合游戏，因为围棋交战双方分别只能落黑子和白子，胜负判定也比较负责，不满足条件2和3。</p>
<h3 id="Nim游戏"><a href="#Nim游戏" class="headerlink" title="Nim游戏"></a>Nim游戏</h3><p>ai是每堆中数量</p>
<p>先手必胜状态：先手操作完，可以走到某一个必败状态（给对方留下必败状态）<br>先手必败状态：先手操作完，走不到任何一个必败状态（队首不处于必败态，自己处于）<br>先手必败状态：a1 ^ a2 ^ a3 ^ … ^an = 0<br>先手必胜状态：a1 ^ a2 ^ a3 ^ … ^an ≠ 0</p>
<p>证明：</p>
<ol>
<li>对于先手，如果遇到全0的局面，则败</li>
<li>如果先手遇到异或不为0的情况，假设异或结果为x，假设x的最高位1所在位为k，则至少存在ai第k位为1，ai异或x&lt;ai,所以在取的过程中可以将ai取为(ai异或x)的状态，因为x是a1~an的异或，将ai取完之后一定能将异或结果转为0，后手必败，先手必胜</li>
<li>如果先手遇到异或为0的情况，则无论怎么取，异或结果都不是0.也就是对手必胜态，反证法：假设取完后异或结果为0，取的项ai变成了ai’,则将前后两次项进行异或：a1\^a2…\^ai\^an  ^  a1\^a2\^…\^ai‘\^an=ai\^ai’，如果是0，则ai=ai’,则不满足取这一动作，故不可能为0</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,tmp,x=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;tmp);<br>        x^=tmp;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(x) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="台阶-Nim游戏"><a href="#台阶-Nim游戏" class="headerlink" title="台阶-Nim游戏"></a>台阶-Nim游戏</h3><p>如果先手时奇数台阶上的值的异或值为0，则先手必败，反之必胜</p>
<p>注意判断奇数的处理:<code>i&amp;1</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>        <span class="hljs-keyword">if</span>(i&amp;<span class="hljs-number">1</span>) res^=x;<span class="hljs-comment">//奇数台阶上的</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(res) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="集合-Nim游戏"><a href="#集合-Nim游戏" class="headerlink" title="集合-Nim游戏"></a>集合-Nim游戏</h3><p><a href="https://www.acwing.com/solution/content/13191/">AcWing 893. 集合-Nim游戏 - AcWing</a></p>
<p>用到了sg数组，sg数组通过mex函数定义，sg=mex{sg(后继)}，即在后继中未出现的最小的非负整数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">110</span>,M=<span class="hljs-number">10010</span>;<br><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> s[N],f[M];<span class="hljs-comment">//分别存储可拿的石子数量和每堆石子数量</span><br><span class="hljs-comment">//记忆化搜索，注意到相同的x得到的值应该是一样的，sg的树结构画起来是一样的</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sg</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><span class="hljs-comment">//根据sg的定义求sg值</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(f[x]!=<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> f[x];<span class="hljs-comment">//记忆化搜索</span><br>    unordered_set&lt;<span class="hljs-type">int</span>&gt; S;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-comment">//对每种取法进行讨论</span><br>    &#123;<br>        <span class="hljs-type">int</span> sum=s[i];<br>        <span class="hljs-keyword">if</span>(x&gt;=sum) S.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">sg</span>(x-sum));<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;;i++)<span class="hljs-comment">//按照sg的定义向后寻找未出现的非0整数</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(!S.<span class="hljs-built_in">count</span>(i))<br>        <span class="hljs-keyword">return</span> f[x]=i;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;s[i]);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;m);<br>    <span class="hljs-built_in">memset</span>(f,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> f);<br>    <br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<span class="hljs-comment">//将每个有向图顶点sg值异或</span><br>        res^=<span class="hljs-built_in">sg</span>(x);<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(res) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="拆分-Nim游戏"><a href="#拆分-Nim游戏" class="headerlink" title="拆分-Nim游戏"></a>拆分-Nim游戏</h3><p>sg(b1,b2)=sg(b1)$\and$sg(b2)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_set&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">110</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> f[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sg</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(f[x]!=<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> f[x];<br>    unordered_set&lt;<span class="hljs-type">int</span>&gt; set;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;x;i++)<span class="hljs-comment">//两堆的所有结果</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;x;j++)<br>        &#123;<br>            set.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">sg</span>(i)^<span class="hljs-built_in">sg</span>(j));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;;i++)<span class="hljs-comment">//按照sg的定义，去mex，未出现的</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(!set.<span class="hljs-built_in">count</span>(i))<br>        &#123;<br>            <span class="hljs-keyword">return</span> f[x]=i;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-built_in">memset</span>(f,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> f);<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        cin&gt;&gt;x;<br>        res^=<span class="hljs-built_in">sg</span>(x);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(res) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><blockquote>
<p>DP需要注意初始化——from xiao</p>
</blockquote>
<h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><p>0-1背包问题：每件物品最多使用一次</p>
<p>完全背包问题：每件物品有无限个</p>
<p>多重背包问题：每件物品有s[i]个，有一种优化计算方式</p>
<p>分组背包问题：有多个组，每组里只能选一个</p>
<p><img src="/2022/12/14/algorithm/image-20230807212651662.png" alt="image-20230807212651662"></p>
<p>优化和变形都是在原方程基础上进行的等价变形，降维的时候如果用到的是上一层的状态，就要逆序枚举，如果用到的是本层的状态，就要顺序枚举</p>
<h3 id="0-1背包问题"><a href="#0-1背包问题" class="headerlink" title="0-1背包问题"></a>0-1背包问题</h3><p><img src="/2022/12/14/algorithm/image-20230807215110433.png" alt="image-20230807215110433" style="zoom:80%;"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> V[N],W[N];<br><span class="hljs-type">int</span> n,v;<br><span class="hljs-type">int</span> dp[N][N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;v;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        cin&gt;&gt;V[i]&gt;&gt;W[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=v;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(j&gt;=V[i]) dp[i][j]=<span class="hljs-built_in">max</span>(dp[i<span class="hljs-number">-1</span>][j],dp[i<span class="hljs-number">-1</span>][j-V[i]]+W[i]);<br>            <span class="hljs-keyword">else</span> dp[i][j]=dp[i<span class="hljs-number">-1</span>][j];<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;dp[n][v];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>降维后</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> V[N],W[N];<br><span class="hljs-type">int</span> n,v;<br><span class="hljs-type">int</span> dp[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;v;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        cin&gt;&gt;V[i]&gt;&gt;W[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=v;j&gt;=V[i];j--)<span class="hljs-comment">//注意逆序，因为dp[j-v]项需要用到之前的项，如果正序计算，会被提前覆盖</span><br>        &#123;<br>            dp[j]=<span class="hljs-built_in">max</span>(dp[j],dp[j-V[i]]+W[i]);<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;dp[v];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h3><p>每个物品无数个</p>
<p><img src="/2022/12/14/algorithm/image-20230807214845030.png" alt="image-20230807214845030" style="zoom:50%;"></p>
<p>朴素做法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> dp[N][N];<br><span class="hljs-type">int</span> n,c;<br><span class="hljs-type">int</span> w[N],v[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;c;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        cin&gt;&gt;w[i]&gt;&gt;v[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=c;j++)<br>        &#123;<br>            dp[i][j]=dp[i<span class="hljs-number">-1</span>][j];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k*w[i]&lt;=j;k++)<span class="hljs-comment">//类似于dp数组的方法来计算</span><br>            &#123;<br>                dp[i][j]=<span class="hljs-built_in">max</span>(dp[i][j],dp[i<span class="hljs-number">-1</span>][j-k*w[i]]+k*v[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;dp[n][c];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>优化做法：替换公式</p>
<p><img src="/2022/12/14/algorithm/image-20230807233458009.png" alt="image-20230807233458009" style="zoom:80%;"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> dp[N][N];<br><span class="hljs-type">int</span> n,c;<br><span class="hljs-type">int</span> w[N],v[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;c;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        cin&gt;&gt;w[i]&gt;&gt;v[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=c;j++)<br>        &#123;<br>            dp[i][j]=dp[i<span class="hljs-number">-1</span>][j];<br>            <span class="hljs-keyword">if</span>(j&gt;=w[i]) dp[i][j]=<span class="hljs-built_in">max</span>(dp[i][j],dp[i][j-w[i]]+v[i]);<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;dp[n][c];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>终极优化：替换公式+降维 ，注意是顺序的</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> f[N];<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-type">int</span> v,w;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        cin&gt;&gt;v&gt;&gt;w;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=v;j&lt;=m;j++)<span class="hljs-comment">//注意这里是顺序的，因为用的j-v是i作为前项的，是更新覆盖之后的</span><br>        &#123;<br>            f[j]=<span class="hljs-built_in">max</span>(f[j],f[j-v]+w);<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;f[m]&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="多重背包问题"><a href="#多重背包问题" class="headerlink" title="多重背包问题"></a>多重背包问题</h3><p>每个物品有限个，具体有s[i]个</p>
<p><img src="/2022/12/14/algorithm/image-20230808092846993.png" alt="image-20230808092846993"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">110</span>;<br><span class="hljs-type">int</span> n,v;<br><span class="hljs-type">int</span> V[N],S[N],W[N];<br><span class="hljs-type">int</span> dp[N][N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;v;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        cin&gt;&gt;V[i]&gt;&gt;W[i]&gt;&gt;S[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=v;j++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;=S[i]&amp;&amp;j&gt;=k*V[i];k++)<br>            &#123;<br>                dp[i][j]=<span class="hljs-built_in">max</span>(dp[i][j],dp[i<span class="hljs-number">-1</span>][j-k*V[i]]+k*W[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;dp[n][v];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>二进制优化</p>
<p>优化的思想：将第i组可拿的s[i]个物品进行拆分，按照二进制进行打包成一个物品，只需要对拆分后的$log(s)$个物品进行选或者不选，就能等效于对s[i]个物品选的数量，具体将s[i]个物品拆分成: 1 , 2 , 4 , 2^k^ , c ,其中1+2+4+…+2^k^&lt;=s[i]，但k+1次方不满足该条件，c是s[i]-(1+2+4+…+2^k^)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">20000</span>,M=<span class="hljs-number">2010</span>;<br><span class="hljs-type">int</span> V[N],W[N];<br><span class="hljs-type">int</span> n,v;<br><span class="hljs-type">int</span> f[M];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;v;<br>    <span class="hljs-type">int</span> a,b,s;<br>    <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        cin&gt;&gt;a&gt;&gt;b&gt;&gt;s;<br>        <span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(k&lt;=s)<br>        &#123;<br>            cnt++;<br>            V[cnt]=a*k;<br>            W[cnt]=b*k;<br>            s=s-k;<br>            k=k*<span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(s&gt;<span class="hljs-number">0</span>)<br>        &#123;<br>            cnt++;<br>            V[cnt]=s*a;<br>            W[cnt]=s*b;<br>        &#125;<br>    &#125;<br>    n=cnt;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=v;j&gt;=V[i];j--)<br>        &#123;<br>         f[j]=<span class="hljs-built_in">max</span>(f[j],f[j-V[i]]+W[i]);<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;f[v];<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="分组背包问题"><a href="#分组背包问题" class="headerlink" title="分组背包问题"></a>分组背包问题</h3><p>分成多个组，每组之中只能选0个或者1个</p>
<p><img src="/2022/12/14/algorithm/image-20230808101054769.png" alt="image-20230808101054769" style="zoom: 67%;"></p>
<p>二维dp：</p>
<p>降维优化：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">110</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> v[N][N],w[N][N],s[N];<br><span class="hljs-type">int</span> f[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        cin&gt;&gt;s[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=s[i];j++)<br>        &#123;<br>            cin&gt;&gt;v[i][j]&gt;&gt;w[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=m;j&gt;=<span class="hljs-number">0</span>;j--)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;=s[i];k++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(v[i][k]&lt;=j)<br>                &#123;<br>                    f[j] = <span class="hljs-built_in">max</span>(f[j], f[j - v[i][k]] + w[i][k]);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;f[m];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="线性DP"><a href="#线性DP" class="headerlink" title="线性DP"></a>线性DP</h2><p>线性指递推有个模糊的顺序，如背包问题的二维表从左到右</p>
<h3 id="数字三角形"><a href="#数字三角形" class="headerlink" title="数字三角形"></a>数字三角形</h3><p><img src="/2022/12/14/algorithm/image-20230808110244360.png" alt="image-20230808110244360" style="zoom: 50%;"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">510</span>, INF = <span class="hljs-number">1e9</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> a[N][N];<br><span class="hljs-type">int</span> f[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; j ++ )<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i][j]);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i ++ )<span class="hljs-comment">//因为递推式需要用到[i-1,j-1]和[i-1,j]项,故需要初始化为负无穷,避免选择该路径</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= i + <span class="hljs-number">1</span>; j ++ )<br>            f[i][j] = -INF;<br><br>    f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; j ++ )<br>            f[i][j] = <span class="hljs-built_in">max</span>(f[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + a[i][j], f[i - <span class="hljs-number">1</span>][j] + a[i][j]);<br><br>    <span class="hljs-type">int</span> res = -INF;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) res = <span class="hljs-built_in">max</span>(res, f[n][i]);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="最长上升子序列一"><a href="#最长上升子序列一" class="headerlink" title="最长上升子序列一"></a>最长上升子序列一</h3><p><img src="/2022/12/14/algorithm/image-20230808165203445.png" alt="image-20230808165203445" style="zoom:50%;"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> f[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>        f[i]=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;i;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(a[j]&lt;a[i])<br>            &#123;<br>                f[i]=<span class="hljs-built_in">max</span>(f[i],f[j]+<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        res=<span class="hljs-built_in">max</span>(res,f[i]);<br>    &#125;<br>    cout&lt;&lt;res;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="最长上升子序列贰"><a href="#最长上升子序列贰" class="headerlink" title="最长上升子序列贰"></a>最长上升子序列贰</h3><p>采用类似单调队列的样子，s[i]存储长度为i的最长上升子序列的最小的末尾元素，可证明s存储的结果一定是严格单调递增的，证明：</p>
<p>假设s[i]=s[i+1],则可知对于长度为i+1的子序列，其最小的末尾元素是s[i+1]，那这个序列的第i个元素一定小于s[i+1]，与s[i]=s[i+1]不符，故可证；若s[i]&gt;s[i+1]，同理可证</p>
<p>所以s数组一定是单调递增的，当插入一个新的数h时，先找到最大的比h小的数s[k]，可知由于s[k]是长度为k的子序列中末尾元素最小的，所以h与该序列拼接可以得到一个长度为k+1的子序列，所以我们需要将其与s[k+1]的大小进行比较，判断是否能替换</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> a[N],f[N];<br><span class="hljs-type">int</span> cnt;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> l=<span class="hljs-number">1</span>,r=cnt;<br>    <span class="hljs-keyword">while</span>(l&lt;r)<span class="hljs-comment">//等价于找到第一个比x大的进行替换</span><br>    &#123;<br>        <span class="hljs-type">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(f[mid]&gt;=x) r=mid;<br>        <span class="hljs-keyword">else</span> l=mid+<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];<br>    f[++cnt]=a[<span class="hljs-number">1</span>];<span class="hljs-comment">//从1开始</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[i]&gt;f[cnt]) f[++cnt]=a[i]; <br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-type">int</span> idx=<span class="hljs-built_in">find</span>(a[i]);<span class="hljs-comment">//找到f中第一个大于等于a[i]的用a[i]替换</span><br>            f[idx]=a[i];<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;cnt;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><p>书上的解释是：</p>
<p><img src="/2022/12/14/algorithm/image-20230808170842735.png" alt="image-20230808170842735"></p>
<p><img src="/2022/12/14/algorithm/image-20230808170813016.png" alt="image-20230808170813016"></p>
<p><img src="/2022/12/14/algorithm/image-20230808171041152.png" alt="image-20230808171041152"></p>
<p>注意这里的f[i-1,j]是包含01和00的，而不是准确表示出第j个一定选，也就是说f[i-1,j]项与f[i-1,j-1]重叠，但由于求的是max，所以不要求不重复，由于f[i-1,j]和f[i,j-1]包含了f[i-1,j-1]，所以无需再比较f[i-1,j-1]</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">char</span> a[N];<br><span class="hljs-type">char</span> b[N];<br><span class="hljs-type">int</span> f[N][N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,a+<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,b+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>        &#123;<br>            f[i][j]=<span class="hljs-built_in">max</span>(f[i<span class="hljs-number">-1</span>][j],f[i][j<span class="hljs-number">-1</span>]);<br>            <span class="hljs-keyword">if</span>(a[i]==b[j])<br>            &#123;<br>                f[i][j]=<span class="hljs-built_in">max</span>(f[i][j],f[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;f[n][m];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="编辑距离"><a href="#编辑距离" class="headerlink" title="编辑距离"></a>编辑距离</h3><p><img src="/2022/12/14/algorithm/image-20230809092357983.png" alt="image-20230809092357983"></p>
<p><img src="/2022/12/14/algorithm/image-20230809092419161.png" alt="image-20230809092419161" style="zoom:67%;"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">char</span> a[N],b[N];<br><span class="hljs-type">int</span> dp[N][N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;a+<span class="hljs-number">1</span>;<br>    cin&gt;&gt;m&gt;&gt;b+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) dp[i][<span class="hljs-number">0</span>]=i;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++) dp[<span class="hljs-number">0</span>][j]=j;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>        &#123;<br>            dp[i][j]=<span class="hljs-built_in">min</span>(dp[i<span class="hljs-number">-1</span>][j]+<span class="hljs-number">1</span>,dp[i][j<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(a[i]==b[j]) dp[i][j]=<span class="hljs-built_in">min</span>(dp[i][j],dp[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]);<br>            <span class="hljs-keyword">else</span> dp[i][j]=<span class="hljs-built_in">min</span>(dp[i][j],dp[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;dp[n][m];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="区间DP"><a href="#区间DP" class="headerlink" title="区间DP"></a>区间DP</h2><p>区间 DP 常用模版</p>
<p>所有的区间dp问题枚举时，第一维通常是枚举区间长度，并且一般 len = 1 时用来初始化，枚举从 len = 2 开始；第二维枚举起点 i （右端点 j 自动获得，j = i + len - 1），从小区间到大区间，以使得大区间能使用小区间的解</p>
<p>模板代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">1</span>; len &lt;= n; len++) &#123;         <span class="hljs-comment">// 区间长度</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i + len - <span class="hljs-number">1</span> &lt;= n; i++) &#123; <span class="hljs-comment">// 枚举起点</span><br>        <span class="hljs-type">int</span> j = i + len - <span class="hljs-number">1</span>;                 <span class="hljs-comment">// 区间终点</span><br>        <span class="hljs-keyword">if</span> (len == <span class="hljs-number">1</span>) &#123;<br>            dp[i][j] = 初始值<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = i; k &lt; j; k++) &#123;        <span class="hljs-comment">// 枚举分割点，构造状态转移方程</span><br>            dp[i][j] = <span class="hljs-built_in">min</span>(dp[i][j], dp[i][k] + dp[k + <span class="hljs-number">1</span>][j] + w[i][j]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>如上循环模式是因为要保证计算dp[i][j]时其依赖的较小的区间的dp值已经计算得到了</p>
<h3 id="石子合并"><a href="#石子合并" class="headerlink" title="石子合并"></a>石子合并</h3><p><img src="/2022/12/14/algorithm/image-20230808173441832.png" alt="image-20230808173441832" style="zoom: 67%;"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">310</span>;<br><span class="hljs-type">int</span> s[N];<br><span class="hljs-type">int</span> f[N][N];<br><span class="hljs-type">int</span> n;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;s[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) s[i]+=s[i<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> len=<span class="hljs-number">2</span>;len&lt;=n;len++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i+len<span class="hljs-number">-1</span>&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-type">int</span> l=i,r=i+len<span class="hljs-number">-1</span>;<br>            f[l][r]=<span class="hljs-number">1e8</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=l;k&lt;r;k++)<br>            &#123;<br>                f[l][r]=<span class="hljs-built_in">min</span>(f[l][r],f[l][k]+f[k+<span class="hljs-number">1</span>][r]+s[r]-s[l<span class="hljs-number">-1</span>]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;f[<span class="hljs-number">1</span>][n];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="计数类DP"><a href="#计数类DP" class="headerlink" title="计数类DP"></a>计数类DP</h2><h3 id="整数划分问题"><a href="#整数划分问题" class="headerlink" title="整数划分问题"></a>整数划分问题</h3><p><strong>方法一</strong></p>
<p>转换为完全背包问题，f[i][j]表示用前i个数凑出j的方案数，易知根据最后一个数的多少进行划分计算最后求和</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1010</span>,mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> f[N][N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++) f[i][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>        &#123;<br>            f[i][j]=f[i<span class="hljs-number">-1</span>][j];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k*i&lt;=j;k++)<br>            &#123;<br>                f[i][j]=(f[i][j]+f[i<span class="hljs-number">-1</span>][j-k*i])%mod;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;f[n][n];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>利用一下变形</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// f[i][j] = f[i - 1][j] + f[i][j - i]</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e3</span> + <span class="hljs-number">7</span>, mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-type">int</span> f[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i ++) &#123;<br>        f[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>; <span class="hljs-comment">// 容量为0时，前 i 个物品全不选也是一种方案</span><br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= n; j ++) &#123;<br>            f[i][j] = f[i - <span class="hljs-number">1</span>][j] % mod; <span class="hljs-comment">// 特殊 f[0][0] = 1</span><br>            <span class="hljs-keyword">if</span> (j &gt;= i) f[i][j] = (f[i - <span class="hljs-number">1</span>][j] + f[i][j - i]) % mod;<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; f[n][n] &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>降维——最终写法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1010</span>,mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> dp[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    dp[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i;j&lt;=n;j++)<br>        &#123;<br>            dp[j]=(dp[j]+dp[j-i])%mod;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;dp[n];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>方法二</strong></p>
<p><img src="/2022/12/14/algorithm/image-20230809103010960.png" alt="image-20230809103010960" style="zoom:50%;"></p>
<p>状态表示：<br>f[i][j]表示总和为i，总个数为j的方案数</p>
<p>状态转移方程：<br>f[i][j] = f[i - 1][j - 1] + f[i - j][j];</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>, mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> f[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br><br>    f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; j ++ )<br>            f[i][j] = (f[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + f[i - j][j]) % mod;<br><br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) res = (res + f[n][i]) % mod;<br><br>    cout &lt;&lt; res &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="数位统计DP"><a href="#数位统计DP" class="headerlink" title="数位统计DP"></a>数位统计DP</h2><h3 id="计数问题"><a href="#计数问题" class="headerlink" title="计数问题"></a>计数问题</h3><p>分情况讨论</p>
<p>问题转换为求1~n这些数中数字i出现的次数，假设n一共有7位，如abcdefg，现在我们考虑第4位（d）上数字i出现的次数，我们构造的数为xxxiyyy</p>
<ol>
<li>若d不为0，xxx取000~abc-1，yyy对于每种xxx的取法都可以取000~999,故为abc*1000</li>
<li>若d为0，则xxx不能取000，因为000 0 123写做123，实际上不会写出这个0，所以这里xxx只能取001~abc-1，yyy取000~999,故为(abc-1)*1000</li>
<li>若XXX取abc，此时若d&gt;i，则yyy可取000~999,故为1000</li>
<li>若XXX取abc，此时若d=i，则yyy可取000~efg，故为efg+1，若d&lt;i不能取</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dgt</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> <span class="hljs-comment">// 计算整数n有多少位</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n) ++ res, n /= <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cnt</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> i)</span> <span class="hljs-comment">// 计算从1到n的整数中数字i出现多少次 </span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>, d = <span class="hljs-built_in">dgt</span>(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= d; ++ j) <span class="hljs-comment">// 从右到左第j位上 数字i出现多少次 </span><br>    &#123;<br>        <span class="hljs-comment">// l和r是第j位左边和右边的整数 (视频中的abc和efg); dj是第j位的数字</span><br>        <span class="hljs-type">int</span> p = <span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>, j - <span class="hljs-number">1</span>), l = n / p / <span class="hljs-number">10</span>, r = n % p, dj = n / p % <span class="hljs-number">10</span>;<br>        <span class="hljs-comment">// 计算第j位左边的整数小于l (视频中l = 000 ~ abc - 1)的情况 左边不等于abc的时候 说明都是比abc小的数字  </span><br>        <span class="hljs-keyword">if</span> (i) res += l * p; <span class="hljs-comment">//如果不是统计数字0 左边直接乘p就行了 n=ab3xxx p=1000  </span><br><span class="hljs-comment">//n=1236055 6000-6999这里1000  第j位上的6出现了p次 但是左边还有16000-16999 26000-26999 36000-36999...1226000-1226999 共左边数字l（即123）个 所以是l*p </span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!i &amp;&amp; l) res += (l - <span class="hljs-number">1</span>) * p; <span class="hljs-comment">// 统计的数字i = 0, 左边高位不能全为0(视频中xxx = 001 ~ abc - 1) </span><br><span class="hljs-comment">//少了0000-0999的一种情况 从10000-10999 开始 ... 1220000-1220999 13000-13999 共(l-1)次 </span><br><br><span class="hljs-comment">// 计算第j位左边的整数等于l (视频中l = abc)的情况 只会和*j位后面的数*有关</span><br><br><br><br><span class="hljs-comment">//下面就是l的左边相等的情况 对第j位上 不会多算6000-6999 ...1226000-1226999里面的任意个集合 123开始的情况</span><br>        <span class="hljs-keyword">if</span> ( (dj &gt; i) &amp;&amp; (i || l) ) res += p;<span class="hljs-comment">//第j位比现在统计的数字大 就可以直接加上p中情况 </span><br><span class="hljs-comment">// n=1236055  则有1235000-1235999 999+1种情况 即p种 </span><br><span class="hljs-comment">//当统计的数字i==0 且 l==0， 举例  n=123456 l==0 第j位为1  就是p=100000 此时000000-099999是不成立的 因为我要统计第j位为i的时候 有多少个这样的 数 而此时   000000-099999 显然和 100000-199999 第j-1位为2的时候重复了</span><br><br>        <span class="hljs-keyword">if</span> ( (dj == i) &amp;&amp; (i || l) ) res += r + <span class="hljs-number">1</span>;<span class="hljs-comment">//这是r有多少个 就是多少个+1</span><br><span class="hljs-comment">//if(dj==i) n=1236055  1236000-1236055   即55+1种情况</span><br><span class="hljs-comment">//当统计的数字i==0 且 l==0， 举例  n=123456 l==0且i==0 就是000000 -0123456 而这个时候显然和 第j-1的位的时候重复了100000-109999</span><br><br><span class="hljs-comment">//if(dj&gt;i) n=1236000 则有1237000-1237999 所以是0 </span><br><br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a, b;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; a &gt;&gt; b , a)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (a &gt; b) <span class="hljs-built_in">swap</span>(a, b);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">9</span>; ++ i) cout &lt;&lt; <span class="hljs-built_in">cnt</span>(b, i) - <span class="hljs-built_in">cnt</span>(a - <span class="hljs-number">1</span>, i) &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>        cout &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="状态压缩DP"><a href="#状态压缩DP" class="headerlink" title="状态压缩DP"></a>状态压缩DP</h2><h3 id="蒙德里安的梦想"><a href="#蒙德里安的梦想" class="headerlink" title="蒙德里安的梦想"></a>蒙德里安的梦想</h3><p><img src="/2022/12/14/algorithm/image-20230811153912998.png" alt="image-20230811153912998" style="zoom: 67%;"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">12</span>, M = <span class="hljs-number">1</span>&lt;&lt; N;  <br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> f[N][M] ;<span class="hljs-comment">// 第一维表示列， 第二维表示所有可能的状态</span><br><br><span class="hljs-type">bool</span> st[M];  <span class="hljs-comment">//存储每种状态是否有奇数个连续的0，如果奇数个0是无效状态，如果是偶数个零置为true。</span><br><br><span class="hljs-comment">//vector&lt;int &gt; state[M];  //二维数组记录合法的状态</span><br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">state</span>(M);  <span class="hljs-comment">//两种写法等价:二维数组</span><br><br><span class="hljs-type">int</span> m, n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; n &gt;&gt; m, n || m) &#123; <span class="hljs-comment">//读入n和m，并且不是两个0即合法输入就继续读入</span><br><br>        <span class="hljs-comment">//第一部分：预处理1</span><br>        <span class="hljs-comment">//对于每种状态，先预处理每列不能有奇数个连续的0</span><br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-number">1</span> &lt;&lt; n); i ++) &#123;<br><br>            <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span> ;<span class="hljs-comment">//记录连续的0的个数</span><br><br>            <span class="hljs-type">bool</span> isValid = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 某种状态没有奇数个连续的0则标记为true</span><br><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j ++) &#123; <span class="hljs-comment">//遍历这一列，从上到下</span><br><br>                 <span class="hljs-keyword">if</span> ( (i &gt;&gt; j) &amp; <span class="hljs-number">1</span>) &#123;  <br>                     <span class="hljs-comment">//i &gt;&gt; j位运算，表示i（i在此处是一种状态）的二进制数的第j位； </span><br>                     <span class="hljs-comment">// &amp;1为判断该位是否为1，如果为1进入if</span><br>                    <span class="hljs-keyword">if</span> (cnt &amp; <span class="hljs-number">1</span>) &#123; <br>                    <span class="hljs-comment">//这一位为1，看前面连续的0的个数，如果是奇数（cnt &amp;1为真）则该状态不合法</span><br>                        isValid =<span class="hljs-literal">false</span>; <span class="hljs-keyword">break</span>;<br>                    &#125; <br><br>                    cnt = <span class="hljs-number">0</span>; <span class="hljs-comment">// 既然该位是1，并且前面不是奇数个0（经过上面的if判断），计数器清零。</span><br>                    <span class="hljs-comment">//其实清不清零没有影响</span><br>                 &#125;<br>                 <span class="hljs-keyword">else</span> cnt ++; <span class="hljs-comment">//否则的话该位还是0，则统计连续0的计数器++。</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> (cnt &amp; <span class="hljs-number">1</span>)  isValid = <span class="hljs-literal">false</span>; <span class="hljs-comment">//最下面的那一段判断一下连续的0的个数</span><br><br>            st[i]  = isValid; <span class="hljs-comment">//状态i是否有奇数个连续的0的情况,输入到数组st中</span><br>        &#125;<br><br>        <span class="hljs-comment">//第二部分：预处理2</span><br>        <span class="hljs-comment">// 经过上面每种状态 连续0的判断，已经筛掉一些状态。</span><br>        <span class="hljs-comment">//下面来看进一步的判断：看第i-2列伸出来的和第i-1列伸出去的是否冲突</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; (<span class="hljs-number">1</span> &lt;&lt; n); j ++) &#123; <span class="hljs-comment">//对于第i列的所有状态</span><br>            state[j].<span class="hljs-built_in">clear</span>(); <span class="hljs-comment">//清空上次操作遗留的状态，防止影响本次状态。</span><br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; (<span class="hljs-number">1</span> &lt;&lt; n); k ++) &#123; <span class="hljs-comment">//对于第i-1列所有状态</span><br>                <span class="hljs-keyword">if</span> ((j &amp; k ) == <span class="hljs-number">0</span> &amp;&amp; st[ j | k]) <br>                <span class="hljs-comment">// 第i-2列伸出来的 和第i-1列伸出来的不冲突(不在同一行) </span><br>                <span class="hljs-comment">//解释一下st[j | k] </span><br>                <span class="hljs-comment">//已经知道st[]数组表示的是这一列没有连续奇数个0的情况，</span><br>                <span class="hljs-comment">//我们要考虑的是第i-1列（第i-1列是这里的主体）中从第i-2列横插过来的，</span><br>                <span class="hljs-comment">//还要考虑自己这一列（i-1列）横插到第i列的</span><br>                <span class="hljs-comment">//比如 第i-2列插过来的是k=10101，第i-1列插出去到第i列的是 j =01000，</span><br>                <span class="hljs-comment">//那么合在第i-1列，到底有多少个1呢？</span><br>                <span class="hljs-comment">//自然想到的就是这两个操作共同的结果：两个状态或。 j | k = 01000 | 10101 = 11101</span><br>                <span class="hljs-comment">//这个 j|k 就是当前 第i-1列的到底有几个1，即哪几行是横着放格子的</span><br><br>                    state[j].<span class="hljs-built_in">push_back</span>(k);  <br>                    <span class="hljs-comment">//二维数组state[j]表示第j行， </span><br>                    <span class="hljs-comment">//j表示 第i列“真正”可行的状态，</span><br>                    <span class="hljs-comment">//如果第i-1列的状态k和j不冲突则压入state数组中的第j行。</span><br>                    <span class="hljs-comment">//“真正”可行是指：既没有前后两列伸进伸出的冲突；又没有连续奇数个0。</span><br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-comment">//第三部分：dp开始</span><br><br>        <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> f);  <br>        <span class="hljs-comment">//全部初始化为0，因为是连续读入，这里是一个清空操作。</span><br>        <span class="hljs-comment">//类似上面的state[j].clear()</span><br><br>        f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span> ;<span class="hljs-comment">// 这里需要回忆状态表示的定义</span><br>        <span class="hljs-comment">//按定义这里是：前第-1列都摆好，且从-1列到第0列伸出来的状态为0的方案数。</span><br>        <span class="hljs-comment">//首先，这里没有-1列，最少也是0列。</span><br>        <span class="hljs-comment">//其次，没有伸出来，即没有横着摆的。即这里第0列只有竖着摆这1种状态。</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++) &#123; <span class="hljs-comment">//遍历每一列:第i列合法范围是(0~m-1列)</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; (<span class="hljs-number">1</span>&lt;&lt;n); j ++) &#123;  <span class="hljs-comment">//遍历当前列（第i列）所有状态j</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> k : state[j])    <span class="hljs-comment">// 遍历第i-1列的状态k，如果“真正”可行，就转移</span><br>                    f[i][j] += f[i<span class="hljs-number">-1</span>][k];    <span class="hljs-comment">// 当前列的方案数就等于之前的第i-1列所有状态k的累加。</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//最后答案是什么呢？</span><br>        <span class="hljs-comment">//f[m][0]表示 前m-1列都处理完，并且第m-1列没有伸出来的所有方案数。</span><br>        <span class="hljs-comment">//即整个棋盘处理完的方案数</span><br><br>        cout &lt;&lt; f[m][<span class="hljs-number">0</span>] &lt;&lt; endl;<br><br>    &#125;<br>&#125;   <br></code></pre></td></tr></table></figure>
<h3 id="最短Hamilton路径"><a href="#最短Hamilton路径" class="headerlink" title="最短Hamilton路径"></a>最短Hamilton路径</h3><p><img src="/2022/12/14/algorithm/image-20230811112610131.png" alt="image-20230811112610131"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">20</span>,M=<span class="hljs-number">1</span>&lt;&lt;N;<br><br><span class="hljs-type">int</span> f[M][N],w[N][N];<span class="hljs-comment">//w表示的是无权图</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>     <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>      cin&gt;&gt;w[i][j];<br><br>    <span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0x3f</span>,<span class="hljs-built_in">sizeof</span>(f));<span class="hljs-comment">//因为要求最小值，所以初始化为无穷大</span><br>    f[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<span class="hljs-comment">//因为零是起点,所以f[1][0]=0;</span><br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1</span>&lt;&lt;n;i++)<span class="hljs-comment">//i表示所有的情况</span><br>     <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)<span class="hljs-comment">//j表示走到哪一个点</span><br>      <span class="hljs-keyword">if</span>(i&gt;&gt;j&amp;<span class="hljs-number">1</span>)<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;n;k++)<span class="hljs-comment">//k表示走到j这个点之前,以k为终点的最短距离</span><br>        <span class="hljs-keyword">if</span>(i&gt;&gt;k&amp;<span class="hljs-number">1</span>)<br>         f[i][j]=<span class="hljs-built_in">min</span>(f[i][j],f[i-(<span class="hljs-number">1</span>&lt;&lt;j)][k]+w[k][j]);<span class="hljs-comment">//更新最短距离</span><br><br>    cout&lt;&lt;f[(<span class="hljs-number">1</span>&lt;&lt;n)<span class="hljs-number">-1</span>][n<span class="hljs-number">-1</span>]&lt;&lt;endl;<span class="hljs-comment">//表示所有点都走过了,且终点是n-1的最短距离</span><br>    <span class="hljs-comment">//位运算的优先级低于&#x27;+&#x27;-&#x27;所以有必要的情况下要打括号</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="记忆化搜索"><a href="#记忆化搜索" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h2><h3 id="滑雪"><a href="#滑雪" class="headerlink" title="滑雪"></a>滑雪</h3><p><img src="/2022/12/14/algorithm/image-20230811153845644.png" alt="image-20230811153845644" style="zoom: 80%;"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">310</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> h[N][N];<br><span class="hljs-type">int</span> f[N][N];<br><span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;,dy[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dp</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><span class="hljs-comment">//求f[x][y]</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(f[x][y]!=<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> f[x][y];<br>    f[x][y]=<span class="hljs-number">1</span>;<span class="hljs-comment">//注意这个初始化</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> a=x+dx[i],b=y+dy[i];<br>        <span class="hljs-keyword">if</span>(a&gt;=<span class="hljs-number">1</span>&amp;&amp;a&lt;=n&amp;&amp;b&gt;=<span class="hljs-number">1</span>&amp;&amp;b&lt;=m&amp;&amp;h[x][y]&gt;h[a][b])<br>        &#123;<br>            f[x][y]=<span class="hljs-built_in">max</span>(f[x][y],<span class="hljs-built_in">dp</span>(a,b)+<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> f[x][y];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>        &#123;<br>            cin&gt;&gt;h[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(f,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(f));<span class="hljs-comment">//做下标记</span><br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-comment">//遍历搜索最大值</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>        &#123;<br>            res=<span class="hljs-built_in">max</span>(res,<span class="hljs-built_in">dp</span>(i,j));<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;res;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h1><h2 id="区间问题"><a href="#区间问题" class="headerlink" title="区间问题"></a>区间问题</h2><p>区间贪心讨论按左端点、右端点排序，然后依次枚举每个区间</p>
<h3 id="区间选点"><a href="#区间选点" class="headerlink" title="区间选点"></a>区间选点</h3><p>将每个区间按照右端点从小到大进行排序</p>
<p>从前往后枚举区间，end值初始化为无穷小</p>
<p>如果本次区间不能覆盖掉上次区间的右端点， ed &lt; range[i].l</p>
<p>说明需要选择一个新的点， res ++ ; ed = range[i].r;</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Range</span>&#123;<br>    <span class="hljs-type">int</span> l,r;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Range&amp;W)<span class="hljs-type">const</span><span class="hljs-comment">//按照右端点排序</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> r&lt;W.r;<br>    &#125;<br>&#125;range[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;range[i].l,&amp;range[i].r);<br>    <br>    <span class="hljs-built_in">sort</span>(range,range+n);<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>,ed=<span class="hljs-number">-2e9</span>;<span class="hljs-comment">//ed是上一个点的下标</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(range[i].l&gt;ed)<br>        &#123;<br>            res++;<br>            ed=range[i].r;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="最大不相交区间个数"><a href="#最大不相交区间个数" class="headerlink" title="最大不相交区间个数"></a>最大不相交区间个数</h3><p>和上一题代码是一样的</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Range</span>&#123;<br>    <span class="hljs-type">int</span> l,r;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Range&amp;W)<span class="hljs-type">const</span><span class="hljs-comment">//按照右端点排序</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> r&lt;W.r;<br>    &#125;<br>&#125;range[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;range[i].l,&amp;range[i].r);<br>    <br>    <span class="hljs-built_in">sort</span>(range,range+n);<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>,ed=<span class="hljs-number">-2e9</span>;<span class="hljs-comment">//ed是上一个点的下标</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(range[i].l&gt;ed)<br>        &#123;<br>            res++;<br>            ed=range[i].r;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="区间分组"><a href="#区间分组" class="headerlink" title="区间分组"></a>区间分组</h3><p><img src="/2022/12/14/algorithm/image-20230331203155127.png" alt="image-20230331203155127" style="zoom:80%;"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Range</span>&#123;<br>    <span class="hljs-type">int</span> l,r;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Range&amp;W)<span class="hljs-type">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> l&lt;W.l;<br>    &#125;<br>&#125;ranges[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;ranges[i].l,&amp;ranges[i].r);<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(ranges,ranges+n);<br>    priority_queue&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt;,greater&lt;<span class="hljs-type">int</span>&gt; &gt;heap;<span class="hljs-comment">//小根堆</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">auto</span> r=ranges[i];<br>        <span class="hljs-keyword">if</span>(heap.<span class="hljs-built_in">empty</span>()||heap.<span class="hljs-built_in">top</span>()&gt;=r.l) heap.<span class="hljs-built_in">push</span>(r.r);<span class="hljs-comment">//如果空或者没有一个区间可以容纳</span><br>        <span class="hljs-keyword">else</span>&#123;<br>            heap.<span class="hljs-built_in">pop</span>();<br>            heap.<span class="hljs-built_in">push</span>(r.r);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,heap.<span class="hljs-built_in">size</span>());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="区间覆盖"><a href="#区间覆盖" class="headerlink" title="区间覆盖"></a>区间覆盖</h3><p><img src="/2022/12/14/algorithm/image-20230401191424007.png" alt="image-20230401191424007"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Range</span>&#123;<br>    <span class="hljs-type">int</span> l,r;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Range&amp;W)<span class="hljs-type">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span>  l&lt;W.l;<br>    &#125;<br>&#125;ranges[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> st,ed;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;st,&amp;ed);<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;ranges[i].l,&amp;ranges[i].r);<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(ranges,ranges+n);<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">bool</span> suc=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> j=i,r=<span class="hljs-number">-2e9</span>;<br>        <span class="hljs-keyword">while</span>(j&lt;n&amp;&amp;ranges[j].l&lt;=st)<br>        &#123;<br>            r=<span class="hljs-built_in">max</span>(r,ranges[j].r);<br>            j++;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(r&lt;st)<br>        &#123;<br>            res=<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        res++;<br>        <span class="hljs-keyword">if</span>(r&gt;=ed)<br>        &#123;<br>            suc=<span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        st=r;<br>        i=j<span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(suc)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,res);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="Huffman树"><a href="#Huffman树" class="headerlink" title="Huffman树"></a>Huffman树</h2><h3 id="合并果子"><a href="#合并果子" class="headerlink" title="合并果子"></a>合并果子</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    priority_queue&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt;,greater&lt;<span class="hljs-type">int</span>&gt; &gt;heap;<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>        heap.<span class="hljs-built_in">push</span>(x);<br>    &#125;<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(heap.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-type">int</span> a=heap.<span class="hljs-built_in">top</span>();heap.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-type">int</span> b=heap.<span class="hljs-built_in">top</span>();heap.<span class="hljs-built_in">pop</span>();<br>        res+=(a+b);<br>        heap.<span class="hljs-built_in">push</span>(a+b);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="排序不等式"><a href="#排序不等式" class="headerlink" title="排序不等式"></a>排序不等式</h2><p>排队打水，护航问题</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> t[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;t[i]);<br>    <span class="hljs-built_in">sort</span>(t,t+n);<br>    <span class="hljs-built_in">reverse</span>(t,t+n);<br>    LL res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) res+=t[i]*i;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="绝对值不等式"><a href="#绝对值不等式" class="headerlink" title="绝对值不等式"></a>绝对值不等式</h2><h3 id="货仓选址"><a href="#货仓选址" class="headerlink" title="货仓选址"></a>货仓选址</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> q[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;q[i]);<br>    <span class="hljs-built_in">sort</span>(q,q+n);<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) res+=<span class="hljs-built_in">abs</span>(q[i]-q[n/<span class="hljs-number">2</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="推公式"><a href="#推公式" class="headerlink" title="推公式"></a>推公式</h2><h3 id="耍杂技的牛"><a href="#耍杂技的牛" class="headerlink" title="耍杂技的牛"></a>耍杂技的牛</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;PII;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">50010</span>;<br><span class="hljs-type">int</span> n;<br>PII cow[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> s,w;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;w,&amp;s);<br>        cow[i]=&#123;w+s,w&#125;;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(cow,cow+n);<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">-2e9</span>,sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> s=cow[i].first-cow[i].second,w=cow[i].second;<br>        res=<span class="hljs-built_in">max</span>(res,sum-s);<br>        sum+=w;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
</search>
